<?php
namespace app\admin\controller;
use app\admin\Login;
use app\common\model\Type as TypeModel;
use app\common\model\Played as PlayedModel;
use app\common\model\PlayedGroup as PlayedGroupModel;
use app\common\model\PlayedPlGroup as PlayedPlGroupModel;
use app\common\model\PlayedPl as PlayedPlModel;
use app\common\model\LhcTime as LhcTimeModel;
use app\common\model\DataTime as DataTimeModel;
use app\common\model\Data as DataModel;
use app\common\model\ActionLog as LogModel;
class Lottery extends Login{

    public function _initialize(){
        parent::_initialize();
        $menu_group   =   "lottery";
        $this->assign('menu_group',$menu_group);
    }

    public function index(){
        $this->view->page_header = '彩种列表';
        $request    =   request();
        $list       =   TypeModel::getList($request);
        $this->assign('list',$list);
        $this->assign('types',TypeModel::TYPE_ARRAY);
        return $this->fetch();
    }

    public function edit(){  
        $request = request();
        $params = $request->param();
        if(request()->isGet()){
            if(!empty($params['id'])){
                $info =  TypeModel::get(['id'=>$params['id']]);
                $this->assign('info',$info);  
            }
            $this->assign('types',TypeModel::TYPE_ARRAY);
            return view();
        }else{
            $id =  !empty($params['id'])? $params['id']:'';
            if($id){
                $type = TypeModel::get(intval($id));
            }else{
                $type = new TypeModel($params);
            }
            $list =  $type->validate('Lottery.index')->save($params);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$type,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($type->getError());
            }
        } 
    }

    public function playedGroup(){
        $this->view->page_header = '玩法分组';
        $request    =   request();
        $list       =   PlayedGroupModel::getList($request);
        $this->assign('list',$list);
        $this->assign('types',TypeModel::TYPE_ARRAY);
        return $this->fetch();
    }

    public  function playedGroup_edit(){  
        $request    =   request();
        $params     =   $request->param(); 
        if(request()->isGet()){
            if(!empty($params['id'])){
                $info =  PlayedGroupModel::get(['id'=>$params['id']]);
                $this->assign('info',$info);  
            }
            $this->assign('types',TypeModel::TYPE_ARRAY);
            return view();
        }else{
            $id     =  !empty($params['id'])? $params['id']:'';
            if($id){
                $playedgroup = PlayedGroupModel::get(intval($id));
            }else{
                $playedgroup    =   new PlayedGroupModel($params);
            }
            $list = $playedgroup->validate('Lottery.playedgroup')->save($params);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$playedgroup,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($playedgroup->getError());
            }
        }
    }

    public function played(){
        $this->view->page_header = '玩法列表';
        $request = request();
        $list =PlayedModel::getList($request);
        $this->assign('list',$list);
        $this->assign('types',TypeModel::TYPE_ARRAY);
        return $this->fetch();        
    }
    
    public  function played_edit(){  
        $request = request();
        $params = $request->param(); 
        if(request()->isGet()){
            if(!empty($params['id'])){
                $info =  PlayedModel::get(['id'=>$params['id']]);
                $this->assign('info',$info);  
            }
            $this->assign('types',TypeModel::TYPE_ARRAY);
            return view();
        }else{
            $id   =  !empty($params['id'])? $params['id']:'';
            if($id){
                $played =   PlayedModel::get(intval($id));
            }else{
                $played =   new PlayedModel($params);
            }
            if($is_kqwf){
                $list   =   $played->validate('Lottery.playedgf')->save($params);    
            }else{
                $list   =   $played->validate('Lottery.playedkq')->save($params);
            }
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$played,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($played->getError());
            }
        }
    }

    public function plgroup(){
        $this->view->page_header = '赔率分组';
        $request    =   request();
        $list =PlayedPlGroupModel::getList($request);
        $this->assign('list',$list);
        return $this->fetch();        
    }

    public  function plgroup_edit(){  
        $request = request();
        $params = $request->param();
        if(request()->isGet()){ 
            if(!empty($params['id'])){
                $info =  PlayedPlGroupModel::get(['id'=>$params['id']]);
                $playid = $info->played->id;
                $type    = $info->played->type;
                $groupid = $info->played->playedgroup->id;
                $this->assign('playid',$playid); 
                $this->assign('typeinfo',$type);   
                $this->assign('groupid',$groupid);  
                $this->assign('info',$info);
            }
            $this->assign('types',TypeModel::TYPE_ARRAY);
            return view();
        }else{
            $id     =  !empty($params['id'])? $params['id']:'';
            if($id){
                $plgroup    =   PlayedPlGroupModel::get(intval($id));
            }else{
                 $plgroup   =   new PlayedPlGroupModel($params);
            }
            $list = $plgroup->validate('Lottery.plgroup')->save($params);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$plgroup,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($plgroup->getError());
            } 
        }
    }

    public function pl(){
        $this->view->page_header = '赔率列表';
        $request    =   request();
        $list       =   PlayedPlModel::getList($request);
        $this->assign('list',$list);
        return $this->fetch();        
    }

    public  function pl_edit(){  
        $request   =   request();
        $params    =   $request->param();
        if(request()->isGet()){ 
            if(!empty($params['id'])){
                $info =  PlayedPlModel::get(['id'=>$params['id']]);
                $playid = $info->played->id;
                $type = $info->played->type;
                $groupid = $info->played->playedgroup->id;
                $plgroupid = $info->plgroup->id;
                $this->assign('playid',$playid); 
                $this->assign('typeinfo',$type);   
                $this->assign('groupid',$groupid); 
                $this->assign('plgroupid',$plgroupid); 
                $this->assign('info',$info);
            }
            $this->assign('types',TypeModel::TYPE_ARRAY);
            return view();
        }else{
            $id  =  !empty($params['id'])? $params['id']:'';
            if($id){
                $pl = PlayedPlModel::get(intval($id));     
            }else{
                $pl = new PlayedPlModel($params);
            }
            $list = $pl->validate('Lottery.pl')->save($params);
            if(!empty($list)){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$pl,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($pl->getError());
            }
        }
    }

    public function time(){
        $this->view->page_header = '开奖时间表';
        $types = model('type')->allTypes();
        $type = input('type/d');
        if(!$type){
            $this->error('请选择彩种!');
        }
        $lottery = $types[$type]??null;
        if(!$lottery){
            $this->error('彩种不存在!');
        }
        $this->assign('timetype',$type);
        $this->assign('types',$types);
        if($type==43){
            $model = model('lhc_time');
        }else{
            $model = model('data_time');
        }
        $request = request();
        $list = $model->getList($request);
        $this->assign('list',$list);
        return $this->fetch();
    }

    public  function time_edit(){  
        $request = request();
        $params = $request->param();
        if(request()->isGet()){
            if($params['type']??''){
                $timetype = $params['type'];
            }else{
                $timetype = 1;
            }
            if($params['id']??''){
                if($timetype=='43'){
                    $model = model('lhc_time');
                }else{
                    $model = model('data_time');
                }
                $info =  $model->get(['id'=>$params['id'],'type'=>$params['type']]);
                $this->assign('info',$info);  
            }
            $this->assign('timetype',$timetype);  
            $this->assign('types',model('type')->allTypes());
            return view();     
        }else{
            $id =  !empty($params['id'])? $params['id']:'';
            if($id){
                if($type=='43'){
                    $time = LhcTimeModel::get(intval($id));
                }else{
                     $time = DataTimeModel::get(intval($id));
                }
            }else{
                if($type=='43'){
                    $time = new LhcTimeModel($params);
                }else{
                     $time = new DataTimeModel($params);
                }
            }
            $list = $time->validate('Lottery.time')->save($params);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$time,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($time->getError());
            }
        }
       
    }

    public function data(){
        $types = TypeModel::allTypes();
        $this->assign('types',$types);
        $request = request();
        $list = DataModel::getList($request);
        $this->assign('list',$list);
        $this->view->page_header = '开奖结果';
        return $this->fetch();        
    }

    public  function data_edit(){  
        $request = request();
        $params = $request->param(); 
        if(request()->isGet()){
            if(!empty($params['id'])){
                $info =  DataModel::get(['id'=>$params['id']]);
                $this->assign('info',$info);  
            }
            $this->assign('types',TypeModel::allTypes());
            return view();
        }else{
            $id    =  !empty($params['id'])? $params['id']:'';
            if($id){
                $data = DataModel::get(intval($id));     
            }else{
                $data = new DataModel($params);
            }
            $list = $data->validate('Lottery.data')->save($params);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$data,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                return $this->success('操作成功');
            }else{
                return $this->error($data->getError());
            }
        }
    }   

    public function getGroupByid(){
        $request        =   request();
        $params         =   $request->param();
        $type           =  !empty($params['type'])? $params['type']:'';
        $grouplist = TypeModel::allTypesId($type);
        if( $grouplist){
            echo json_encode($grouplist);
        }
            
    }
    public function getPlayedByid(){
        $request        =   request();
        $params         =   $request->param();
        $type           =  !empty($params['type'])? $params['type']:'';
        $groupId        =  !empty($params['groupId'])? $params['groupId']:'';
        $playedlist = TypeModel::allTypesId($type, $groupId);
        if( $playedlist){
            echo json_encode($playedlist);
        }
            
    } 
    public function getPlgroupByid(){
        $request        =   request();
        $params         =   $request->param();
        $type           =  !empty($params['type'])? $params['type']:'';
        $groupId        =  !empty($params['groupId'])? $params['groupId']:'';
        $playId        =  !empty($params['playId'])? $params['playId']:'';
        $playedlist = TypeModel::allTypesId($type, $groupId,$playId);
        if( $playedlist){
            echo json_encode($playedlist);
        }
            
    }  
}