<?php
// +----------------------------------------------------------------------
// | FileName: team.php
// +----------------------------------------------------------------------
// | CreateDate: 2017年10月5日
// +----------------------------------------------------------------------
// | Author: xiaoluo
// +----------------------------------------------------------------------
namespace app\index\controller;

use app\index\Login;

class team extends Login
{

    /* 游戏记录 */
    public final function record()
    {
        $this->getTypes();
        $this->getPlayeds();
        $this->assign('types', $this->types);
        $this->assign('playeds', $this->playeds);
        
        $this->search();
        
        if (! input('get.')) {
            return $this->fetch('record');
        } else {
            return $this->fetch('record-list');
        }
    }

    public final function search()
    {
        $para = request()->param() ;
        $this->getTypes();
        $this->getPlayeds();
        $this->assign('types', $this->types);
        $this->assign('playeds', $this->playeds);
        
        $where = array();
        // 用户名限制
        if (isset($para['username']) && $para['username'] && $para['username'] != '用户名') {
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = array(
                'like',
                "%" . input('username') . "%"
            );
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
        }
        // 用户类型限制
        if (isset($para['utype'])){
            switch ($para['utype']) {
                case 1:
                    // 我自己
                    $map['uid'] = $this->user['uid'];
                    break;
                case 2:
                    // 直属下线
                    $map['parentId'] = $this->user['uid'];
                    break;
                case 3:
                    // 所有下级
                    $map['parents'] = array(
                        'like',
                        '%,' . $this->user['uid'] . ',%'
                    );
                    break;
                default:
                    // 所有人
                    $map['parents'] = array(
                        'like',
                        "%," . $this->user['uid'] . ",%"
                    );
                    $map['uid'] = $this->user['uid'];
                    $map['_logic'] = 'or';
                    break;
            }
        }
        //$where['_complex'] = $map;
        $userList = db('members')->field('uid,username')
            ->where($where)
            ->select();
        
        $userData = array();
        $userStr = ''; 
        foreach ($userList as $user) {
            $userStr = $userStr . $user['uid'] . ',';
            $userData[$user['uid']] = $user;
        }
        
        $where = array();
        // 彩种限制
        if (isset($para['type']) && $para['type']) {
            $where['type'] = $para['type'];
        }
        
        // 时间限制
        if (isset($para['fromTime']) && isset($para['toTime']) && $para['fromTime'] && $para['toTime']) {
            $where['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif (isset($para['fromTime']) && $para['fromTime']) {
            $where['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif (isset($para['toTime']) && $para['toTime']) {
            $where['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if (isset($GLOBALS['fromTime']) && isset($GLOBALS['toTime']) & $GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $where['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        
        // 投注状态限制
        if (isset($para['state']) && $para['state']) {
            switch ($para['state']) {
                case 1:
                    // 已派奖
                    $where['zjCount'] = array(
                        'gt',
                        0
                    );
                    break;
                case 2:
                    // 未中奖
                    $where['zjCount'] = 0;
                    $where['lotteryNo'] = array(
                        'neq',
                        ''
                    );
                    $where['isDelete'] = 0;
                    
                    break;
                case 3:
                    // 未开奖
                    $where['lotteryNo'] = array(
                        'eq',
                        ''
                    );
                    break;
                case 4:
                    // 追号
                    $where['zhuiHao'] = 1;
                    break;
                case 5:
                    // 撤单
                    $where['isDelete'] = 1;
                    break;
            }
        }
        
        // 单号
        if (isset($para['betId']) && $para['betId'] && $para['betId'] != '输入单号')
            $where['wjorderId'] = $para['betId'];
        
        $where['uid'] = array(
            'in',
            $userStr
        ) ;
        $betList = db('bets')->where($where)->order('id desc,actionTime desc')->paginate() ;
        // dump(db('bets')->getLastSql());
        // $i=0;
        // foreach($betList as $bet)
        // {
        // $data[$i] = array_merge($bet,$userData[$bet['uid']]);
        // $i++;
        // }
        // dump($betList);
        // $this->recordList($betList);

        $this->assign('data', $betList);
        $this->assign('_page', $betList->render());
    }

    public final function searchRecord()
    {
        $this->search();
        echo $this->fetch('record-list');
        exit();
    }

    /* 合买记录 */
    public final function hemai()
    {
        $this->getTypes();
        $this->getPlayeds();
        $this->assign('types', $this->types);
        $this->assign('playeds', $this->playeds);
        
        $this->Hemaisearch();
        
        if (! input('get.'))
            return $this->fetch('hemai');
        else
            return $this->fetch('hemai_list');
    }

    public final function searchHemai()
    {
        $this->Hemaisearch();
        return $this->fetch('hemai_list');
    }

    public final function Hemaisearch()
    {
        $para = input('get.');
        
        $this->getTypes();
        $this->getPlayeds();
        $this->assign('types', $this->types);
        $this->assign('playeds', $this->playeds);
        
        $where = array();
        // 彩种限制
        if ($para['type']) {
            $where['type'] = $para['type'];
        }
        // 时间限制
        $map_hm = array();
        if ($para['fromTime'] && $para['toTime']) {
            $where['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
            $map_hm['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif ($para['fromTime']) {
            $where['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
            $map_hm['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif ($para['toTime']) {
            $where['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
            $map_hm['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if ($GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $where['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
                $map_hm['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        // 用户名限制
        if ($para['username'] && $para['username'] != '用户名') {
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = array(
                'like',
                "%" . input('username') . "%"
            );
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
        }
        $where['hmEnable'] = 1;
        $where['hmIsFa'] = 1;
        $betList = db('bets')->where($where)
            ->order('id desc,actionTime desc')
            ->select();
        
        $hemailist = db('bets_hemai')->where($map_hm)
            ->order('id desc')
            ->select();
        $hemaiData = array();
        foreach ($hemailist as $hemai) {
            $hemaiData[$hemai['id']] = $hemai;
        }
        foreach ($betList as $bet) {
            if ($bet['hmId'])
                $hemai = $hemaiData[$bet['hmId']];
            if ($hemai) {
                unset($hemai['id']);
                $data[$bet['id']] = array_merge($bet, $hemai);
            }
        }
        
        $this->recordList($data);
    }

    /**
     * 盈亏报表
     * @return mixed
     */
    public final function report()
    {
        $this->reportSearch();
        if (! input('get.')) {
            return $this->fetch('report');
        } else {
            return $this->fetch('report-list');
        }
    }

    public final function searchReport()
    {
        $this->reportSearch();
        echo $this->fetch('report-list');
        exit();
    }

    public final function reportSearch()
    {
        $para = input('get.');

        $where = array();
        $parentWhere = array();
        // 用户限制
        $uid = $this->user['uid'];
        if (isset($para['parentId']) && $para['parentId'] = intval($para['parentId'])) {
            // 直属下级
            $where['parentId'] = $para['parentId'];
            
            $parentWhere['parents'] = array(
                'like',
                "%," . $para['parentId'] . ",%"
            );
            $parentWhere['uid'] = $para['parentId'];
            //$parentWhere['_logic'] = 'or';
        } elseif (isset($para['uid']) && $para['uid']) {
            // 上级
            $user = db('members')->where(array(
                'uid' => $para['uid']
            ))->find();
            $where['uid'] = $user['parentId'];
            
            $parentWhere['parents'] = array(
                'like',
                "%," . $user['parentId'] . ",%"
            );
            $parentWhere['uid'] = $user['parentId'];
            //$parentWhere['_logic'] = 'or';
        } elseif (isset($para['username']) &&$para['username'] && $para['username'] != '用户名') {
            // 用户名限制
            
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = $para['username'];
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
            
            $user = db('members')->where(array(
                'username' => $para['username']
            ))->find();
            $parentWhere['parents'] = array(
                'like',
                "%," . $user['uid'] . ",%"
            );
            $parentWhere['uid'] = $user['uid'];
            //$parentWhere['_logic'] = 'or';
        } else {
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
            $where['uid'] = $this->user['uid'];
            //$where['_logic'] = 'or';
            
            $parentWhere['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
            $parentWhere['uid'] = $this->user['uid'];
            //$parentWhere['_logic'] = 'or';
        }
        
        $userList = db('members')->field('uid,username,parentId,coin')
            ->where($where)
            ->order('uid')
            ->select();
        
        $userData = array();
        foreach ($userList as $user) {
            // $userStr = $userStr.$user['uid'].',';
            $userData[$user['uid']] = $user;
        }
        
        $map = array();
        // 时间限制
        if (isset($para['fromTime']) && isset($para['toTime']) && $para['fromTime'] && $para['toTime']) {
            $map['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif (isset($para['fromTime']) && $para['fromTime']) {
            $map['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif (isset($para['toTime']) && $para['toTime']) {
            $map['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if (isset($GLOBALS['fromTime']) && isset($GLOBALS['toTime']) && $GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $map['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        // dump($map['actionTime']);
        // $map['uid'] = array('in',$userStr);
        
        $coinList = db('coin_log')->where($map)
            ->field("actionTime,uid,sum(case when liqType in ('2','3') then coin else 0 end) as fanDianAmount,
		0-sum(case when liqType in ('101','102','103','7') then coin else 0 end) as betAmount,
		sum(case when liqType=6 then coin else 0 end) as zjAmount,
		0-sum(case when liqType=107 then fcoin else 0 end) as cashAmount,
		sum(case when liqType=1 then coin else 0 end) as rechargeAmount,
		sum(case when liqType in ('50','51','52','53') then coin else 0 end) as brokerageAmount")
            ->group('uid')
            ->select();
        
        $allList = db('members')->where($parentWhere)
            ->field('uid,coin')
            ->order('uid')
            ->select();
        $all = array();
        foreach ($coinList as $coin) {
            $user2 = isset($userData[$coin['uid']]) ? $userData[$coin['uid']] : 0 ;
            if ($user2) {
                $data[$coin['uid']] = array_merge($coin, $user2);
            }
            
            foreach ($allList as $user) {
                if ($coin['uid'] == $user['uid']) {
                    $all['betAmount'] += $coin['betAmount'];
                    $all['zjAmount'] += $coin['zjAmount'];
                    $all['fanDianAmount'] += $coin['fanDianAmount'];
                    $all['brokerageAmount'] += $coin['brokerageAmount'];
                    $all['cashAmount'] += $coin['cashAmount'];
                    $all['rechargeAmount'] += $coin['rechargeAmount'];
                }
                $all['coin'] += $user['coin'];
            }
        }
        // 将没有消费的用户补上为0，显示出来，提高用户体验
        $data = array();
        foreach ($userData as $u) {
            if ( isset($data[$u['uid']]) && (!$data[$u['uid']])) {
                $data[$u['uid']] = array(
                    'uid' => $u['uid'],
                    'parentId' => $u['parentId'],
                    'username' => $u['username'],
                    'betAmount' => 0.0000,
                    'zjAmount' => 0.0000,
                    'fanDianAmount' => 0.0000,
                    'brokerageAmount' => 0.0000,
                    'cashAmount' => 0.0000,
                    'coin' => $u['coin'],
                    'rechargeAmount' => 0.0000
                );
            }
        }
        
        $this->recordList($data);
        
        // 团队
        $this->assign('all', $all);
        
        $this->assign('para', $para);
        $this->assign('user', $this->user);
    }

    // 会员管理
    public final function member()
    {
        // dump(input('get.'));
        $this->memberSearch();
        if (! input('get.')) {
            echo  $this->fetch('member'); die;
        } else {
            echo  $this->fetch('member-list'); die;
        }
    }

    public final function searchMember()
    {
        $this->memberSearch();
        echo  $this->fetch('member-list'); die;
    }

    public final function memberSearch()
    {
        if (input('username') && input('username') != '用户名') {
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = array(
                'like',
                "%" . input('username') . "%"
            );
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
        } else {
            switch (input('utype')) {
                case 1:
                    // 我自己
                    $where['uid'] = $this->user['uid'];
                    break;
                case 2:
                    // 直属下级
                    $uid = $this->user['uid'];
                    if (input('uid')) {
                        $uid = input('uid');
                    }
                    $where['parentId'] = $uid;
                    break;
                case 3:
                    // 所有下级
                    $where['parents'] = array(
                        'like',
                        "%" . $this->user['uid'] . ",%"
                    );
                    break;
                default:
                    // 所有人
                    $where['parents'] = array(
                        'like',
                        "%," . $this->user['uid'] . ",%"
                    );
                    $where['uid'] = $this->user['uid'];
                    //$where['_logic'] = 'or';
                    break;
            }
        }
        
        $logins = model('member_session')->where(array('accessTime' => array('gt',time() - 15 * 60),'isOnLine' => 1))->order('id')->select();
        $logins2 = array();
        foreach ($logins as $l) {
            $logins2[$l['uid']] = $l;
        }
        
        $this->assign('user', $this->user);
        $this->assign('logins2', $logins2);
        
        $userList = model('members')->where($where)->order('uid')->select()->toArray();
        // dump($where);
        $this->recordList($userList, 10);
        $this->assign('user', $this->user);
    }

    public final function userUpdate()
    {
        $user = db('members')->find(input('id'));
        $this->assign('userData', $user);
        
        $parentData = db('members')->find($user['parentId']);
        
        if ($userData['parentId']) {
            $parentData = $parentData;
        } else {
            $this->getSystemSettings();
            $parentData['fanDian'] = $this->settings['fanDianMax'];
            $parentData['fanDianBdw'] = $this->settings['fanDianBdwMax'];
        }
        $sonFanDianMax = db('members')->where(array(
            'isDelete' => 0,
            'parentId' => input('uid')
        ))
            ->field('max(fanDian) sonFanDian, max(fanDianBdw) sonFanDianBdw')
            ->find();
        
        $this->assign('parentData', $parentData);
        $this->assign('sonFanDianMax', $sonFanDianMax);
        return $this->fetch('update-menber');
    }

    public final function userUpdateed()
    {
        if (input('fanDian') < 0)
            $this->error('返点不能小于0');
        $user = db('members')->where(array(
            'username' => input('username')
        ))->find();
        if ($this->user['uid'] != $user['parentId'])
            $this->error('不是你的直属下级，不可以修改');
        
        if ($this->user['fanDian'] <= input('fanDian'))
            $this->error('返点不可以大于上级');
        
        $sonFanDianMax = db('members')->where(array(
            'isDelete' => 0,
            'parentId' => $user['uid']
        ))
            ->field('max(fanDian) sonFanDian, max(fanDianBdw) sonFanDianBdw')
            ->find();
        
        if ($sonFanDianMax['sonFanDian']) {
            if ($sonFanDianMax['sonFanDian'] >= input('fanDian'))
                $this->error('返点不可以小于直属下级' . $sonFanDianMax['sonFanDian']);
        }
        
        $data['uid'] = $user['uid'];
        $data['fanDian'] = input('fanDian');
        $data['type'] = input('type');
        
        if (db('members')->save($data)) {
            $this->success('修改成功', url('member'));
        } else {
            $this->error('修改失败');
        }
    }

    public final function addMember()
    {
        // print_r($this->getMyUserCount());
        return $this->fetch('add-member');
    }

    public final function insertMember()
    {
        $username = input('username');
        $password = input('password');
        if (! $username . trim() || ! $password . trim())
            $this->error('用户名或密码不能为空');
        
        if (! preg_match("/^[0-9a-zA-Z]{4,30}$/", input('username'))) {
            $this->error('用户名只能由英文和数字组成，长度4-30个字符');
        }
        
        if (db('members')->where(array(
            'username' => input('username')
        ))->find())
            $this->error('用户' . input('username') . '已经存在');
        
        if (input('fanDian') < 0)
            $this->error('返点不能小于0');
        
        if ($this->user['fanDian'] <= input('fanDian'))
            $this->error('返点不可以大于上级');
        
        $para['parentId'] = $this->user['uid'];
        $para['parents'] = $this->user['parents'];
        $para['parents2'] = $this->user['parents2'] . '>' . input('username');
        $para['password'] = think_ucenter_md5(input('password'), UC_AUTH_KEY);
        $para['username'] = input('username');
        $para['qq'] = input('qq');
        $para['type'] = input('type');
        $para['regIP'] = $this->ip(true);
        $para['regTime'] = $this->time;
        
        if (! $para['nickname'])
            $para['nickname'] = $para['username'];
        if (! $para['name'])
            $para['name'] = $para['username'];
        
        // 查检返点设置
        if ($para['fanDian'] = floatval(input('fanDian'))) {
            $this->getSystemSettings();
            if ($para['fanDian'] % $this->settings['fanDianDiff'])
                $this->error(sprintf('返点只能是%.1f%的倍数', $this->settings['fanDianDiff']));
        } else {
            $para['fanDian'] = 0;
        }
        
        db()->startTrans();
        if ($lastid = db('members')->insert($para)) {
            if (db('members')->save(array(
                'uid' => $lastid,
                'parents' => $this->user['parents'] . ',' . $lastid
            ))) {
                db()->commit(); // 成功则提交
                $this->success('添加会员成功', url('team/member'));
            }
        }
        
        db()->rollback(); // 不成功，则回滚
        $this->error('添加会员失败');
    }

    /* 帐变列表 */
    public final function coin()
    {
        $this->coinSearch();
        if (! input('get.'))
            return $this->fetch('coin');
        else
            return $this->fetch('coin-list');
    }

    public final function searchCoin()
    {
        $this->coinSearch();
        echo $this->fetch('coin-list');
        exit();
    }

    public final function coinSearch()
    {
        $this->getTypes();
        $this->getPlayeds();
        $this->assign('types', $this->types);
        $this->assign('playeds', $this->playeds);
        
        $para = input('get.');
        $where = array();
        
        // 用户名限制
        if (isset($para['username']) && $para['username'] && $para['username'] != '用户名') {
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = array(
                'like',
                "%" . $para['username'] . "%"
            );
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
        }
        // 用户类型限制
        if(isset($para['utype'])){
            switch ($para['utype']) {
                case 1:
                    // 我自己
                    $map['uid'] = $this->user['uid'];
                    break;
                case 2:
                    // 直属下线
                    $map['parentId'] = $this->user['uid'];
                    break;
                case 3:
                    // 所有下级
                    $map['parents'] = array(
                        'like',
                        '%,' . $this->user['uid'] . ',%'
                    );
                    break;
                default:
                    // 所有人
                    $map['parents'] = array(
                        'like',
                        "%," . $this->user['uid'] . ",%"
                    );
                    $map['uid'] = $this->user['uid'];
                    $map['_logic'] = 'or';
                    break;
            }
        }
        
        //$where['_complex'] = $map;
        $userList = db('members')->field('uid,username')
            ->where($where)
            ->select();
        // dump($userList);
        $userData = array();
        $userStr = '';
        foreach ($userList as $user) {
            $userStr = $userStr . $user['uid'] . ',';
            $userData[$user['uid']] = $user;
        }
        
        $where = array();
        // 账变类型限制
        if (isset($para['liqType']) && $para['liqType']) {
            $where['liqType'] = $para['liqType'];
            if ($para['liqType'] == 2)
                $where['liqType'] = array(
                    'between',
                    '2,3'
                );
        }
        
        // 时间限制
        if (isset($para['toTime']) && isset($para['fromTime']) && $para['fromTime'] && $para['toTime']) {
            $where['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif (isset($para['fromTime']) && $para['fromTime']) {
            $where['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif (isset($para['toTime']) && $para['toTime']) {
            $where['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if (isset($GLOBALS['fromTime']) && isset($GLOBALS['toTime']) && $GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $where['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        
        $userStr = substr($userStr, 0, - 1);
        $where['uid'] = array(
            'in',
            $userStr
        );
        // dump($where);
        $coinList = db('coin_log')->field('uid,actionTime,liqType,extfield0,extfield1,coin,userCoin')
            ->where($where)
            ->order('id desc')
            ->select();
        // dump($coinList);
        unset($where['liqType']);
        $betList = db('bets')->field('id,actionNo,mode,type,playedId,wjorderId')
            ->where($where)
            ->order('id desc')
            ->select();
        $betData = array();
        foreach ($betList as $bet) {
            $betData[$bet['id']] = $bet;
        }
        
        $data = array();
        $i = 0;
        foreach ($coinList as $coin) {
            $b = isset($betData[$coin['extfield0']]) ? $betData[$coin['extfield0']] : array();
            $b = $b ? $b : array();
            $data[$i] = array_merge($coin, $userData[$coin['uid']], $b);
            $i ++;
        }
        // dump($data);
        
        $this->recordList($data);
    }

    /* 帐变列表 */
    public final function fenhong()
    {
        $this->fenhongSearch();
        if (! input('get.'))
            return $this->fetch('fenhong');
        else
            return $this->fetch('fenhong-list');
    }

    public final function searchFenhong()
    {
        $this->fenhongSearch();
        
        return $this->fetch('fenhong-list');
    }

    public final function fenhongSearch()
    {
        $para = input('get.');
        $para['liqType'] = 110;
        $where = array();
        
        $where['uid'] = $this->user['uid'];
        $userList = db('members')->field('uid,username')
            ->where($where)
            ->select();
        // dump($userList);
        $userData = array();
        foreach ($userList as $user) {
            $userStr = $userStr . $user['uid'] . ',';
            $userData[$user['uid']] = $user;
        }
        
        $where = array();
        // 账变类型限制
        if ($para['liqType']) {
            $where['liqType'] = $para['liqType'];
            if ($para['liqType'] == 2)
                $where['liqType'] = array(
                    'between',
                    '2,3'
                );
        }
        
        // 时间限制
        if ($para['fromTime'] && $para['toTime']) {
            $where['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif ($para['fromTime']) {
            $where['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif ($para['toTime']) {
            $where['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if ($GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $where['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        
        $userStr = substr($userStr, 0, - 1);
        $where['uid'] = array(
            'in',
            $userStr
        );
        // dump($where);
        $coinList = db('coin_log')->field('uid,actionTime,liqType,extfield0,extfield1,coin,userCoin')
            ->where($where)
            ->order('id desc')
            ->select();
        // dump($coinList);
        unset($where['liqType']);
        $betList = db('bets')->field('id,actionNo,mode,type,playedId,wjorderId')
            ->where($where)
            ->order('id desc')
            ->select();
        $betData = array();
        foreach ($betList as $bet) {
            $betData[$bet['id']] = $bet;
        }
        
        $data = array();
        $i = 0;
        foreach ($coinList as $coin) {
            $b = $betData[$coin['extfield0']];
            $b = $b ? $b : array();
            $data[$i] = array_merge($coin, $userData[$coin['uid']], $b);
            $i ++;
        }
        // dump($data);
        
        $this->recordList($data);
    }

    // 团队统计
    public final function team()
    {
        $teamAll = db('members')->where(array(
            'isDelete' => 0,
            'parents' => array(
                'like',
                '%,' . $this->user['uid'] . ',%'
            )
        ))
            ->field('sum(coin) coin, count(uid) count')
            ->find();
        $teamAll2 = db('members')->where(array(
            'isDelete' => 0,
            'parentId' => $this->user['uid']
        ))
            ->field('count(uid) count')
            ->find();
        
        $this->assign('teamAll', $teamAll);
        $this->assign('teamAll2', $teamAll2);
        $this->assign('user', $this->user);
        return $this->fetch('team');
    }

    // 提现记录
    public final function cashRecord()
    {
        $this->cashSearch();
        if (! input('get.'))
            return $this->fetch('cashRecord');
        else
            return $this->fetch('cash-list');
    }

    public final function searchCashRecord()
    {
        $this->cashSearch();
        echo  $this->fetch('cash-list'); die;
    }

    public final function cashSearch()
    {
        $para = input('get.');
        $para['username'] = isset($para['username']) ? $para['username'] : '' ;
        $para['parents'] = isset($para['parents']) ? $para['parents'] : '' ;
        $para['utype'] = isset($para['utype']) ? $para['utype'] : '' ;
        $para['fromTime'] = isset($para['fromTime']) ? $para['fromTime'] : '' ;
        $para['toTime'] = isset($para['toTime']) ? $para['toTime'] : '' ;
        $whereLogic = 'and' ;
        $data = [] ;

        // 用户名限制
        if ($para['username'] && $para['username'] != '用户名') {
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = array(
                'like',
                "%" . input('username') . "%"
            );
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
        } else {
            // 用户类型限制
            switch ($para['utype']) {
                case 1:
                    // 我自己
                    $where['uid'] = $this->user['uid'];
                    break;
                case 2:
                    // 直属下线
                    $where['parentId'] = $this->user['uid'];
                    break;
                case 3:
                    // 所有下级
                    $where['parents'] = array(
                        'like',
                        '%,' . $this->user['uid'] . ',%'
                    );
                    break;
                default:
                    // 所有人
                    $where['parents'] = array(
                        'like',
                        "%," . $this->user['uid'] . ",%"
                    );
                    $where['uid'] = $this->user['uid'];
                    $whereLogic = 'or';
                    break;
            }

        }
        
      if ($whereLogic == 'and') {
          $userList = model('members')->field('uid,username')->where($where)->select();
      } else {
          $userList = model('members')->field('uid,username')->whereor($where)->select();
      }

        $userData = array();
        $userArr = [] ;
        $userStr = '' ;
        foreach ($userList as $user) {
            $userArr[] =  $user['uid'] . ',';
            $userData[$user['uid']] = $user;
        }
        $userStr = implode(',',$userArr);

        $where = array();
        
        // 时间限制
        if ($para['fromTime'] && $para['toTime']) {
            $where['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif ($para['fromTime']) {
            $where['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif ($para['toTime']) {
            $where['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if ($GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $where['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        
        $where['uid'] = array(
            'in',
            $userStr
        );
        $where['isDelete'] = 0;
        $cashList = db('member_cash')->field('id,uid,actionTime,amount,account,username,state,bankId,info')
            ->where($where)
            ->order('id desc')
            ->select();
        
        $i = 0;
        foreach ($cashList as $cash) {
            $data[$i] = array_merge($cash, $userData[$cash['uid']]);
            $i ++;
        }
        
        $bankList = db('bank_list')->field('id,name')
            ->where(array(
            'isDelete' => 0
        ))
            ->order('id')
            ->select();
        $bankData = array();
        foreach ($bankList as $bank) {
            $bankData[$bank['id']] = $bank;
        }
        $this->assign('bankData', $bankData);

        $this->recordList($data);
    }

    // 充值记录
    public final function rechargeRecord()
    {
        $this->rechargeSearch();
        if (! input('get.'))
            return $this->fetch('rechargeRecord');
        else
            return $this->fetch('recharge-list');
    }

    public final function searchrechargeRecord()
    {
        $this->rechargeSearch();
        echo $this->fetch('recharge-list'); die;
    }

    public final function rechargeSearch()
    {
        $para = request()->param() ;
        $para['username']  = isset($para['username']) ? $para['username'] : '' ;
        $para['parents']   = isset($para['parents']) ? $para['parents'] : '' ;
        $para['utype']     = isset($para['utype']) ? $para['utype'] : '' ;
        $para['fromTime']  = isset($para['fromTime']) ? $para['fromTime'] : '' ;
        $para['toTime']    = isset($para['toTime']) ? $para['toTime'] : '' ;
        $whereLogic = 'and' ;
        $data = [] ;
        $where = [] ;

        // 用户名限制
        if ($para['username'] && $para['username'] != '用户名') {
            // 按用户名查找时
            // 只要符合用户名且是自己所有下级的都可查询
            // 用户名用模糊方式查询
            $where['username'] = array(
                'like',
                "%" . $para['username'] . "%"
            );
            $where['parents'] = array(
                'like',
                "%," . $this->user['uid'] . ",%"
            );
        } else {
            // 用户类型限制
            switch ($para['utype']) {
                case 1:
                    // 我自己
                    $map['uid'] = $this->user['uid'];
                    break;
                case 2:
                    // 直属下线
                    $map['parentId'] = $this->user['uid'];
                    break;
                case 3:
                    // 所有下级
                    $map['parents'] = array(
                        'like',
                        '%,' . $this->user['uid'] . ',%'
                    );
                    break ;
                default:
                    // 所有人
                    $where['parents'] = array(
                        'like',
                        "%," . $this->user['uid'] . ",%"
                    );
                    $where['uid'] = $this->user['uid'];
                    $whereLogic = 'or';
                    break;
            }
        }
        if ($whereLogic == 'and') {
            $userList = model('members')->field('uid,username')->where($where)->select();
        } else {
            $userList = model('members')->field('uid,username')->whereor($where)->select();
        }

        $userData = array();
        $userArr = [] ;
        $userStr = '' ;
        foreach ($userList as $user) {
            $userArr[] = $user['uid'] . ',';
            $userData[$user['uid']] = $user;
        }
        $userStr =  implode(',',$userArr) ;

        $where = array();
        // 时间限制
        if ($para['fromTime'] && $para['toTime']) {
            $where['actionTime'] = array(
                'between',
                array(
                    strtotime($para['fromTime']),
                    strtotime($para['toTime'])
                )
            );
        } elseif ($para['fromTime']) {
            $where['actionTime'] = array(
                'egt',
                strtotime($para['fromTime'])
            );
        } elseif ($para['toTime']) {
            $where['actionTime'] = array(
                'elt',
                strtotime($para['toTime'])
            );
        } else {
            if ($GLOBALS['fromTime'] && $GLOBALS['toTime']) {
                $where['actionTime'] = array(
                    'between',
                    array(
                        $GLOBALS['fromTime'],
                        $GLOBALS['toTime']
                    )
                );
            }
        }
        
        $where['uid'] = array(
            'in',
            $userStr
        );
        $where['isDelete'] = 0;
        $cashList = db('member_recharge')->field('id,uid,username,rechargeId,amount,rechargeAmount,mBankId,state,info,actionTime')
            ->where($where)
            ->order('id desc')
            ->select();
        
        $i = 0;

        foreach ($cashList as $cash) {
            $data[$i] = array_merge($cash, $userData[$cash['uid']]);
            $i ++;
        }
        
        $bankList = model('bank_list')->field('id,name')
            ->where(array(
            'isDelete' => 0
        ))
            ->order('id')
            ->select();
        $bankData = array();
        foreach ($bankList as $bank) {
            $bankData[$bank['id']] = $bank;
        }
        $this->assign('bankData', $bankData);
        
        $this->recordList($data);
    }

    // 推广链接
    public final function linkList()
    {
        if ($this->user['type'] == 0)
            $this->error('您不是代理');
        $list = db('links')->where(array(
            'uid' => $this->user['uid']
        ))
            ->order('fanDian desc')
            ->select();
        $this->assign('data', $list);
        return $this->fetch('link-list');
    }

    public final function addLink()
    {
        if ($this->request->isPost()) {
            // $para=$_POST;
            $para['regIP'] = $this->ip(true);
            $para['regTime'] = $this->time;
            $para['uid'] = $this->user['uid'];
            $para['type'] = input('type', '', 'intval');
            // 查检返点设置
            if ($para['fanDian'] = floatval(input('fanDian'))) {
                if ($para['fanDian'] % $this->settings['fanDianDiff'])
                    $this->error(sprintf('返点只能是%.1f%的倍数', $this->settings['fanDianDiff']));
            } else {
                $para['fanDian'] = 0;
            }
            
            if (input('fanDian') >= $this->user['fanDian'])
                $this->error('下级返点不能大于自己的返点');
            
            $para['fanDianBdw'] = floatval(input('fanDianBdw'));
            
            if (db('links')->where(array(
                'uid' => $this->user['uid'],
                'fanDian' => $para['fanDian']
            ))->find())
                $this->error('此链接已经存在');
            
            if (db('links')->insert($para))
                $this->success('添加链接成功', url('linklist'));
            else
                $this->error('添加链接失败');
        } else {
            return $this->fetch('add-link');
        }
    }

    /* 编辑注册链接 */
    public final function linkUpdate()
    {
        if ($this->request->isPost()) {
            
            // 查检返点设置
            if ($para['fanDian'] = floatval(input('fanDian'))) {
                if ($para['fanDian'] % $this->settings['fanDianDiff'])
                    $this->error(sprintf('返点只能是%.1f%的倍数', $this->settings['fanDianDiff']));
            } else {
                $para['fanDian'] = 0;
            }
            
            if (input('fanDian') >= $this->user['fanDian'] || input('fanDianBdw') >= $this->user['fanDianBdw'])
                $this->error('下级返点不能大于自己的返点');
            
            $para['fanDianBdw'] = floatval(input('fanDianBdw'));
            $para['lid'] = intval(input('lid'));
            
            if (! db('links')->where(array(
                'uid' => $this->user['uid'],
                'lid' => input('lid')
            ))->find())
                $this->error('此链接不存在');
            
            if (db('links')->save($para))
                $this->success('修改链接成功');
            else
                $this->error('修改链接失败');
        } else {
            $linkData = db('links')->where(array(
                'lid' => input('lid'),
                'uid' => $this->user['uid']
            ))->find();
            
            if ($linkData['uid']) {
                $parentData = db('members')->field('fanDian, fanDianBdw')->find($this->user['uid']);
            } else {
                $parentData['fanDian'] = $this->settings['fanDianMax'];
                $parentData['fanDianBdw'] = $this->settings['fanDianBdwMax'];
            }
            
            $this->assign('linkData', $linkData);
            $this->assign('parentData', $parentData);
            
            return $this->fetch('update-link');
        }
    }

    public final function deletelink()
    {
        if ($this->request->isPost()) {
            if (db('links')->where(array(
                'lid' => input('lid'),
                'uid' => $this->user['uid']
            ))->delete())
                $this->success('删除成功', url('linklist'));
            else
                $this->error('删除失败');
        }
    }

    public final function getlink()
    {
        $linkData = db('links')->where(array(
            'lid' => input('lid'),
            'uid' => $this->user['uid']
        ))->find();
        
        if ($linkData['uid']) {
            $parentData = db('members')->field('fanDian, fanDianBdw')->find($this->user['uid']);
        } else {
            $parentData['fanDian'] = $this->settings['fanDianMax'];
            $parentData['fanDianBdw'] = $this->settings['fanDianBdwMax'];
        }
        
        $this->assign('linkData', $linkData);
        $this->assign('parentData', $parentData);
        return $this->fetch('get-link');
    }

    public final function turnMoney()
    {
        return $this->fetch('turn-money');
    }

    public final function turnRecharge()
    {
        $me = db('members')->find($this->user['uid']);
        // dump($me);
        // dump('--'.think_ucenter_md5(input('coinpwd'), UC_AUTH_KEY));
        if ($me['coinPassword'] != think_ucenter_md5(input('coinpwd'), UC_AUTH_KEY))
            $this->error('出款密码不正确');
        
        if (intval(input('amount')) <= 0)
            $this->error('转账金额必须大于0');
        if ($me['coin'] - input('amount') < 0)
            $this->error('您的余额不足');
        
        $where['username'] = input('username');
        $child = db('members')->where($where)->find();
        if (! $child)
            $this->error('此用户不存在');
        if (strpos($child['parents'], ',' . $me['uid'] . ',') === false)
            $this->error('此用户不是你的下级');
        
        // 添加本人资金流动日志
        $this->addCoin(array(
            'uid' => $me['uid'],
            'type' => 0,
            'liqType' => 12,
            'info' => '用户[' . $me['username'] . ']转账给其下级[' . input('username') . ']' . input('amount') . '元',
            'extfield0' => input('amount'),
            'coin' => - input('amount'),
            'fcoin' => 0
        ));
        
        // 添加下级资金流动日志
        $this->addCoin(array(
            'uid' => $child['uid'],
            'type' => 0,
            'liqType' => 12,
            'info' => '用户[' . $me['username'] . ']转账给其下级[' . input('username') . ']' . input('amount') . '元',
            'extfield0' => input('amount'),
            'coin' => input('amount'),
            'fcoin' => 0
        ));
        $this->success('给下级转账成功');
    }
}