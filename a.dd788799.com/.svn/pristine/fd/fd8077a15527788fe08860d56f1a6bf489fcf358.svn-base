<?php
namespace app\common\model;
use think\Model;
use app\common\traits\model\Extra as ExtraTrait;

class Apply extends Base{

    use ExtraTrait;
    protected $extra = 'params';

    protected $table = 'gygy_apply';
    protected $createTime = 'created_at';
    protected $updateTime = '';
    protected $autoWriteTimestamp = 'datetime';

    CONST STATUS_ = 0;
    CONST STATUS_AGREE = 1;
    CONST STATUS_DENY = -1;

    CONST BUSINESS_AGENT = 'agent';//审核代理申请提案;
    CONST BUSINESS_WITHDRAW = 'withdraw';
    CONST BUSINESS_ARRAY = [self::BUSINESS_AGENT,self::BUSINESS_WITHDRAW];

    public function user()
    {
        return $this->belongsTo('Member','uid','uid');
    }

    public function admin()
    {
        return $this->belongsTo('Admin','audit_uid','id');
    }
    
    public function scopeAgent($query){
        return $query->where('business',self::BUSINESS_AGENT);
    }

    public function scopeWithdraw($query){
        return $query->where('business',self::BUSINESS_WITHDRAW);
    }

    public function agree($remark,...$extra){
        return $this->audit(self::STATUS_AGREE,$remark,...$extra);
    }

    public function deny($remark,...$extra){
        return $this->audit(self::STATUS_DENY,$remark,...$extra);
    }

    private function audit($status,$remark,...$extra){

        $money_model = transaction(function() use ($status,$remark,$extra){
            
            list($admin) = $extra;
            
            $this->status = $status;
            $this->remark = $remark;
            $this->audit_at = date('Y-m-d H:i:s');
            $this->audit_uid = $admin->id;
            $this->save();

            if(self::STATUS_AGREE == $status){
                event('audit.'.$this->business,[$this]);
            }            
        });
        
        return $this;        
    }

    public function auditAgent($apply){
      
        $money_model = transaction(function() use ($apply){            
            $apply->user->is_agent = 1;
            $apply->user->save();
            return $apply;
        });
        
        return $this;          
        
    }

    public function auditWithdraw($apply){
        
        $money_model = transaction(function() use ($apply){

        /*
        提现记录 从提案申请中单独拿出来;money的withdraw不再关联apply模型,关联withdraw模型;
        主要是apply表无法统计extra字段中的amount属性;
        return $apply->user->decBalance($apply->amount,'withdraw',$apply->id,'审核提现!');
        */
            return Withdraw::create([
                'uid' => $apply->uid,
                'audit_uid' => $apply->audit_uid,
                'amount' => $apply->amount,
                'remark' => $apply->remark,
            ]);

        });
        
        return $this; 
        
    }


    //后台
    public static function getList($request){
        $params = $request->param();
        $query = self::order('id desc');

        if(isset($params['status']) && is_numeric($params['status'])){
            $query->where('status', $params['status']);
        }
        if($params['business']??''){
            $query->where('business', $params['business']);
        }
        if($params['starttime']??''){
            $query->where('created_at','>=', $params['starttime']);
        }
        if($params['endtime']??''){
            $query->where('created_at','<=', $params['endtime']);
        }
        $data = $query->paginate();
        return $data;

    }
}
