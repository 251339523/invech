<?php
namespace app\common\model;
use think\Model;
use app\common\model\LhcTime;
use app\common\model\DataTime;
use app\common\model\LotteryData;
//use app\classes\qishu;

use app\common\model\type\RandomTrait;
use app\common\model\type\QishuTrait;

class  Type  extends Base
{
    use RandomTrait,QishuTrait;

    protected $table = 'gygy_type';
    CONST TYPE_SSC = 1;
    CONST TYPE_11X5 = 2;
    CONST TYPE_3D = 3;
    CONST TYPE_KLSF = 4;
    CONST TYPE_GXKLSF = 5;
    CONST TYPE_XYFT = 6;
    CONST TYPE_K8 = 8;
    CONST TYPE_K3 = 9;
    CONST TYPE_XY28 = 10;
    CONST TYPE_GDKLSF = 43;
    CONST TYPE_6HC = 100;

    CONST TYPE_ARRAY = [
        self::TYPE_SSC => '时时彩',
        self::TYPE_11X5 => '十一选五',
        self::TYPE_3D => '3D/P3/时时乐',
        self::TYPE_KLSF => '快乐十分',
        self::TYPE_GXKLSF => '广西快乐十分',
        self::TYPE_XYFT => '幸运飞艇',
        self::TYPE_K8 => '快8',
        self::TYPE_K3 => '快3',
        self::TYPE_XY28 => '幸运28',
        self::TYPE_GDKLSF => '广东快乐十分',
        self::TYPE_6HC => '香港六合彩',
    ];

    public function groups()
    {
    	return $this->hasMany('PlayedGroup','type','type')
    	->where('enable',1)->order('sort,id');
    }

    public function gfwfgroups()
    {
    	return $this->hasMany('PlayedGroup','type','type')
    	->where('enable',1)->where('is_kqwf',0)->order('sort,id');
    }

    public function qkwfgroups()
    {
    	return $this->hasMany('PlayedGroup','type','type')
    	->where('enable',1)->where('is_kqwf',1)->order('sort,id');
    }

    /*
    static public function getTypes(){
    	return self::with('groups.playeds')->select()->toArray();
    }
    */
    static public function getAll(){
        $types = cache('gygy_all_types');
        if(!$types){
            $types = self::where('enable',1)->order('sort')->select();
        ;    $types_map = [];
            foreach ($types as $type) {                
                $types_map[$type->id] = $type;//$type->toArray();
            }
            $types = $types_map;
            cache('gygy_all_types',$types);
        }
        return $types;        
    }

    static public function idMaps(){
        return self::getAll();
    }
    static public function nameMaps(){
        $types = cache('gygy_type_name_map');
        if(!$types){
            $types = self::where('enable',1)->order('sort')->select();
            $types_map = [];
            foreach ($types as $type) {                
                $name = $type->getAttr('name');
                $types_map[$name] = $type;//$type->toArray();
            }
            $types = $types_map;
            cache('gygy_type_name_map',$types);
        }
        return $types;        
    }

    public static function getLotteryFormRequest(){
        $type = input('type');
        if(is_numeric($type)){
            $types = Type::idMaps();
        }else{
            $types = Type::nameMaps();
        }
        return $lottery = $types[$type]??null;
    }

    static public function findByIdOrName($id=1){
        if(is_numeric($id)){
            $types = self::getAll();
            return $types[$id]??null;
        }
        return self::where('enable',1)->where('name',$id)->find();
    }

    static public function allTypes($id=''){
    	$types = cache('gygy_types');
    	if(!$types){
    		
    		//$types = self::where('enable',1)->all();
    		$types = self::all(['enable'=>1]);

    		$types_map = [];
    		foreach ($types as $type) {

    			$groups_map = [];
    			foreach ($type->groups as $group) {
    				
    				$playeds_map = [];
    				foreach ($group->playeds as $played) {
    					$playeds_map[$played->id] = $played->toArray();
                        if($played->tag){
                            $playeds_map['tags'][$played->tag][$played->id] = $played->toArray();
                        }
    				}

    				$groups_map[$group->id] = $group->toArray();
    				$groups_map[$group->id]['playeds'] = $playeds_map;
    			}

    			$types_map[$type->id] = $type->toArray();
    			$types_map[$type->id]['groups'] = $groups_map;

    		}

    		$types = $types_map;
    		cache('gygy_types',$types);
            cache('gygy_types_version',time());
    	}

    	if($id){
    		return $types[$id]['groups']??null;
    	}else{
    		return $types;	
    	}    	
    }

    static public function gfwfTypes($id=''){
    	$types = cache('gfwf_types');
    	if(!$types){
    		
    		//$types = self::where('enable',1)->all();
    		$types = self::all(['enable'=>1]);

    		$types_map = [];
    		foreach ($types as $type) {

    			$groups_map = [];
    			foreach ($type->gfwfgroups as $group) {
    				
    				$playeds_map = [];
    				foreach ($group->playeds as $played) {
    					$playeds_map[$played->id] = $played->toArray();
                        if($played->tag){
                            $playeds_map['tags'][$played->tag][$played->id] = $played->toArray();
                        }                        
    				}

    				$groups_map[$group->id] = $group->toArray();
    				$groups_map[$group->id]['playeds'] = $playeds_map;
    			}

    			$types_map[$type->id] = $type->toArray();
    			$types_map[$type->id]['groups'] = $groups_map;

    		}

    		$types = $types_map;
    		cache('gfwf_types',$types);
    	}

    	if($id){
    		return $types[$id]['groups']??null;
    	}else{
    		return $types;	
    	}    	
    }

    static public function kqwfTypes($id=''){
    	$types = cache('kqwf_types');
    	if(!$types){
    		
    		//$types = self::where('enable',1)->all();
    		$types = self::all(['enable'=>1]);

    		$types_map = [];
    		foreach ($types as $type) {

    			$groups_map = [];
    			foreach ($type->qkwfgroups as $group) {
    				
    				$playeds_map = [];
    				foreach ($group->playeds as $played) {
    					$playeds_map[$played->id] = $played->toArray();
                        if($played->tag){
                            $playeds_map['tags'][$played->tag][$played->id] = $played->toArray();
                        }                        
    				}

    				$groups_map[$group->id] = $group->toArray();
    				$groups_map[$group->id]['playeds'] = $playeds_map;
    			}

    			$types_map[$type->id] = $type->toArray();
    			$types_map[$type->id]['groups'] = $groups_map;

    		}

    		$types = $types_map;
    		cache('kqwf_types',$types);
    	}

    	if($id){
    		return $types[$id]['groups']??null;
    	}else{
    		return $types;	
    	}
    	
    }

    public function getCodeAttr($value)
    {
        return $this->data['name'];
    }

    public function getLastGameData(){
        $code = $this->data['name'];
        $lastNo = $this->getLastGamePhase();
        return LotteryData::getByCodeAndPeriod($code,$lastNo['actionNo']);     
    }

    public function getRecentGameData(){
        $code = $this->data['name'];        
        return LotteryData::getRecentByCode($code);     
    }


    public static function getAllLotteyPhase(){
        $time = time();
        $infos = [];
        $lotterys = self::getAll();
        foreach($lotterys as $lottery){
            $info = [];
            $info['lottery_info'] = [
                'id'=>$lottery->id,
                'name'=>$lottery->getAttr('name'),
                'title'=>$lottery->title,
            ];

            $phase   = $lottery->getBetPhase();
            
            $fptime = strtotime($phase['actionTime']) - $time - $lottery->data_ftime;
            $info['bet_info'] = ['phase'=>$phase['actionNo'],'fptime' => $fptime,];
            $info['actionTime'] = $phase['actionTime'];
            $data = $lottery->getRecentGameData();
            if($data){
                $info['result_info'] = ['phase'=>$data->phase,'data' => $data->getAttr('data'),];
            }
            
            $infos[] = $info;
        }
        return $infos;
    }

    //走势图开奖数据
    //最大的记录数 由配置决定;
    //每个彩种一个缓存,每个彩种开奖后 更新缓存;
    //支持前端查询,list_rows参数决定从缓存中取最新的N条记录;
    public function getTrendLotteyData(){        
        $code = $this->data['name'];
        $data = LotteryData::getCachedTrendByCode($code);
        $len = input('list_rows/i');
        if($len<=0 || $len>100){
            $len = 100;
        }
        return $data->slice(0,$len);
    }

    //-----------------api---------------------
/*
    public static function getLastGamePhase($id){
        $time = time();
        $types = self::allTypes();
        $lottery = $types[$id];//self::get($id);

        if($id==43){
            $atime = date('Y-m-d H:i:s', $time);
            //$query = LhcTime::getQuery();
            $query = (new LhcTime())->getQuery();
        }else{
            $atime  = date('H:i:s', $time + $lottery['data_ftime']) ; 
            //$query = DataTime::getQuery();
            $query = (new DataTime())->getQuery();
        }
        $time_model = $query->where('type',$id)->where('actionTime','<=',$atime)->order('actionTime desc')->find();

        if(!$time_model){
            $time_model = $query->where('type',$id)->order('actionNo desc')->find() ;
            $time   = $time-24*3600 ;            
        }

        $actionNo = $time_model->actionNo;
        $actionTime = $time_model->actionTime;

        $qishuFun = $lottery['onGetNoed'];
        if($qishuFun){
            $actionNo = qishu::$qishuFun($actionNo,$time);        
        }
        $actionTime = date('Y-m-d ', $time).$actionTime;

        return ['actionNo'=>$actionNo,'actionTime'=>$actionTime];
    }

    public static function getGamePhase($id){
        $time = time();
        $types = self::allTypes();
        $lottery = $types[$id];//self::get($id);

        if($id==43){
            $atime = date('Y-m-d H:i:s', $time);
            //$query = LhcTime::getQuery();
            $query = (new LhcTime())->getQuery();
        }else{
            $atime  = date('H:i:s', $time + $lottery['data_ftime']) ; 
            //$query = DataTime::getQuery();
            $query = (new DataTime())->getQuery();
        }
        $time_model = $query->where('type',$id)->where('actionTime','>',$atime)->order('actionTime')->find();

        if(!$time_model){
            $time_model = $query->where('type',$id)->order('actionTime')->find() ;
            $time   = $time + 24*3600 ;            
        }

        $actionNo = $time_model->actionNo;
        $actionTime = $time_model->actionTime;

        $qishuFun = $lottery['onGetNoed'];
        if($qishuFun){
            $actionNo = qishu::$qishuFun($actionNo,$time);        
        }
        $actionTime = date('Y-m-d ', $time).$actionTime;

        return ['actionNo'=>$actionNo,'actionTime'=>$actionTime];
    }

    public static function getFtime($id){
        $types = self::allTypes();
        $lottery = $types[$id];//self::get($id);
        return intval($lottery['data_ftime']);
    }
*/

    //----------------后台------------------
    public static function getList(){
        $params = request()->param();
        $query  = self::order('id desc');
        if($params['type']??''){
            $query->where('type', $params['type']);
        }
        if($params['keywords']??''){
            $query->where('title|shortName', 'like','%'.trim($params['keywords']).'%');
        }
        return $query->paginate();
    }

}
