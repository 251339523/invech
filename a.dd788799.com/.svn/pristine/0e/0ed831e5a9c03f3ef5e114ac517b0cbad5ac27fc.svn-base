<?php
// +----------------------------------------------------------------------
// | FileName: Game.php
// +----------------------------------------------------------------------
// | CreateDate: 2017年10月3日
// +----------------------------------------------------------------------
// | Author: xiaoluo
// +----------------------------------------------------------------------
namespace app\index\controller;

use app\index\Login;
use think\Db;
use app\classes\bet;
use app\classes\betC;

use app\index\model\PlayedGroup;

class Game extends Login
{
    public function pl($playedId){
        //301双面,302数字
        //config('default_return_type','json');
        $pls2 = model('played')->kqwfPls($playedId);
        echo json_encode($pls2);    
    }
    
    public function game($type = null, $groupId = null, $played = null)
    {
        $types = model('type')->allTypes();

        $type = input('type/d');
        if(!$type){
            $this->error('请选择彩种!');
        }
        $lottery = $types[$type]??null;
        if(!$lottery){
            $this->error('彩种不存在!');
        }
        $this->view->type = $type;
        $this->view->groups = $types[$type]['groups'];
        
        //快钱玩法组 和 官方玩法组
        $gfwf_groups = model('type')->gfwfTypes($type);
        $this->view->gfwf_groups = $gfwf_groups;
        $kqwf_groups = model('type')->kqwfTypes($type);
        $this->view->kqwf_groups = $kqwf_groups;

        //全部玩法组判定玩法是否存在
        $groupId = input('groupId/d');
        $group = $types[$type]['groups'][$groupId]??null;        
        if(!$group){
            //$groupId = current($types[$type]['groups']); 
            $groupIds = array_keys($types[$type]['groups']);
            $groupId = $groupIds[0]; 
            $group = $types[$type]['groups'][$groupId];
        }
        $this->view->groupId = $groupId;
        $this->view->group = $group;
        $this->view->playeds = $types[$type]['groups'][$groupId]['playeds']??null;
        $this->view->gfwf_playeds = $gfwf_groups[$groupId]['playeds']??null;
        $this->view->kqwf_playeds = $kqwf_groups[$groupId]['playeds']??null;

        $playedId = input('playedId/d');
        $played = $types[$type]['groups'][$groupId]['playeds'][$playedId]??null;
        if(!$played){ 
            $playedIds = array_keys($types[$type]['groups'][$groupId]['playeds']);
            $playedId = $playedIds[0]; 
            $played = $types[$type]['groups'][$groupId]['playeds'][$playedId];
        }
        $this->view->playedId = $playedId;
        $this->view->played = $played;
        if($this->view->played['is_kqwf']==1){
            $this->view->tpl = 'game/game-fast/'.$this->view->played['playedTpl'];
        }else{
            $this->view->tpl = 'game/game-played/'.$this->view->played['playedTpl'];
        }

        $lastNo = $this->getGameLastNo($type) ;  //拿到对应类型的投注信息

        //获取开奖号码
        $return = model('data')->where(array(
            'type'   => $type,
            'number' => $lastNo['actionNo']
        ))
            ->field('data')
            ->find() ;
        $kjHao = $return['data'] ;
        if ( $kjHao )
            $kjHao = explode(',', $kjHao) ;

        $actionNo   = $this->getGameNo($type) ; //读取将要开奖期号
        $types      = $this->getTypes(); //获取所有的 彩种信息
        $kjdTime    = $types[$type]['data_ftime'] ; //开奖停止下注时间

        $diffTime   = strtotime($actionNo['actionTime']) - $this->time - $kjdTime ; //投注截止时间倒计时
        $kjDiffTime = strtotime($lastNo['actionTime'])   - $this->time ;

        $this->assign('actionNo', $actionNo) ;
        $this->assign('lastNo', $lastNo) ;
        $this->assign('kjHao', $kjHao) ;
        $this->assign('kjdTime', $kjdTime) ;
        $this->assign('diffTime', $diffTime) ;
        $this->assign('kjDiffTime', $kjDiffTime) ;

        //获取历史开奖记录
        $history = model('data')->where(array('type' => $type))->order('number DESC')->limit(10)->field('time, number, data')->select() ;
        $this->assign('history', $history) ;

        $this->getSystemSettings() ;
        $this->assign('settings', $this->settings) ;

        /*
        //获取玩法组数据
        $groups = $this->getGroups() ;
        $this->assign('groups', $groups) ;
        //获取玩法详情数据
        $playeds = $this->getPlayeds() ;
        $this->assign('playeds', $playeds) ;
        */

        $maxPl = $this->getPl($playedId) ;
        $this->assign('maxPl', $maxPl) ;
        
        // $sql="select * from {$this->prename}bets where uid={$_SESSION['user']['uid']} order by id desc limit 7";
        $order_list = model('bets')->where(array(
            'uid' => $this->user['uid']
        ))
            ->limit(10)
            ->order('id desc')
            ->select() ;

        $this->assign('order_list', $order_list) ;
        $this->assign('time', $this->time) ;
        $this->get_top(); // 奖金排行
        $this->get_recharge_top() ;  // 充值排行
//var_dump($actionNo);die;
        return $this->fetch() ;
    }

    /**
     *  走势图
     * @return mixed
     */
    public function zoushitu() {
        return $this->fetch() ;
    }

    /**
     * 走势图11X5
     * @return mixed
     */
     public function zoushitu_11x5() {
            return $this->fetch() ;
     }

    public function get_recharge_top()
    {
        // 奖金排行
        $where = array(
            'actionTime' => array(
                'gt',
                strtotime(' 00:00:00')
            ),
            'state' => array(
                'neq',
                0
            ),
            'rechargeAmount' => array(
                'gt',
                1000
            )
        ) ;
        $recharge_tops = model('member_recharge')->where($where)->order('rechargeAmount desc')->select();
        if (count($recharge_tops) < 10) {
            for ($i = 0; $i < 10; $i ++) {
                if (! (isset($recharge_tops[$i]) ? $recharge_tops[$i] : 0)) {
                    $top['username'] = $this->randStr(rand(5, 10));
                    $top['rechargeAmount'] = rand(1000, 20000) + rand(0, 100) / 100;
                    $recharge_tops[$i] = $top;
                }
            }
        }
        $this->assign('recharge_tops', $recharge_tops);
    }

    public function get_top()
    {
        // 奖金排行
        $tops = db('bets')->where(array(
            'actionTime' => array(
                'gt',
                time() - 30 * 60
            ),
            'bonus' => array(
                'gt',
                1000
            )
        ))
            ->order('bonus desc')
            ->select();
        if (count($tops) < 20) {
            $type_str = array(
                1,
                6,
                14,
                15,
                16,
                20
            );
            for ($i = 0; $i < 20; $i ++) {
                if (! (isset($tops[$i]) ? $tops[$i] : 0)) {
                    $top['username'] = $this->randStr(rand(5, 10));
                    if (time() < strtotime(' 02:00:00')) {
                        $type_str = array(
                            1,
                            14
                        );
                        $top['type'] = $type_str[rand(0, 1)];
                    } else if (time() < strtotime(' 09:00:00')) {
                        $top['type'] = 14;
                    } else {
                        $top['type'] = $type_str[rand(0, 5)];
                    }
                    
                    $top['bonus'] = rand(1000, 20000) + rand(0, 100) / 100;
                    $tops[$i] = $top;
                }
            }
        }
        $this->assign('tops', $tops);
        
        $types = $this->getTypes(); //彩种信息

        $this->assign('types', $types);
    }

    public function gettop()
    {
        $this->get_top();
        return $this->fetch('inc_top');
    }

    function randStr($i)
    {
        $str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        $finalStr = "";
        for ($j = 0; $j < $i; $j ++) {
            $finalStr .= substr($str, rand(0, 60), 1);
        }
        return $finalStr;
    }

    public final function group_bak($type, $groupId)
    {
        $this->playeds = $this->getPlayeds(); //拿到所有玩法数据
        $this->type = $type;
        $this->groupId = $groupId;

        $playeds2 = array();
        $i = 0;
        //查询玩法组下面的玩法
        foreach ($this->playeds as $play) {
            if ($play['groupId'] == $groupId && $play['enable'] == 1) {
                $playeds2[$i] = $play;
                break;
                $i ++;
            }
        }
        $playedId = $playeds2[0]['id'];
        
        $maxPl = $this->getPl($playedId);//赔率
        $this->assign('maxPl', $maxPl);
        $this->assign('playeds', $this->playeds);
        $this->assign('type', $this->type);
        $this->assign('groupId', $this->groupId);
        
        echo $this->fetch('inc_game_played');
        exit();
    }

    public final function group($type, $groupId)
    {
        $types = model('type')->allTypes();

        $type = input('type/d');
        if(!$type){
            $this->error('请选择彩种!');
        }
        $lottery = $types[$type]??null;
        if(!$lottery){
            $this->error('彩种不存在!');
        }
        $this->view->type = $type;
        $this->view->groups = $types[$type]['groups'];
        
        $group = $types[$type]['groups'][$groupId]??null;        
        if(!$group){
            //$groupId = current($types[$type]['groups']); 
            $groupIds = array_keys($types[$type]['groups']);
            $groupId = $groupIds[0]; 
            $group = $types[$type]['groups'][$groupId];
        }
        $this->view->groupId = $groupId;
        $this->view->group = $group;
        $this->view->playeds = $group['playeds']??null;
        
        $playedIds = array_keys($this->view->playeds);
        $playedId = $playedIds[0];
        $this->view->playedId = $playedId;
        $this->view->played = $this->view->playeds[$playedId];
        if($this->view->played['is_kqwf']==1){
            $this->view->tpl = 'game/game-fast/'.$this->view->played['playedTpl'];
        }else{
            $this->view->tpl = 'game/game-played/'.$this->view->played['playedTpl'];
        }

        $maxPl = $this->getPl($playedId);//赔率
        $this->assign('maxPl', $maxPl);

        //快钱玩法组 和 官方玩法组
        $gfwf_groups = model('type')->gfwfTypes($type);
        $this->view->gfwf_groups = $gfwf_groups;
        $kqwf_groups = model('type')->kqwfTypes($type);
        $this->view->kqwf_groups = $kqwf_groups;

        echo $this->fetch('inc_game_played');        exit();
    }    

    public final function played_bak($type, $playedId)
    {
        $this->playeds = $this->getPlayeds();
        $data = $this->playeds[$playedId];
        
        $this->type = $type;
        
        $maxPl = $this->getPl($type, $playedId);
        $this->assign('maxPl', $maxPl);
        
        $this->groupId = $data['groupId'];
        $this->played = $playedId;
        
        $this->assign('type', $type);
        $this->assign('groupId', $this->groupId);
        $this->assign('playedId', $playedId);
        $this->assign('current_played', $data);
        $this->assign('tpl', $data['playedTpl']);
        echo $this->fetch("inc_game_content");
        exit();
    }

    public final function played($type, $playedId)
    {
        $types = model('type')->allTypes();

        $type = input('type/d');
        if(!$type){
            return ['status'=>-1,'msg'=>'请选择彩种!!',];
        }
        $lottery = $types[$type]??null;
        if(!$lottery){
            return ['status'=>-1,'msg'=>'彩种不存在!',];
        }
        $this->view->type = $type;
        
        foreach($types[$type]['groups'] as $groupId => $group){
            if($group['playeds'][$playedId]??null){
                $this->view->groupId = $groupId;
                $this->view->playedId = $playedId;
                $this->view->played = $group['playeds'][$playedId];
                if($this->view->played['is_kqwf']==1){
                    $this->view->tpl = 'game/game-fast/'.$this->view->played['playedTpl'];
                }else{
                    $this->view->tpl = 'game/game-played/'.$this->view->played['playedTpl'];
                }                
                break;
            }
        }

        if(!isset($this->view->playedId)){
            return ['status'=>-1,'msg'=>'玩法不存在!',];
        }

        $maxPl = $this->getPl($playedId);
        $this->assign('maxPl', $maxPl);

        //快钱玩法组 和 官方玩法组
        $gfwf_groups = model('type')->gfwfTypes($type);
        $this->view->gfwf_groups = $gfwf_groups;
        $kqwf_groups = model('type')->kqwfTypes($type);
        $this->view->kqwf_groups = $kqwf_groups;
        
        echo $this->fetch("inc_game_content");
        exit();
    }
    
    
    /*
    private function getPl($type = null, $played = null)
    {        
        $sql = "select bonusProp, bonusPropBase from {$this->prename}played where id=" . $played;

        $data = db('played')->where(array(
            'id' => $played
        ))
            ->field('bonusProp, bonusPropBase')
            ->find();
        return $data;    
    }
    */

    //混合玩法的赔率 是 相关玩法的赔率列表
    private function getPl($played = null)
    {        
        $sql = "select bonusProp, bonusPropBase from {$this->prename}played where id=" . $played;

        $data = db('played')->where('id',$played)
            ->field('is_mix,mix_ids,bonusProp, bonusPropBase')->find();
        if($data['is_mix']){
            $data = db('played')->where('id','in',$data['mix_ids'])
            ->field('bonusProp, bonusPropBase')->select();
            $data = $data->toArray();
        }else{
            $data = [$data];
        }
        return $data;    
    }

    // 加载玩法介绍信息
    public final function playTips($playedId)
    {
        $this->playeds = $this->getPlayeds();
        $this->assign('playeds', $this->playeds);
        $this->assign('playedId', $playedId);
        return $this->fetch('inc_game_tips');
    }

    /**
     * 验证是否开启投注
     */
    public final function checkBuy()
    {
        $actionNo = "";
        
        $this->settings = $this->getSystemSettings();
        if ($this->settings['switchBuy'] == 0) {
            $actionNo['flag'] = 1;
        }
        echo json_encode($actionNo);
        exit();
    }

    public final function getNo($type)
    {
        $actionNo = $this->getGameNo($type);
        
        if ($type == 1 && $actionNo['actionTime'] == '00:00') {
            $actionNo['actionTime'] = strtotime($actionNo['actionTime']) + 24 * 3600;
        } else {
            $actionNo['actionTime'] = strtotime($actionNo['actionTime']);
        }
        echo json_encode($actionNo);
        exit();
        // echo json_encode($actionNo);
    }

    public final function postHMCode()
    {
        $bet   = db('bets')->find(input('betid'));
        $hemai = db('bets_hemai')->find($bet['hmId']);
        
        $actionNo = $this->getGameActionNo($bet['type']);
        if ($bet['actionNo'] != $actionNo)
            $this->error('本期已经封单');
        
        if (intval(input('myfen')) != input('myfen') || intval(input('myfen')) < 1)
            $this->error('份数不是正整数');
        if (input('myfen') > $hemai['HaveFen'])
            $this->error('您参与的份数超出剩余份数');
        if ($hemai['buyer']) {
            if (strpos($hemai['buyer'], $this->user['username']) === false)
                $this->error('您不在发起人设置的可以购买名单中');
        }
        // 查询用户可用资金
        $user = db('members')->where(array(
            'uid' => $this->user['uid']
        ))
            ->field('coin')
            ->find();
        $userAmount = $user['coin'];
        if ($userAmount < $hemai['perMoney'] * input('myfen'))
            $this->error('您的可用资金不足');
        
        // 开始事物处理
        Db::startTrans();
        
        $isBetSuccess  = array();
        $isCoinSuccess = array();
        $i = 0;
        
        $have = $hemai['HaveFen'] - input('myfen');
        $hemai_id = db('bets_hemai')->where(array(
            'id' => $hemai['id']
        ))->save(array(
            'HaveFen' => $have
        ));
        
        if ($bet['hmBaoDi'] > 0) {
            $diff = $hemai['HaveFen'] - input('myfen');
            if ($diff < $bet['hmBaoDi']) {
                $ddddd = $hemai['HaveFen'] - input('myfen');
                db('bets')->where(array(
                    'hmId' => $bet['hmId'],
                    'hmIsFa' => 1
                ))->save(array(
                    'hmBaoDi' => $ddddd
                ));
            }
        }
        
        $codes = db('bets')->where(array(
            'hmId' => $bet['hmId'],
            'hmIsFa' => 1
        ))
            ->order('id')
            ->select();
        $ip = $this->ip(true);
        $actionTime = $this->getGameActionTime($bet['type']); // 当期时间
        foreach ($codes as $code) {
            // 插入投注表
            unset($code['id']);
            $code['wjorderId'] = $code['type'] . $code['playedId'] . $this->randomkeys(8 - strlen($code['type'] . $code['playedId']));
            $code['uid'] = $this->user['uid'];
            $code['username'] = $this->user['username'];
            $code['actionIP'] = $ip;
            $code['actionTime'] = time();
            $code['kjTime'] = $actionTime;
            $code['serializeId'] = uniqid();
            $code['hmIsFa'] = 0;
            $code['hmMyFen'] = input('myfen');
            $code['hmBaoDi'] = 0;
            $code['hmOldBaoDi'] = 0;
            
            $isBetSuccess[$i] = db('bets')->data($code)->add();
            
            $liqType = 103;
            $info = '合买';
            
            $amount = abs($code['actionNum'] * $code['mode'] * $code['beiShu'] * $code['hmMyFen'] / $code['hmAllFen']);
            // 添加用户资金流动日志
            $isCoinSuccess[$i] = $this->addCoin(array(
                'uid' => $this->user['uid'],
                'type' => $code['type'],
                'liqType' => $liqType,
                'info' => $info,
                'extfield0' => $isBetSuccess[$i],
                'extfield1' => $code['serializeId'],
                'coin' => - $amount
            ));
            $i ++;
        }
        
        $isSuc = true;
        for (; $i >= 0; $i --) {
            if ($isBetSuccess[$i] === false || $isCoinSuccess[$i] === false) {
                $isSuc = false;
                break;
            }
        }
        
        if ($isSuc) {
            Db::commit(); // 成功则提交
            $this->success('参与合买成功');
        } else {
            Db::rollback(); // 不成功，则回滚
            $this->error('参与合买失败');
        }
        // /////////
    }

    /**
     * 投注
     */
    public final function postCode()
    {
        $urlshang = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : ''; // 上一页URL
        $urlinfo  = parse_url($urlshang);
        $domain   = isset($urlinfo['host']) ? $urlinfo['host'] : '' ;
        $urldan   = isset($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : ''; // 本站域名
        //$urlcheck = substr($urlshang, 8, strlen($urldan));
        $backReturn['status'] = 0 ;
        $backReturn['info'] = '投注失败,请重试...' ;

        //if ($domain != $urldan)
            //$this->error('郑重警告：提交数据出错，请重新投注');

       try{
           $codes   = $_POST['code'] ;
           $para    = $_POST['para'] ;
           $para['actionNo'] = $this->formatActionNo($para['actionNo'],$para['type']) ; //对开奖期号进行格式化

           $hemai   = isset($_POST['hemai']) ? $_POST['hemai'] :  [] ;
           $amount  = 0;
           $fpcount = 1; // 飞盘 默认为1

           $this->getSystemSettings() ;
           if ($this->settings['switchBuy'] == 0)
               throw new \Exception('本平台已经停止购买！');
           if ($this->settings['switchDLBuy'] == 0 && $this->user['type'])
               throw new \Exception('代理不能买单！');
           if (count($codes) == 0)
               throw new \Exception('请先选择号码再提交投注');
           // 检查时间 期数
           // $ftime=$this->getTypeFtime($para['type']); //封单时间

           $actionTime     = $this->getGameActionTime($para['type']); // 当期时间
           $actionNo_array = explode('|', $para['actionNo']);
           foreach ($actionNo_array as $key=>$action_no) {
               $actionNo = $this->getGameActionNo($para['type']); // 当期期数
               $actionNo_array[$key] = doubleval(str_replace('-', '', $action_no)); // 和库中数据保持一致,过滤掉开奖期号中的 "-" 符号
               $no2 = doubleval(str_replace('-', '', $actionNo));
               // $this->error($no.'|'.$no2);
               if ($actionNo_array[$key] < $no2)
                   throw new \Exception('投注失败：该期投注时间已过'.$actionNo_array[$key].'----'.$no2);
           }
           // if($actionTime!=$para['kjTime']) $this->error('投注失败：你投注第'.$para['actionNo'].'已过购买时间1');
           // if($actionNo!=$para['actionNo']) $this->error('投注失败：你投注第'.$para['actionNo'].'已过购买时间2');
           // if($actionTime-$ftime<$this->time) $this->error('投注失败：你投注第'.$para['actionNo'].'已过购买时间3');

           // 查检每注的赔率是否正常
           $this->getPlayeds();
           foreach ($codes as $code) {

               $played = $this->playeds[$code['playedId']];
               // 检查开启
               if (! $played['enable'])
                   throw new \Exception('游戏玩法组已停,请刷新再投 -1');
               // 检查赔率
               $chkBonus = ($played['bonusProp'] - $played['bonusPropBase']) / $this->settings['fanDianMax'] * ($this->user['fanDian'] - $code['fanDian']) + $played['bonusPropBase']; // 实际奖金
               if ($code['bonusProp'] > $played['bonusProp'])
                   throw new \Exception('提交数据出错，请重新投注 -1');
               if ($code['bonusProp'] < $played['bonusPropBase'])
                   throw new \Exception('提交数据出错，请重新投注 -2');
               if (intval($chkBonus) != intval($code['bonusProp']))
                   throw new \Exception('提交数据出错，请重新投注 -3');
               // 检查返点
               if (floatval($code['fanDian']) > floatval($this->user['fanDian']) || floatval($code['fanDian']) > floatval($this->settings['fanDianMax']))
                   throw new \Exception('提交数据出错，请重新投注 -4');
               // 检查倍数
               if (intval($code['beiShu']) < 1)
                   throw new \Exception('倍数只能为大于1正整数');
               // 检查注数
               if ($betCountFun = $played['betCountFun']) {
                    $betCount = bet::$betCountFun($code['actionData']);
                    if ($code['actionNum'] != $betCount)
                           throw new \Exception('注单数有误，请重新投注 ' . $betCount);
               }

               // 防作弊 20150722
               if ($this->types[$code['type']]['type'] != $played['type']) {
                   throw new \Exception('提交数据出错，请重新投注2');
               }
               /*
                官方玩法 内容检查, 玩法太多,每种玩法编码不一样,不一个个写了;
                没有内容检查的玩法,当内容有误,被判定为不中奖;
                任选直选复式/单式 做通配符检查, 任选组合 做 位掩码检查;
                */
               $betCheckFun = $played['betCheckFun'];
               if($betCheckFun){
                   $betCheck = betC::$betCheckFun($code['actionData'],$code['weiShu']);
                   if(!$betCheck){
                       throw new \Exception('投注内容有误，请重新投注!');
                   }
               }
           }

           // $iipp=$_SERVER["REMOTE_ADDR"];
           $ip = $this->ip(true);

           if (isset($para['fpEnable']) && $para['fpEnable'])
               $fpcount = 2;

           $para2 = array(
               'actionTime' => $this->time,
               'actionNo'   => $para['actionNo'],
               'kjTime'     => $actionTime,
               'actionIP'   => $ip,
               'uid'        => $this->user['uid'],
               'username'    => $this->user['username'],
               'serializeId' => uniqid()
           );

           if ( $zhuihao = input('zhuiHao') ) {
               $liqType  = 102;
               $info     = '追号投注';

               $beishu_array = explode('|', $para['beishu']);
               $codes_2 = array();
               $uniqid = uniqid();
               foreach ($codes as $i => $code) {
                   $i = 0;
                   $beishu_new = $code['beiShu'];
                   foreach ($actionNo_array as $action_no) {
                       $para2 = array(
                           'actionTime' => $this->time,
                           'actionNo' => $action_no,
                           'kjTime' => $actionTime,
                           'actionIP' => $ip,
                           'uid' => $this->user['uid'],
                           'username' => $this->user['username'],
                           'zhuiHaoMode' => isset($para['zhuiHaoMode']) ? $para['zhuiHaoMode'] : '',
                           'serializeId' => $uniqid
                       );

                       $code['beiShu']  = $beishu_new * $beishu_array[$i];
                       $code['zhuiHao'] = 1;

                       $new_code = array_merge($code, $para2);
                       array_push($codes_2, $new_code);
                       $amount += abs($code['actionNum'] * $code['mode'] * $code['beiShu'] * $fpcount) ;
                       $i ++;
                   }
               }
               $codes = $codes_2;
               // dump($codes_2);
           } else if (isset($hemai['hmEnable']) && $hemai['hmEnable']) {
               $liqType = 103;
               $info = '合买';

               if (intval($hemai['AllFen']) != $hemai['AllFen'])
                   throw new \Exception('份数不是整数');
               if (intval($hemai['AllFen']) < 1 || intval($hemai['MyFen']) < 1 || intval($hemai['BaoDi'] < 0))
                   throw new \Exception('份数必须为正');
               if ($hemai['AllFen'] < $hemai['MyFen'])
                   throw new \Exception('认购份数不能大于总份数');
               if ($hemai['BaoDi'] > $hemai['AllFen'] - $hemai['MyFen'])
                   throw new \Exception('保底份数不能大于剩余份数');
               if (intval($hemai['MyFen']) < intval($hemai['AllFen']) * 5 / 100)
                   throw new \Exception('最低认购5%');
               if (intval($hemai['Baodi']) > 0 && intval($hemai['Baodi']) < intval($hemai['AllFen']) * 20 / 100)
                   throw new \Exception('最低保底20%');
               if (intval($hemai['Baodi']) > intval($hemai['AllFen']) - intval($hemai['MyFen']))
                   throw new \Exception('保底份数不能大于剩余份数');
               if ($hemai['perMoney'] % 1 != 0 || $hemai['perMoney'] <= 0)
                   throw new \Exception('每份金额不能整除为元');

               $true_amount = 0;
               foreach ($codes as $i => $code) {
                   $codes[$i]             = array_merge($code, $para2);
                   $codes[$i]['hmEnable'] = 1;
                   $codes[$i]['hmAllFen'] = $hemai['AllFen'];
                   $codes[$i]['hmMyFen']  = $hemai['MyFen'];
                   $codes[$i]['hmBaoDi']  = $hemai['BaoDi'];
                   $codes[$i]['hmOldBaoDi'] = $hemai['BaoDi'];
                   $amount += abs($codes[$i]['actionNum'] * $codes[$i]['mode'] * $codes[$i]['beiShu'] * ($codes[$i]['hmMyFen'] + $codes[$i]['hmBaoDi']) / $codes[$i]['hmAllFen']);
                   // dump($codes[$i]);
                   $true_amount += abs($codes[$i]['actionNum'] * $codes[$i]['mode'] * $codes[$i]['beiShu']);
                   // dump('true amount:'.$true_amount);
               }
               if ($hemai['AllFen'] * $hemai['perMoney'] != $true_amount)
                   throw new \Exception('总份数与每份金额之积与总合买金额不符 ' . $hemai['AllFen'] * $hemai['perMoney'] . ' ' . $true_amount);
           } else {
               $liqType = 101;
               $info = '投注';

               foreach ($codes as $i => $code) {
                   $codes[$i] = array_merge($code, $para2);
                   $amount += abs($code['actionNum'] * $code['mode'] * $code['beiShu'] * $fpcount);
               }
           }

           // 查询用户可用资金
           $user = db('members')->where(array(
               'uid' => $this->user['uid']
           ))
               ->field('coin')
               ->find(); // $this->getValue("select coin from {$this->prename}members where uid={$_SESSION['user']['uid']}");
           $userAmount = $user['coin'];
           if ($userAmount < $amount)
               throw new \Exception('您的可用资金不足，是否充值？');

           // 开始事物处理
           Db::startTrans() ;

           $isBetSuccess = array();
           $isCoinSuccess = array();
           $i = 0;
           $hemai_id = null;
           if (isset($hemai['hmEnable']) && $hemai['hmEnable']) {
               $hemai['uid']        = $this->user['uid'];
               $hemai['username']   = $this->user['username'];
               $hemai['HaveFen']    = $hemai['AllFen'] - $hemai['MyFen'];
               $hemai['actionTime'] = time();
               $hemai_id = db('bets_hemai')->data($hemai)->insert();
           }

           foreach ($codes as $code) {
               // 插入投注表
               $code['wjorderId'] = $code['type'] . $code['playedId'] . $this->randomkeys(8 - strlen($code['type'] . $code['playedId']));
               $code['actionNum'] = abs($code['actionNum']);
               $code['mode']      = abs($code['mode']);
               $code['beiShu']    = abs($code['beiShu']);
               $code['kjTime']    = $actionTime;
               $code['flag']      = 0;
               $code['hmId']      = $hemai_id;
               if (isset($hemai['hmEnable']) && $hemai['hmEnable']) {
                   $code['hmIsFa'] = 1;
               }
               if (isset($code['hmEnable']) && $code['hmEnable'])
                   $amount = abs($code['actionNum'] * $code['mode'] * $code['beiShu'] * ($code['hmMyFen'] + $code['hmBaoDi']) / $code['hmAllFen']);
               else
                   $amount = abs($code['actionNum'] * $code['mode'] * $code['beiShu']);
               $isBetSuccess[$i] = db('bets')->data($code)->insert();
               // $this->insertRow($this->prename .'bets', $code);

               // 添加用户资金流动日志
               $isCoinSuccess[$i] = $this->addCoin(array(
                   'uid' => $this->user['uid'],
                   'type' => $code['type'],
                   'liqType' => $liqType,
                   'info' => $info,
                   'extfield0' => $isBetSuccess[$i],
                   'extfield1' => $para2['serializeId'],
                   'coin' => - $amount
               ));

               $i++;
           }

           $isSuc = true ;
           for (; $i >= 0; $i --) {
               if(! isset($isBetSuccess[$i]) || ! $isCoinSuccess[$i]){
                   continue;
               }
               if ($isBetSuccess[$i] === false || $isCoinSuccess[$i] === false) {
                   $isSuc = false;
                   break;
               }
           }

           if ($isSuc) {
               // 将投注记录写入文件
               if (! is_dir('./record/'))
                    mkdir('./record/');
               $fp = fopen("./record/" . $code['username'] . ".txt", "a+");
               $tz_content = $code['wjorderId'] . " 投注内容：" . $code['actionData'] . " 玩法：" . $code['playedId'] . " 元角分：" . $code['mode'] . " 倍数：" . $code['beiShu'] . " 注数：" . $code['actionNum'] . " 时间：" . date('m-d H:i:s', time()) . "\r\n\r\n";
               $flag = fwrite($fp, $tz_content);
               if (!$flag) {
                   throw new \Exception('创建投注记录文件失败');
               }
               fclose($fp);

               Db::commit() ; // 成功则提交
               $backReturn['status'] = true  ;
               $backReturn['info'] = '投注成功' ;
               return json_encode($backReturn)  ;

           } else {
               Db::rollback() ; // 不成功，则回滚
               throw new \Exception('投注失败') ;
           }
       }catch (\Exception $e) {
           $backReturn['info'] = $e->getMessage() ;
           return json_encode($backReturn) ;
       }

    }

    public function postKqwf(){
        try{

            $ret['status'] = 0 ;
            $ret['info'] = '投注失败,请重试...' ;

            $codes   = input('code/a');
            $para    = input('para/a');
            
            $this->getSystemSettings() ;
            if ($this->settings['switchBuy'] == 0)
                throw new \Exception('本平台已经停止购买！');
            if ($this->settings['switchDLBuy'] == 0 && $this->user['type'])
                throw new \Exception('代理不能买单！');
            if (count($codes) == 0)
                throw new \Exception('请先选择号码再提交投注');

            $para['actionNo'] = $this->formatActionNo($para['actionNo'],$para['type']) ; //对开奖期号进行格式化

            $actionTime     = $this->getGameActionTime($para['type']); // 当期时间
            $actionNo_array = explode('|', $para['actionNo']);
            foreach ($actionNo_array as $key=>$action_no) {
                $actionNo = $this->getGameActionNo($para['type']); // 当期期数
                $actionNo_array[$key] = doubleval(str_replace('-', '', $action_no)); // 和库中数据保持一致,过滤掉开奖期号中的 "-" 符号
                $no2 = doubleval(str_replace('-', '', $actionNo));
                // $this->error($no.'|'.$no2);
                if ($actionNo_array[$key] < $no2)
                    throw new \Exception('投注失败：该期投注时间已过'.$actionNo_array[$key].'----'.$no2);
            }

            // 查检每注的赔率是否正常
            $amount = 0;
            foreach ($codes as $code) {
                
                $type = $code['type']??null;
                if(!$type){
                    throw new \Exception("请输入彩种参数!");
                }
                $groups = model('type')->kqwfTypes($type);
                if(!$groups){
                    throw new \Exception("彩种不存在!");                    
                }
                $groupId = $code['playedGroup']??null;//input('playedGroup/d');
                $group = $groups[$groupId]??null;
                if(!$group){
                    throw new \Exception("玩法组不存在!");
                }
                $playedId = $code['playedId']??null;//input('playedId/d');
                $played = $group['playeds'][$playedId]??null;
                if(!$played){
                    throw new \Exception("玩法不存在!");
                }
                if (! $played['enable']){
                    throw new \Exception('玩法已停!');
                }

                $actionData = $code['actionData']??'';
                if(!$actionData){
                    throw new \Exception("投注内容不能为空!");
                }                
                $actionData = explode('-',$actionData);
                if(count($actionData)<2){
                    throw new \Exception("投注内容格式错误!");
                }
                $plg = $actionData[0];//赔率组
                $bet = $actionData[1];

                $plid = $code['plid']??0;//input('plid/d');
                $pl = model('played_pl')->get($plid);
                if(!$pl){
                    throw new \Exception("赔率不存在!");
                }
                if($plg != $pl->plgroup->name){
                    throw new \Exception("投注内容-赔率组错误!");
                }

                if($pl->plgroup->mode == 2){
                    if(count(_arr($bet)) != $pl->value){
                        throw new \Exception("赔率有误!");
                    }
                }
                
                $bonusProp = $code['bonusProp']??0;                
                if($pl->pl != $bonusProp){
                    throw new \Exception("赔率有误!");
                }

                $money = floatval($code['money']??0); //input('money/f');
                if($money<=0){
                    throw new \Exception("投注额有误!");
                }
                
                $orderId = $code['orderId']??null;
                if(!$orderId){
                    throw new \Exception("订单id不能为空!");
                }

                $amount += $money;
            }    

            // 检查注数
            $betCountFun = $played['betCountFun'];
            if($betCountFun){
                $betCount = bet::$betCountFun($code['actionData']);
                if($code['actionNum'] != $betCount){
                    throw new \Exception('提交数据出错，请重新投注，有效注数' . $betCount);
                }                
            }
            
            //内容检查,包括内容,以及通配符和位掩码;
            //官方玩法也没有 内容检查,
            //或者通过玩法名分支做了简易检查, strpos($played['name'], "任选")
            //可以玩法添加内容检查函数betCheckFun;
            $betCheckFun = $played['betCheckFun'];
            if($betCheckFun){
                $betCheck = betC::$betCheckFun($code['actionData'],$code['weiShu']);
                if(!$betCheck){
                    throw new \Exception('投注内容有误，请重新投注!');
                }                
            }
            
            // 查询用户可用资金
            $coin = db('members')->where('uid',$this->user['uid'])->value('coin');
            if ($coin < $amount){
                throw new \Exception('您的可用资金不足，是否充值？');
            }

            $ip = $this->ip(true);
            $para2 = array(
                'actionTime' => $this->time,
                'actionNo'   => $para['actionNo'],
                'kjTime'     => $actionTime,
                'actionIP'   => $ip,
                'uid'        => $this->user['uid'],
                'username'    => $this->user['username'],
                'serializeId' => uniqid(),
                
                //覆盖字段
                'actionNum' => $code['actionNum'],
                'beiShu' => 1,
                'fanDian' => 0.0,
                'flag' => 0,
                'mode' => 2,
            );
   
            $liqType = 101;
            $info = '投注';

            // 开始事物处理
            db()->startTrans() ;
            foreach ($codes as $code) {
                unset($code['plid']);
                $code = array_merge($code, $para2);

                $betid = db('bets')->data($code)->insert();
                if(!$betid){
                    db()->rollback();
                    $ret['info'] = '投注失败' ;
                    return json_encode($backReturn)  ;                    
                }
                $r = $this->addCoin(array(
                    'uid' => $this->user['uid'],
                    'type' => $code['type'],
                    'liqType' => $liqType,
                    'info' => $info,
                    'extfield0' => $betid,
                    'extfield1' => $para2['serializeId'],
                    'coin' => - $code['money'],
                ));
                if(!$r){
                    db()->rollback();
                    $ret['info'] = '投注失败' ;
                    return json_encode($backReturn)  ;
                }
            }
            db()->commit() ; // 成功则提交
            $ret['status'] = 1  ;
            $ret['info'] = '投注成功' ;
            return json_encode($ret)  ;  
        }catch (\Exception $e) {
            db()->rollback();
            $ret['info'] = $e->getMessage() ;
            return json_encode($ret) ;
        }
    }

    //前端提交的注单列表,可以是官方玩法和快钱玩法;
    //只支持追号,不支持飞盘和合买;整个前后端都没有实现合买和飞盘
    //追号,实现为 快钱和官方玩法一起追号,同时翻倍
    public function postAll(){
        try{

            $ret['status'] = 0 ;
            $ret['info'] = '投注失败,请重试...' ;

            $codes   = input('code/a');
            $para    = input('para/a');
            
            $this->getSystemSettings() ;
            if ($this->settings['switchBuy'] == 0)
                throw new \Exception('本平台已经停止购买！');
            if ($this->settings['switchDLBuy'] == 0 && $this->user['type'])
                throw new \Exception('代理不能买单！');
            if (count($codes) == 0)
                throw new \Exception('请先选择号码再提交投注');

            //$para['type']彩种ID,$code['type']彩种ID,$code['type']并非彩种类别ID,
            $actionTime = $this->getGameActionTime($para['type']); // 当期时间
            $actionNo = $this->getGameActionNo($para['type']); 
            // 当期期数,已格式化为前端所见,带'-'
            $actionNo_num = doubleval(str_replace('-', '', $actionNo));//数字化


            //追号时才有多期
            $actionNos = explode('|', $para['actionNo']);
            foreach ($actionNos as $action_no) {                
                //请求参数中的期数,不管有无'-',注单表的期数为无'-'的格式;
                //与开奖表data以及开奖接口data.8889s.com的期数保持一致
                $action_no_num = doubleval(str_replace('-', '', $action_no)); 
                if ($action_no_num < $actionNo_num)
                    throw new \Exception('投注失败：该期投注时间已过'.$action_no_num.'----'.$actionNo_num);
                //formatActionNo 处理 新疆时时彩的bug? 需要多补一个0?
                $para['actionNo'] = $this->formatActionNo($para['actionNo'],$para['type']) ;                
            }

            $zhuihao = input('zhuiHao');
            if($zhuihao){
                $beishus = explode('|', $para['beishu']);
                if(count($actionNos)!=count($beishus)){
                    throw new \Exception('投注失败：追号期数个数和倍数个数不一致!');
                }
                $liqType  = 102;
                $info     = '追号投注';                
            }else{
                $beishus = [1];
                $liqType  = 101;
                $info     = '投注';                 
            }
            
            // 查检每个注单的数据完整性
            $amount = 0;
            $bets = [];//注单,追号,一个投注内容,对应多个期数,则对应多个注单;
            
            $type = $para['type']??null;
            if(!$type){
                throw new \Exception("请输入彩种ID!");
            }
            $groups = model('type')->allTypes($type);//参数彩种ID
            if(!$groups){
                throw new \Exception("彩种不存在!");                    
            }

            foreach ($codes as $code) {
                /*$para['type']彩种ID,$code['type']彩种类别
                $type = $code['type']??null;
                if(!$type){
                    throw new \Exception("请输入彩种参数!");
                }
                $groups = model('type')->allTypes($type);//参数彩种ID
                if(!$groups){
                    throw new \Exception("彩种不存在!");                    
                }
                */
                $groupId = $code['playedGroup']??null;//input('playedGroup/d');
                $group = $groups[$groupId]??null;
                if(!$group){
                    throw new \Exception("玩法组不存在!");
                }
                $playedId = $code['playedId']??null;//input('playedId/d');
                $played = $group['playeds'][$playedId]??null;
                if(!$played){
                    throw new \Exception("玩法不存在!");
                }
                if (! $played['enable']){
                    throw new \Exception('玩法已停!');
                }
                
                //if ($played['type']!=$code['type']){
                if ($para['type']!=$code['type']){
                    throw new \Exception('彩种id有误!');
                }

                $actionData = $code['actionData']??'';
                if(is_null($actionData)){
                    throw new \Exception("投注内容不能为空!");
                }    

                if (floatval($code['mode']) <= 0)
                    throw new \Exception('倍数模式必须大于0!');

                if($played['is_kqwf']){
                    $actionData = explode('-',$actionData,2);
                    if(count($actionData)<2){
                        throw new \Exception("投注内容格式错误!");
                    }
                    $plg = $actionData[0];//赔率组
                    $bet = $actionData[1];

                    $plid = $code['plid']??0;//input('plid/d');
                    $pl = model('played_pl')->get($plid);
                    if(!$pl){
                        throw new \Exception("赔率不存在!");
                    }
                    if($plg != $pl->plgroup->name){
                        throw new \Exception("投注内容-赔率组错误!");
                    }

                    if($pl->plgroup->mode == 2){
                        if(count(_arr($bet)) != $pl->value){
                            throw new \Exception("赔率有误!");
                        }
                    }
                    
                    $bonusProp = $code['bonusProp']??0;                
                    if($pl->pl != $bonusProp){
                        throw new \Exception("赔率有误!");
                    }

                    //$money = floatval($code['money']??0); //input('money/f');
                    //快钱的单注金额 还是放在 mode字段,不放在money字段了
                    //另外快钱的复式投注 也使用复式存储;
                    $money = floatval($code['mode']??0);
                    if($money<=0){
                        throw new \Exception("投注额有误!");
                    }

                    $code['beiShu'] = 1;
                    $code['fanDian'] = 0.0;                    
                    $code['flag'] = 0;
                    //$code['mode'] = 2;
                }else{

                    // 检查返点
                    if (floatval($code['fanDian']) > floatval($this->user['fanDian']) || floatval($code['fanDian']) > floatval($this->settings['fanDianMax']))
                    throw new \Exception('返点数据出错，请重新投注!');

                    // 检查赔率
                    if($played['is_mix']){
                        $prop_pairs = db('played')->where('id','in',$played['mix_ids'])->field('bonusProp,bonusPropBase')->select();
                    }else{
                        $prop_pairs = [['bonusProp'=>$played['bonusProp'],
                                        'bonusPropBase'=>$played['bonusPropBase'],],];
                    }
                    $props = explode('|',$code['bonusProp']);
                    if(count($props)!=count($prop_pairs)){
                        throw new \Exception('赔率个数出错，请重新投注!');
                    }
                    foreach($prop_pairs as $key => $pair){
                        $chkBonus = ($pair['bonusProp'] - $pair['bonusPropBase']) / $this->settings['fanDianMax'] * ($this->user['fanDian'] - $code['fanDian']) + $pair['bonusPropBase']; // 实际奖金
                        if ($props[$key] > $pair['bonusProp'])
                            throw new \Exception('赔率出错，请重新投注 -1');
                        if ($props[$key] < $pair['bonusPropBase'])
                            throw new \Exception('赔率出错，请重新投注 -2');
                        if (intval($chkBonus) != intval($props[$key]))
                            throw new \Exception('赔率出错，请重新投注 -3');
                    }
                    
                    // 检查倍数
                    if (intval($code['beiShu']) < 1)
                    throw new \Exception('倍数只能为大于1正整数');                 
                }
                
                $orderId = $code['orderId']??null;
                if(!$orderId){
                    throw new \Exception("订单id不能为空!");
                }

                // 检查注数
                $betCountFun = $played['betCountFun'];
                if($betCountFun){
                    $betCount = bet::$betCountFun($code['actionData']);
                    if($code['actionNum'] != $betCount){
                        throw new \Exception('提交数据出错，请重新投注，有效注数' . $betCount);
                    }                
                }
                
                if($played['rx_mode']!='wym'){
                    $code['weiShu'] = 0;
                }
                //内容检查,包括内容,以及通配符和位掩码;
                //官方玩法也没有 内容检查,
                //或者通过玩法名分支做了简易检查, strpos($played['name'], "任选")
                //可以玩法添加内容检查函数betCheckFun;
                $betCheckFun = $played['betCheckFun'];
                if($betCheckFun){
                    $betCheck = betC::$betCheckFun($code['actionData'],$code['weiShu']);
                    if(!$betCheck){
                        throw new \Exception('投注内容有误，请重新投注!');
                    }                
                }

                $ip = $this->ip(true);
                $code['zhuiHao'] = (bool)$zhuihao;
                $zhuiHaoMode = isset($para['zhuiHaoMode']) ? $para['zhuiHaoMode'] : '';

                //追号倍数,1个元素时表示普通投注
                foreach($actionNos as $key=>$actionNo){
                    $para2 = array(
                        'actionTime' => $this->time,
                        'actionNo' => $actionNo,
                        'kjTime' => $actionTime,
                        'actionIP' => $ip,
                        'uid' => $this->user['uid'],
                        'username' => $this->user['username'],
                        'zhuiHaoMode' => $zhuiHaoMode,
                        'serializeId' => uniqid(),
                    );
                    $code['beiShu'] = $code['beiShu'] * $beishus[$key];
                    $bets[] = array_merge($code, $para2);

                    $money = $code['actionNum'] * $code['mode'] * $code['beiShu'];
                    $money = $money * $beishus[$key];
                    $amount += $money;
                }
            }    

            // 查询用户可用资金
            $coin = db('members')->where('uid',$this->user['uid'])->value('coin');
            if ($coin < $amount){
                throw new \Exception('您的可用资金不足，是否充值？');
            }

            // 开始事物处理,bets中的注单,是经过补全和调整过的
            db()->startTrans() ;
            foreach ($bets as $code) {           
                unset($code['plid']);
                $code['wjorderId'] = $code['type'] . $code['playedId'] . $this->randomkeys(8 - strlen($code['type'] . $code['playedId']));
                $betid = db('bets')->data($code)->insert();
                if(!$betid){
                    db()->rollback();
                    $ret['info'] = '投注失败' ;
                    return json_encode($backReturn)  ;                    
                }
                $money = $code['actionNum'] * $code['mode'] * $code['beiShu'];
                $r = $this->addCoin(array(
                    'uid' => $this->user['uid'],
                    'type' => $code['type'],
                    'liqType' => $liqType,
                    'info' => $info,
                    'extfield0' => $betid,
                    'extfield1' => $para2['serializeId'],
                    'coin' => - $money,
                ));
                if(!$r){
                    db()->rollback();
                    $ret['info'] = '投注失败' ;
                    return json_encode($backReturn)  ;
                }
            }
            db()->commit() ; // 成功则提交
            $ret['status'] = 1  ;
            $ret['info'] = '投注成功' ;
            return json_encode($ret)  ;  
        }catch (\Exception $e) {
            db()->rollback();
            $ret['info'] = $e->getMessage() ;
            return json_encode($ret) ;
        }
    }



    /**
     *  格式化开奖期号
     *  由于得到的开奖期号,可能会有略微的差异, 所以这里
     *  用一个方法来处理,对有差异的期号进行格式化
     * @param string $actionNo
     * @param string $type
     * @return string
     */
    private function formatActionNo($actionNo='',$type='')
    {
        $date= date('Ymd',time());
        if ( $type==12 ) {
            //新疆时时彩处理
            $tmp = str_replace($date,'',$actionNo) ;

            if ( ($tmp < 100) && (strlen($tmp)==2) ) {
                $actionNo = $date.'0'.$tmp ;
            }
        }
        return $actionNo ;
    }

    /**
     *  ajax撤单
     */
    public final function deleteCode()
    {
        // $this->beginTransaction();
        Db::startTrans();
        $id = input('id');
        // $sql="select * from {$this->prename}bets where id=".$id;
        if (! $data = db('bets')->where(array(
            'id' => input('id')
        ))->find())
            $this->error('找不到定单。');
        if ($data['isDelete'])
            $this->error('这单子已经撤单过了。');
        if ($data['uid'] != $this->user['uid'])
            $this->error('这单子不是您的，您不能撤单。'); // 可考虑管理员能给用户撤单情况
        if ($data['kjTime'] <= $this->time)
            $this->error('已过开奖期，不能撤单');
        if ($data['lotteryNo'])
            $this->error('已经开奖，不能撤单');
        if ($data['qz_uid'])
            $this->error('单子已经被人抢庄，不能撤单');
        
        // 冻结时间后不能撤单
        $this->getTypes() ;
        $ftime = $this->getTypeFtime($data['type']) ;
        if ($data['kjTime'] - $ftime < $this->time)
            $this->error('这期已经结冻，不能撤单') ;
        
        if ($data['hmEnable'])
            $amount = $data['beiShu'] * $data['mode'] * $data['actionNum'] * ($data['hmMyFen'] + $data['hmOldBaoDi']) / $data['hmAllFen'] ;
        else
            $amount = $data['beiShu'] * $data['mode'] * $data['actionNum'] * intval(($data['fpEnable'] ? '2' : '1')) ;
        $amount = abs($amount) ;
        // 添加用户资金变更日志
        $isSuc1 = $this->addCoin(array(
            'uid' => $data['uid'],
            'type' => $data['type'],
            'playedId' => $data['playedId'],
            'liqType' => 7,
            'info' => "撤单",
            'extfield0' => $id,
            'coin' => $amount
        ));
        
        // 更改定单为已经删除状态
        $map['isDelete'] = 1;
        $isSuc2 = db('bets')->where('id=' . $id)->save($map);
        
        if ($isSuc1 !== false && $isSuc2 == true) {
            // 将投注记录写入文件
            if (! is_dir('./record/'))
                mkdir('./record/');
            $fp = fopen("./record/" . $data['username'] . ".txt", "a+");
            $tz_content = $data['wjorderId'] . " 撤单 " . date('m-d H:i:s', time()) . "\r\n\r\n";
            $flag = fwrite($fp, $tz_content);
            if (! $flag) {
                $this->error('创建投注记录文件失败');
            }
            fclose($fp);
            
            Db::commit(); // 成功则提交
            $this->success('撤单成功');
        } else {
            Db::rollback(); // 不成功，则回滚
            $this->error('撤单失败');
        }
    }

    /**
     * ajax取定单列表
     */
    public final function getOrdered($type = null)
    {
        if (!isset($this->type))
            $this->type = $type;
        
        // $sql="select * from {$this->prename}bets where uid={$_SESSION['user']['uid']} order by id desc limit 7";
        $order_list = db('bets')->where(array(
            'uid' => $this->user['uid']
        ))
            ->limit(10)
            ->order('id desc')
            ->select() ;

        $this->assign('order_list', $order_list) ;
        $this->assign('time', $this->time);
        
        $types = $this->getTypes() ;
        $this->assign('types', $types) ;
        
        $playeds = $this->getPlayeds() ;
        $this->assign('playeds', $playeds) ;
        
        echo  $this->fetch('inc_game_order');
        exit();
    }

    // 随机函数
    public function randomkeys($length)
    {
        $key      = "";
        $pattern  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $pattern1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $pattern2 = '0123456789';
        for ($i = 0; $i < $length; $i ++) {
            $key .= $pattern{mt_rand(0, 35)};
        }
        
        return $key;
    }

}
