<?php
// +----------------------------------------------------------------------
// | OneThink [ WE CAN DO IT JUST THINK IT ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013 http://www.onethink.cn All rights reserved.
// +----------------------------------------------------------------------
// | Author: 麦当苗儿 <zuojiazi@vip.qq.com> <http://www.zjzit.cn>
// +----------------------------------------------------------------------

namespace app\mobile\Controller;
use app\mobile\Base;
use app\mobile\model\Members;
use think\Db;
use think\Session;

/**
 * 空模块，主要用于显示404页面，请不要删除
 */
class Team extends Base
{

    public function _initialize()
    {
        $this->user = model('members')->where('uid',Session::get('user.uid'))->find()->toArray() ; //查询出用户信息，并遍历出来
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public final function index()
    {
        $uid  = Session::get('user.uid') ;
		$user = model('members')->find($uid);
		$this->assign('user',$user);
		return $this->fetch();
	}

    /**
     * 游戏记录
     */
	public final function record()
    {
		$this->getTypes()   ;
		$this->getPlayeds() ;
		$this->assign('types',$this->types) ;
		$this->assign('playeds',$this->playeds) ;
		$this->search() ;

		if ( !input('get.') ) {
            return $this->fetch('team/record');
        }else {
            echo   $this->fetch('team/record-list'); die;
        }
	}

    /**
     * 获取数据
     */
	public final function search()
    {
		$para = request()->param() ;
		$this->getTypes() ;
		$this->getPlayeds() ;
		$this->assign( 'types',$this->types) ;
		$this->assign('playeds',$this->playeds) ;

		//参数初始化
		$where      = array() ;
		$whereLogic = 'and' ;
		$uid        = Session::get('user.uid') ;
        $para['type']       = isset($para['type'])       ? $para['type']       : '' ; //彩种限制
        $para['state']      = isset($para['state'])      ? $para['state']      : '' ; //投注状态限制
        $para['utype']      = isset($para['utype'])      ? $para['utype']      : '' ; //用户类型限制
        $para['username']   = isset($para['username'])   ? $para['username']   : '' ; //用户名限制
        $para['betId']      = isset($para['betId'])      ? $para['betId']      : '' ; //单号
        $para['fromTime']   = isset($para['fromTime'])   ? $para['fromTime']   : '' ;
        $para['toTime']     = isset($para['toTime'])     ? $para['toTime']     : '' ;
        $para['actionTime'] = isset($para['actionTime']) ? $para['actionTime'] : '' ;

		// 用户名限制
		if ( $para['username'] && $para['username'] != '用户名' ) {
			// 按用户名查找时
			// 只要符合用户名且是自己所有下级的都可查询
			// 用户名用模糊方式查询
			$where['username'] = array('like',"%".request()->param('username')."%");
			$where['parents']  = array('like',"%,".$this->user['uid'].",%");
		}
		//用户类型限制
		switch ( $para['utype'] ) {
			case 1:
				//我自己
                $where['uid'] = $uid ;
				break ;
			case 2:
				//直属下线
                $where['parentId'] = $uid ;
				break ;
			case 3:
				// 所有下级
                $where['parents'] = array('like','%,'.$uid.',%') ;
				break ;
			default:
				//所有人
                $where['parents'] = array('like',"%,".$uid.",%") ;
                $where['uid'] = $uid ;
                $whereLogic   =  'or' ;
				break ;
		}
		
        if ( $whereLogic == 'and') {
            $userList = model('members')->field('uid,username')->where($where)->select() ;
        } else {
            $userList = model('members')->field('uid,username')->whereor($where)->select() ;
        }

		$userData = [] ;
		$uidArr   = [] ;
		foreach ($userList as $user) {
            $uidArr[] = $user['uid'];
			$userData[$user['uid']] = $user ;
		}
		$userStr  = implode(',',$uidArr) ;

		$where = [] ; //条件重置
		// 彩种限制
		if ($para['type']) {
			$where['type'] = $para['type'];
		}
				
		// 时间限制
		if ( $para['fromTime'] && $para['toTime'] ) {
			$where['actionTime'] = array('between',array(strtotime($para['fromTime']),strtotime($para['toTime'])));
		} elseif ( $para['fromTime'] ) {
			$where['actionTime'] = array('egt',strtotime($para['fromTime']));
		} elseif ( $para['toTime'] ) {
			$where['actionTime'] = array('elt',strtotime($para['toTime']));
		} else {
			if($GLOBALS['fromTime'] && $GLOBALS['toTime']) {
				//$where['actionTime'] = array('between',array($GLOBALS['fromTime'],$GLOBALS['toTime']));
			}
		}
		
		// 投注状态限制
		if ($para['state']) {
		switch ($para['state']) {
			case 1:
				// 已派奖
				$where['zjCount'] = array('gt',0);
			break ;
			case 2:
				// 未中奖
				$where['zjCount']   = 0 ;
				$where['lotteryNo'] = array('neq','');
				$where['isDelete']  = 0 ;
				
			break ;
			case 3:
				// 未开奖
				$where['lotteryNo'] = array('eq','') ;
			break;
			case 4:
				// 追号
				$where['zhuiHao'] = 1 ;
			break;
			case 5:
				// 撤单
				$where['isDelete'] = 1 ;
			break;
			}
		}

		//单号
	   if ( $para['betId'] && ($para['betId'] != '输入单号') ) {
           $where['wjorderId'] = $para['betId'] ;
       }
	   $where['uid'] = array('in',$userStr) ;

	   $betList = model('bets')->field('id,wjorderId,uid,username,type,playedId,actionNo,beiShu,mode,lotteryNo,isDelete,zjCount,bonus,actionNum,fpEnable,actionTime,actionData')->where($where)->order('id desc,actionTime desc')->paginate() ;
        $this->assign('_list', $betList); //数据
        $this->assign('_page',  $betList->render()); //分页
//	    $this->recordList($betList) ;
	}
	
	public final function searchRecord()
    {
		$this->search();
//		 echo  $this->fetch('team/record-list'); die;
        return $this->fetch('team/record');
	}

    /**
     * 盈亏报表
     */
	public final function report()
    {
        $param = request()->param() ; //读取参数
		$this->reportSearch() ;
		if ( empty($param) ) {
           return $this->fetch ('team/report') ;
        } else {
            echo $this->fetch('team/report-list') ;
        }
	}

    /**
     *  查看下级消费报表
     */
	public final function searchReport()
    {
		$this->reportSearch() ;
        $this->fetch ('team/report');
		$data = $this->fetch('team/report-list') ;
	}

    /**
     * 报表查询
     */
	public final function reportSearch()
    {
        //参数初始化
		$para        = request()->param() ;
		$where       = array() ;
		$parentWhere = array() ;
		$parentLogic = 'and' ;
		$whereLogic  = 'and' ;
		$data        = []    ;
        $para['parentId']   = isset($para['parentId'])     ? $para['parentId']   : '' ; //直属下级
        $para['uid']        = isset($para['uid'])          ? $para['uid']        : '' ;      //上级
        $para['username']   = isset($para['username'])     ? $para['username']   : '' ; //用户名
        $para['fromTime']   = isset($para['fromTime'])     ? $para['fromTime']   : '' ;
        $para['toTime']     = isset($para['toTime'])       ? $para['toTime']     : '' ;
        $para['actionTime'] = isset($para['actionTime'])   ? $para['actionTime'] : '' ;

		// 用户限制
		$uid  =  $this->user['uid'] ;
		if ($para['parentId'] = intval($para['parentId'])) {
			// 直属下级
			$where['parentId'] = $para['parentId'];
			
			$parentWhere['parents'] = array('like',"%,".$para['parentId'].",%");
			$parentWhere['uid']     = $para['parentId'];
            $parentLogic            = 'or';

		} elseif($para['uid']) {
			// 上级
			$user = model('members')->where(array('uid'=>$para['uid']))->find() ;
			$where['uid'] = $user['parentId'] ;

			$parentWhere['parents']  =  array('like',"%,".$user['parentId'].",%") ;
			$parentWhere['uid']      =  $user['parentId'] ;
            $parentLogic             =  'or' ;

		} elseif ($para['username'] && $para['username']!='用户名') {
			// 用户名限制
			// 按用户名查找时
			// 只要符合用户名且是自己所有下级的都可查询
			// 用户名用模糊方式查询
			$where['username'] = $para['username'] ;
			$where['parents']  = array('like',"%,".$this->user['uid'].",%") ;
			
			$user = model('members')->where('username',$para['username'])->find() ;
			$parentWhere['parents'] = array('like',"%,".$user['uid'].",%");
			$parentWhere['uid']     = $user['uid'];
            $parentLogic            = 'or';

		} else {
			$where['parents'] = array('like',"%,".$this->user['uid'].",%");
			$where['uid']     = $this->user['uid'];
            $whereLogic       = 'or';
			
			//$parentWhere['parents'] = array('like',"%,".$this->user['uid'].",%");
			$parentWhere['uid']     = $this->user['uid'];
            $parentLogic            = 'or';
		}

		//查询用户数据
        if ($whereLogic == 'and') {
            $userList = model('members')->field('uid,username,parentId,coin')->where($where)->order('uid')->select()->toArray() ;
        } else {
            $userList = model('members')->field('uid,username,parentId,coin')->whereor($where)->order('uid')->select()->toArray() ;
        }

		$userData = array() ;
		foreach ($userList as $user) {
			//$userStr = $userStr.$user['uid'].',';
			$userData[$user['uid']] = $user ;
		}
		$map = array() ;
		// 时间限制
		if ($para['fromTime'] && $para['toTime']) {
			$map['actionTime'] = array('between',array(strtotime($para['fromTime']),strtotime($para['toTime']))) ;
		} elseif ($para['fromTime']) {
			$map['actionTime'] = array('egt',strtotime($para['fromTime'])) ;
		} elseif ($para['toTime']) {
			$map['actionTime'] = array('elt',strtotime($para['toTime'])) ;
		} else {
			if ( $GLOBALS['fromTime'] && $GLOBALS['toTime'] ) {
				//$map['actionTime']  =  array('between',array($GLOBALS['fromTime'],$GLOBALS['toTime'])) ;
			}
		}
		//$map['uid'] = array('in',$userStr);
        //没有这个存储过程，所以暂时注释
//		$coinList = model('coin_log')->where($map)->field("actionTime,uid,sumodel(case when liqType in ('2','3') then coin else 0 end) as fanDianAmount
//		0-sumodel(case when liqType in ('101','102','7') then coin else 0 end) as betAmount,
//		sumodel(case when liqType=6 then coin else 0 end) as zjAmount,
//		0-sumodel(case when liqType=107 then fcoin else 0 end) as cashAmount,
//		sumodel(case when liqType=1 then coin else 0 end) as rechargeAmount,
//		sumodel(case when liqType in ('50','51','52','53') then coin else 0 end) as brokerageAmount")->group('uid')->select()->toArray() ;

        $coinList = model('coin_log')->where($map)->group('uid')->select()->toArray() ;
		$allList  = model('members')->where($parentWhere)->field('uid,coin')->order('uid')->select() ;

		foreach ($coinList as $coin) {
			$user2 = isset($userData[$coin['uid']]) ? $userData[$coin['uid']] : '' ;
			if ($user2) {
				$data[$coin['uid']] = array_merge($coin,$user2);
			}

			$all                    = [] ;
            $all['coin']            = 0  ;
            $all['betAmount']       = 0  ;
            $all['zjAmount']        = 0  ;
            $all['fanDianAmount']   = 0  ;
            $all['brokerageAmount'] = 0  ;
            $all['cashAmount']      = 0  ;
            $all['rechargeAmount']  = 0  ;

			foreach ($allList as $user) {
				if ( $coin['uid'] == $user['uid'] ) {
					$all['betAmount']       += isset($coin['betAmount']) ? : 0 ;
					$all['zjAmount']        += isset($coin['zjAmount']) ? : 0 ;
					$all['fanDianAmount']   += isset($coin['fanDianAmount']) ? : 0 ;
					$all['brokerageAmount'] += isset($coin['brokerageAmount']) ? : 0 ;
					$all['cashAmount']      += isset($coin['cashAmount']) ? : 0 ;
					$all['rechargeAmount']  += isset($coin['rechargeAmount']) ? : 0 ;
				}
				$all['coin'] += $user['coin'];
			}
		}

		//将没有消费的用户补上为0，显示出来，提高用户体验
		foreach ($userData as $u) {
			if (isset($data[$u['uid']]) && !$data[$u['uid']]) {
				$data[$u['uid']] = array(
				                        'uid'       => $u['uid'],
										'parentId'  => $u['parentId'],
										'username'  => $u['username'],
										'betAmount' => 0.0000,
										'zjAmount'        => 0.0000,
										'fanDianAmount'   => 0.0000,
										'brokerageAmount' => 0.0000,
										'cashAmount'      => 0.0000,
										'coin'            => $u['coin'],
										'rechargeAmount'  => 0.0000,
				) ;
			}
		}
		$this->recordList($data) ;
        //团队
		$this->assign('all',$all) ;
		$this->assign('para',$para) ;
		$this->assign('user',$this->user) ;
	}

    /**
     * 会员管理
     */
	public final function member()
    {
		$this->memberSearch() ;
		if (!input('get.')) {
            return  $this->fetch('team/member');
        } else {
            echo $this->fetch('team/member-list'); exit();
        }
	}

	public final function searchMember()
    {
		$this->memberSearch();
		return $this->fetch('team/member-list');
	}

	public final function memberSearch()
    {
        $whereLogic = 'and'  ;
		if(request()->param('username') && request()->param('username')!='用户名'){
			// 按用户名查找时
			// 只要符合用户名且是自己所有下级的都可查询
			// 用户名用模糊方式查询
			$where['username'] = array('like',"%".request()->param('username')."%") ;
			$where['parents'] = array('like',"%,".$this->user['uid'].",%") ;
			
		} else {
			switch ( request()->param('utype') ) {
				case 1 :
					// 我自己
					$where['uid'] = $this->user['uid'] ;
					break ;
				case 2 :
					// 直属下级
					$uid = $this->user['uid'] ;
					if(request()->param('uid')) {
						$uid = request()->param('uid') ;
					}
					$where['parentId'] = $uid ;
					break ;
				case 3 :
					// 所有下级
					$where['parents'] = array('like',"%".$this->user['uid'].",%") ;
					break ;
				default:
					//所有人
                    $whereLogic = 'or' ;
					$where['parents'] = array('like',"%,".$this->user['uid'].",%") ;
					$where['uid']     = $this->user['uid'] ;
					break ;
			}
		}

		if ($whereLogic == 'and')  {
            $userList = model('members')->where($where)->order('uid')->select()->toArray() ;
        } else {
            $userList = model('members')->whereOr($where)->order('uid')->select()->toArray();
        }

		$this->recordList($userList,10)   ;
		$this->assign('user',$this->user) ;
	}

    /**
     * 修改用户信息
     */
	public final function userUpdate()
    {
		$user = model('members')->find(request()->param('id'));
		$this->assign('userData',$user);
		
		$parentData = model('members')->find($user['parentId']);
		
		if($userData['parentId']){
			$parentData=$parentData;
		}else{
			$this->getSystemSettings();
			$parentData['fanDian']=$this->settings['fanDianMax'];
			$parentData['fanDianBdw']=$this->settings['fanDianBdwMax'];
		}
		$sonFanDianMax= model('members')->where(array('isDelete'=>0, 'parentId'=>request()->param('uid')))->field('max(fanDian) sonFanDian, max(fanDianBdw) sonFanDianBdw')->find();
		
		$this->assign('parentData',$parentData);
		$this->assign('sonFanDianMax',$sonFanDianMax);
		return $this->fetch('team/update-menber');
	}
	
	public final function userUpdateed(){
		if(request()->param('fanDian')<0)
			$this->error('返点不能小于0');
		$user = model('members')->where(array('username'=>request()->param('username')))->find();
//		if($this->user['uid']!=$user['parentId'])
			//$this->error('不是你的直属下级，不可以修改');
		
//		if($this->user['fanDian']<=request()->param('fanDian'))
			//$this->error('返点不可以大于上级');
		
		$sonFanDianMax= model('members')->where(array('isDelete'=>0, 'parentId'=>$user['uid']))->field('max(fanDian) sonFanDian, max(fanDianBdw) sonFanDianBdw')->find();
		
		if($sonFanDianMax['sonFanDian']){
//			if($sonFanDianMax['sonFanDian']>=request()->param('fanDian'))
				//$this->error('返点不可以小于直属下级'.$sonFanDianMax['sonFanDian']);
		}
		
		//$data['uid'] = $user['uid'];
		$data['fanDian'] = request()->param('fanDian');
		$data['type'] = request()->param('type');
		
		if($user->save($data)){
			$this->success('修改成功',Url('team/member'));
		}else{
			$this->error('修改失败');
		}		
	}
	
	public final function addMember(){
		//print_r($this->getMyUserCount());
		$this->fetch('team/add-member');
	}
	
	public final function insertMember() {
		$username = request()->param('username');
		$password = request()->param('password');
		if( !trim($username) || !trim($password) )
			$this->error('用户名或密码不能为空') ;
		
		if(!preg_match("/^[0-9a-zA-Z]{4,30}$/",request()->param('username'))){
			$this->error('用户名只能由英文和数字组成，长度4-30个字符');
		}
		
		if(model('members')->where(array('username'=>request()->param('username')))->find())
			$this->error('用户'.request()->param('username').'已经存在');
		
		if( request()->param('fanDian')<0 )
			$this->error('返点不能小于0');
		
		if($this->user['fanDian']<=request()->param('fanDian'))
			$this->error('返点不可以大于上级');

		$para['parentId'] = $this->user['uid'] ;
		$para['parents']  = $this->user['parents'] ;
		$para['password'] = think_ucenter_md5(request()->param('password'), UC_AUTH_KEY) ;
		$para['username'] = request()->param('username') ;
		$para['qq']       = (request()->param('qq')) ? request()->param('qq') : '' ;
		$para['type']     = request()->param('type') ;
		$para['regIP']    = $this->ip(true);
		$para['regTime']  = $this->time;
		$para['nickname'] = (isset($para['nickname'])) ? $para['nickname']  : '' ;
        $para['name']     = (isset($para['name']))     ? $para['name']      : '' ;

		if ( !$para['nickname']) $para['nickname'] = $para['username'];
		if ( !$para['name']) $para['name'] = $para['username'];
		
		// 查检返点设置
		if ($para['fanDian'] = floatval(request()->param('fanDian'))) {
			$this->getSystemSettings() ;
			if ($this->settings['fanDianDiff']>0 && ($para['fanDian'] % $this->settings['fanDianDiff'])) $this->error("返点只能是'{$this->settings['fanDianDiff']}'的倍数") ;
		} else {
			$para['fanDian'] = 0 ;
		}

		Db::startTrans() ;

		if (model('members')->save($para) )
		{
            $lastid = model('members')->getLastInsID();
		    $model  = model('members')->where('uid',$lastid)->find() ;

			if ( $model->save(array('uid'=>$lastid, 'parents'=>$this->user['parents'].','.$lastid)) )
			{
				Db::commit();//成功则提交
				$this->success('添加会员成功',Url('team/member'));
			}
		}
		Db::rollback() ;//不成功，则回滚
		$this->error('添加会员失败') ;
	}

    /**
     * 帐变列表
     */
	public final function coin()
    {
		$this->coinSearch() ;
		if (!input('get.')) {
            return  $this->fetch('team/coin') ;
        } else {
           echo $this->fetch('team/coin-list') ; exit();
        }
	}

	public final function searchCoin()
    {
		$this->coinSearch();		
		return $this->fetch('team/coin-list');
	}

	public final function coinSearch()
    {
		$this->getTypes()   ;
		$this->getPlayeds() ;
		$this->assign('types',$this->types);
		$this->assign('playeds',$this->playeds);

		//参数初始化
		$para       = request()->param() ;
		$where      = array() ;
		$whereLogic = 'and' ;

		$para['username']   = isset($para['username'])   ?  $para['username']   : ''   ; //用户名限制
		$para['utype']      = isset($para['utype'])      ?  $para['utype']      : ''   ; //用户类型限制
		$para['liqType']    = isset($para['liqType'])    ?  $para['liqType']    : ''   ; //账变类型限制
		$para['fromTime']   = isset($para['fromTime'])   ?  $para['fromTime']   : ''   ; //时间限制
		$para['toTime']     = isset($para['toTime'])     ?  $para['toTime']     : ''   ; //时间限制
		$para['actionTime'] = isset($para['actionTime']) ?  $para['actionTime'] : ''   ; //时间限制

		// 用户名限制
		if ( $para['username'] && $para['username']!='用户名' ) {
			// 按用户名查找时
			// 只要符合用户名且是自己所有下级的都可查询
			// 用户名用模糊方式查询
			$where['username'] = array('like',"%".$para['username']."%");
			$where['parents'] = array('like',"%".$this->user['uid']."%");
		}
		//用户类型限制
        switch ($para['utype']) {
            case 1:
                //我自己
                $where['uid'] = $this->user['uid'];
                break;
            case 2:
                //直属下线
                $where['parentId'] = $this->user['uid'];
                break;
            case 3:
                // 所有下级
                $where['parents'] = array('like','%'.$this->user['uid'].'%');
                break;
            default:
                //所有人
                $where['parents'] = array('like',"%,".$this->user['uid'].",%");
                $where['uid'] = $this->user['uid'] ;
                $whereLogic = 'or';
                break;
        }

		//用户数据查询
		if ($whereLogic == 'and') {
            $userList = model('members')->field('uid,username')->where($where)->select()->toArray() ; //查找用户信息
        } else {
            $userList = model('members')->field('uid,username')->whereor($where)->select()->toArray() ; //查找用户信息
        }
		$userData = array() ;
        $uidArr   = [] ;
		foreach ($userList as $user) {
            $uidArr[] = $user['uid'] ;
			$userData[$user['uid']] = $user ;
		}
		$userStr = implode(',',$uidArr) ;

		$where = array() ;
		// 账变类型限制
		if ( $para['liqType'] ) {
			$where['liqType'] = $para['liqType'];
			if ($para['liqType']==2) $where['liqType'] = array('between','2,3') ;
		}

		// 时间限制
		if ( $para['fromTime'] && $para['toTime'] ) {
			$where['actionTime'] = array('between',array(strtotime($para['fromTime']),strtotime($para['toTime'])));
		} elseif ($para['fromTime']) {
			$where['actionTime'] = array('egt',strtotime($para['fromTime']));
		} elseif ($para['toTime']) {
			$where['actionTime'] = array('elt',strtotime($para['toTime']));
		} else {
			if($GLOBALS['fromTime'] && $GLOBALS['toTime']){
				//$where['actionTime'] = array('between',array($GLOBALS['fromTime'],$GLOBALS['toTime']));
			}
		}
		$where['uid'] = array('in',$userStr) ;

		//用户资金流动日志数据查询
		$coinList = model('coin_log')->field('uid,actionTime,liqType,extfield0,extfield1,coin,userCoin')->where($where)->order('id desc')->paginate() ;
		unset($where['liqType']) ;

		//用户投注信息查询
		$betList = model('bets')->field('id,uid,actionNo,mode,type,playedId,wjorderId,actionData')->where($where)->order('id desc')->select()->toArray() ;

		$betData = array() ;
		foreach($betList as $bet) {
			$betData[$bet['id']] = $bet;
		}

		$data = array() ;
		$i    = 0 ;
        $coinListData = $coinList->toArray() ;
		foreach ( $coinListData['data'] as $coin ) {
			$b = isset($betData[$coin['extfield0']]) ? $betData[$coin['extfield0']] : [] ;
			$b = $b ? $b : [];
			$data[$i] = array_merge($coin,$userData[$coin['uid']],$b);
			$i++;
		}
        $this->assign('_list', $data) ;
        $this->assign('_page', $coinList->render()) ;
//		$this->recordList($data);
	}
	
	//团队统计
	public final function teamodel()
    {
		$teamAll  = model('members')->where(array('isDelete'=>0, 'parents'=>array('like','%,'.$this->user['uid'].',%')))->field('sumodel(coin) coin, count(uid) count')->find() ;
		$teamAll2 = model('members')->where(array('isDelete'=>0, 'parentId'=>$this->user['uid']))->field('count(uid) count')->find() ;
		
		$this->assign('teamAll',$teamAll)   ;
		$this->assign('teamAll2',$teamAll2) ;
		$this->assign('user',$this->user)   ;
		return $this->fetch('team/team') ;
	}

    /**
     * 提现记录
     */
	public final function cashRecord()
    {
        $param = request()->param() ;
		$this->cashSearch();
		if (empty($param)) {
           return  $this->fetch('team/cashRecord');
        } else {
           echo  $this->fetch('team/cash-list'); die;
        }
	}

	public final function searchCashRecord()
    {
		$this->cashSearch();
		$this->fetch('team/cash-list');
	}

	public final function cashSearch()
    {
		$para = request()->param() ;
        $para['utype']      = isset($para['utype'])      ? $para['utype'] : null    ;
        $para['fromTime']   = isset($para['fromTime'])   ? $para['fromTime'] : ''   ;
        $para['toTime']     = isset($para['toTime'])     ? $para['toTime'] : ''     ;
        $para['actionTime'] = isset($para['actionTime']) ? $para['actionTime'] : '' ;
		$whereLogic         = 'and' ;
        $uid                = Session::get('user.uid') ;
        $data = [] ;

		// 用户名限制
		if ( isset($para['username']) && $para['username'] && $para['username']!='用户名' ) {
			// 按用户名查找时
			// 只要符合用户名且是自己所有下级的都可查询
			// 用户名用模糊方式查询
			$where['username'] = array('like',"%".request()->param('username')."%") ;
			$where['parents']  = array('like',"%,".$uid.",%") ;
		} else {
			//用户类型限制
			switch ($para['utype']) {
				case 1:
					//我自己
                    $where['uid'] = $uid;
					break;
				case 2:
					//直属下线
                    $where['parentId'] = $uid;
					break;
				case 3:
					// 所有下级
                    $where['parents'] = array('like','%,'.$uid.',%');
					break;
				default:
					//所有人
                    $where['parents'] = array('like',"%,".$uid.",%");
                    $where['uid']     = $uid;
                    $whereLogic       = 'or';
					break;
			}
		}

		if ($whereLogic == 'and') {
            $userList = model('members')->field('uid,username')->where($where)->select()->toArray() ;
        } else {
            $userList = model('members')->field('uid,username')->whereor($where)->select()->toArray() ;
        }

		$userData = [] ;
		$uidArr   = [] ;
		foreach ($userList as $user) {
            $uidArr[] = $user['uid'] ;
			$userData[$user['uid']] = $user ;
		}
		$userStr = implode(',',$uidArr);

		$where = array() ;
		// 时间限制
		if ( $para['fromTime'] && $para['toTime'] ) {
			$where['actionTime'] = array('between',array(strtotime($para['fromTime']),strtotime($para['toTime'])));
		} elseif ( $para['fromTime'] ){
			$where['actionTime'] = array('egt',strtotime($para['fromTime']));
		} elseif ( $para['toTime'] ) {
			$where['actionTime'] = array('elt',strtotime($para['toTime']));
		} else {
			if ($GLOBALS['fromTime'] && $GLOBALS['toTime']) {
				//$where['actionTime'] = array('between',array($GLOBALS['fromTime'],$GLOBALS['toTime']));
			}
		}
		
		$where['uid'] = array('in',$userStr);
		$cashList     = model('member_cash')->field('id,uid,actionTime,amount,account,username,state,bankId')->where($where)->order('id desc')->select() ;
		$i            = 0 ;
		foreach ( $cashList as $cash ) {
		    $cash     = $cash->toArray();
			$data[$i] = array_merge($cash,$userData[$cash['uid']]) ;
			$i++ ;
		}
		
		$bankList = model('bank_list')->field('id,name')->where(array('isDelete'=>0))->order('id')->select() ;
		$bankData = array() ;
		foreach($bankList as $bank) {
			$bankData[$bank['id']] = $bank;
		}

		$this->assign('bankData',$bankData);
		$this->recordList($data);
	}

    /**
     * 充值记录
     */
	public final function rechargeRecord()
    {
		$this->rechargeSearch() ;
		if ( !input('get.') ) {
            return $this->fetch('/team/rechargeRecord');
        } else {
          echo   $this->fetch('/team/recharge-list'); die;
        }
	}

	public final function searchrechargeRecord()
    {
		$this->rechargeSearch();
		return $this->fetch('team/recharge-list');
	}

	public final function rechargeSearch()
    {
		$para               = request()->param() ;
		$para['utype']      = isset($para['utype'])      ? $para['utype'] : null ;
		$para['fromTime']   = isset($para['fromTime'])   ? $para['fromTime'] : null ;
		$para['toTime']     = isset($para['toTime'])     ? $para['toTime'] : null ;
		$para['actionTime'] = isset($para['actionTime']) ? $para['actionTime'] : null ;
		$whereLogic         = 'and' ;
		$uid                = Session::get('user.uid') ;
		$userStr            = '' ;
		$data  = [] ;

		// 用户名限制
		if ( isset($para['username']) && ($para['username'] && $para['username']!='用户名') ) {
			// 按用户名查找时
			// 只要符合用户名且是自己所有下级的都可查询
			// 用户名用模糊方式查询
			$where['username'] = array('like',"%".request()->param('username')."%") ;
			$where['parents']  = array('like',"%,".$uid.",%") ;
		} else {
			//用户类型限制
			switch ($para['utype']) {
				case 1:
					//我自己
                    $where['uid'] = $uid ;
					break ;
				case 2:
					//直属下线
                    $where['parentId'] = $uid;
					break ;
				case 3:
					// 所有下级
                    $where['parents'] = array('like','%,'.$uid.',%') ;
					break ;
				default:
					//所有人
                    $where['parents'] = array('like',"%,".$uid.",%") ;
                    $where['uid'] = $uid ;
                    $whereLogic   = 'or' ;
					break ;
			}
		}

		if ( $whereLogic == 'and' ) {
            $userList = model('members')->field('uid,username')->where($where)->select() ;
        } else {
            $userList = model('members')->field('uid,username')->whereor($where)->select() ;
        }
		$userData = [] ;
        $uidArr   = [] ;
		foreach ($userList as $user) {
			$uidArr[] = $user['uid'] ;
			$userData[$uid] = $user->toArray() ;
		}
		$userStr = implode(',',$uidArr);

		$where = array() ; //重置查询条件
		// 时间限制
		if ( $para['fromTime'] && $para['toTime'] ) {
			$where['actionTime'] = array('between',array(strtotime($para['fromTime']),strtotime($para['toTime']))) ;
		} elseif ( $para['fromTime'] ) {
			$where['actionTime'] = array('egt',strtotime($para['fromTime'])) ;
		} elseif ( $para['toTime'] ) {
			$where['actionTime'] = array('elt',strtotime($para['toTime'])) ;
		} else {
//			if ( $GLOBALS['fromTime'] && $GLOBALS['toTime'] ) {
//				$where['actionTime'] = array('between',array($GLOBALS['fromTime'],$GLOBALS['toTime'])) ;
//			}
		}
		$where['uid'] = ['in',$userStr];
		$cashList     = model('member_recharge')->field('id,uid,username,rechargeId,amount,rechargeAmount,mBankId,state,info,actionTime')->where($where)->order('id desc')->select() ;
		$i            = 0 ;

		foreach ($cashList as $cash) {
		    $cash = $cash->toArray() ;
			$data[$i] = array_merge($cash,$userData[$cash['uid']]) ;
			$i++ ;
		}

		$bankList = model('bank_list')->field('id,name')->where(array('isDelete'=>0))->order('id')->select() ;
		$bankData = array() ;
		foreach ($bankList as $bank) {
			$bankData[$bank['id']] = $bank;
		}

		$this->assign('bankData',$bankData) ;

		$this->recordList($data) ;
	}

    /**
     * 推广链接
     * @return mixed
     */
	public final function linkList()
    {
        $uid   = $this->user['uid'];
		$list  = model('links')->where('uid',$uid)->order('fanDian desc')->select() ; //查询推广数据
		$user  = model('members')->where('uid',$uid)->find()  ; //查询用户数据

        $this->assign('data',$list) ;
        $this->assign('user',$user) ;
		return $this->fetch('team/link-list');
	}

    /**
     *  新增推广链接
     * @return mixed
     */
	public final function addLink()
    {
		if ( $this->request->isPost() ) {
			try {
                $para['regIP']   = $this->ip(true) ;
                $para['regTime'] = !empty($this->time) ? $this->time : '' ;
                $para['uid']     = $this->user['uid'] ;
                $para['type']    = (isset($para['type']) && !empty($para['type'])) ? request()->param('type') : '' ;
                $para['fanDian'] = floatval(request()->param('fanDian')) ;

                $backReturn['status'] = 'error' ;
                $backReturn['msg']    = '新增推广链接失败' ;
                $backReturn['url']    = Url('team/linklist') ;

                // 查检返点设置
                if ( $para['fanDian']) {
                    if ( $para['fanDian'] == $this->settings['fanDianDiff'] ) throw new \Exception(sprintf('返点只能是%.1f%的倍数', $this->settings['fanDianDiff'])) ;
                } else {
                    $para['fanDian'] = 0 ;
                }

                if ( request()->param('fanDian') >= $this->user['fanDian'] ) {
                    throw new \Exception('下级返点不能大于自己的返点') ;
                }
                $para['fanDianBdw'] = floatval(request()->param('fanDianBdw')) ;

//                if (model('links')->where(array('uid'=>$this->user['uid'], 'fanDian'=>$para['fanDian']))->find()) {
//                    throw new \Exception('此链接已经存在');
//                }

                if ( model('links')->save($para) ) {
                    $backReturn['status'] = 'success';
                    $backReturn['msg']    = '新增推广链接成功';
                    return json_encode($backReturn) ;
                } else {
                    throw new \Exception('添加链接失败') ;
                }
            } catch (\Exception $e) {
                $backReturn['msg'] = $e->getMessage();
                return json_encode($backReturn) ;
            }

		} else {
			return $this->fetch('team/add-link') ;
		}
	}

    /**
     *   编辑注册链接
     */
	public final function linkUpdate()
    {
		if ($this->request->isPost()) {
			// 查检返点设置
			if ($para['fanDian']=floatval(request()->param('fanDian'))) {
				if($para['fanDian'] % $this->settings['fanDianDiff']) $this->error(sprintf('返点只能是%.1f%的倍数', $this->settings['fanDianDiff']));
			} else {
				$para['fanDian']=0;
			}
			
			if (request()->param('fanDian') >= $this->user['fanDian'] || request()->param('fanDianBdw') >= $this->user['fanDianBdw'])
				$this->error('下级返点不能大于自己的返点') ;
			
			$para['fanDianBdw'] = floatval(request()->param('fanDianBdw')) ;
			$para['lid'] = intval(request()->param('lid'));
			
			if (!model('links')->where(array('uid'=>$this->user['uid'], 'lid'=>request()->param('lid')))->find())
				$this->error('此链接不存在');
			
			if (model('links')->save($para)) {
                $this->success('修改链接成功') ;
            } else {
                $this->error('修改链接失败') ;
            }

		} else {
			$linkData = model('links')->where(array('lid'=>request()->param('lid'), 'uid'=>$this->user['uid']))->find() ;
			if ($linkData['uid']) {
				$parentData=model('members')->field('fanDian, fanDianBdw')->find($this->user['uid']) ;
			} else {
				$parentData['fanDian']    = $this->settings['fanDianMax'];
				$parentData['fanDianBdw'] = $this->settings['fanDianBdwMax'];
			}
			
			$this->assign('linkData',$linkData) ;
			$this->assign('parentData',$parentData) ;
			return $this->fetch('team/update-link') ;
		}
		
	}

    /**
     * 删除推广链接
     */
	public final  function deletelink()
    {
		if($this->request->isPost()) {
		    $backReturn['status'] = 'error' ;
		    $backReturn['msg']    = '删除推广链接失败' ;
		    $backReturn['url']    =  Url('team/linklist');

		    $lid =  request()->param('lid') ;
		    $uid = $this->user['uid'] ;
			if(model('links')->where(array('lid'=>$lid, 'uid'=>$uid))->delete()) {
                $backReturn['status'] = 'success' ;
                $backReturn['msg']    = '删除推广链接成功' ;
            } else {
                $backReturn['status'] = 'error' ;
                $backReturn['msg']    = '删除推广链接失败' ;
            }
            return json_encode($backReturn) ;
		}
	}

	public final  function getlink()
    {
		$linkData = model('links')->where(array('lid'=>request()->param('lid'), 'uid'=>$this->user['uid']))->find() ;
		
		if ($linkData['uid']) {
			$parentData = model('members')->field('fanDian, fanDianBdw')->find($this->user['uid']) ;
		} else {
			$parentData['fanDian']    = $this->settings['fanDianMax'] ;
			$parentData['fanDianBdw'] = $this->settings['fanDianBdwMax'] ;
		}

		$this->assign('linkData',$linkData) ;
		$this->assign('parentData',$parentData) ;
		$this->fetch('get-link') ;
	}
	
	public final function turnMoney()
	{
		$this->fetch('team/turn-money') ;
	}

	public final function turnRecharge()
    {
		$me = model('members')->find($this->user['uid']) ;
		//dump($me);
		//dump('--'.think_ucenter_md5(request()->param('coinpwd'), UC_AUTH_KEY));
		if ($me['coinPassword'] != think_ucenter_md5(request()->param('coinpwd'), UC_AUTH_KEY))
			$this->error('资金密码不正确') ;
		
		if(intval(request()->param('amount'))<=0)
			$this->error('转账金额必须大于0') ;
		if($me['coin']-request()->param('amount')<0)
			$this->error('您的余额不足') ;
		
		$where['username'] = request()->param('username') ;
		$child = model('members')->where($where)->find() ;
		if (!$child)
			$this->error('此用户不存在');
		if(strpos($child['parents'],','.$me['uid'].',')===false)
			$this->error('此用户不是你的下级');
		
		// 添加本人资金流动日志
		$this->addCoin(array(
			'uid'     => $me['uid'],
			'type'    => 0,
			'liqType' => 12,
			'info'    => '用户['.$me['username'].']转账给其下级['.request()->param('username').']'.request()->param('amount').'元',
			'extfield0' => request()->param('amount'),
			'coin' => request()->param('amount'),
			'fcoin'=>0
		));	

		// 添加下级资金流动日志
		$this->addCoin(array(
			'uid'     => $child['uid'],
			'type'    => 0,
			'liqType' => 12,
			'info'    => '用户['.$me['username'].']转账给其下级['.request()->param('username').']'.request()->param('amount').'元',
			'extfield0' => request()->param('amount'),
			'coin' => request()->param('amount'),
			'fcoin' => 0
		));
		$this->success('给下级转账成功');
	}

}
