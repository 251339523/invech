<?php

namespace app\api\controller;
use app\api\Base;

use app\classes\bet;
use app\classes\betC;
use app\classes\betQ;
use app\api\error\CodeBase;
use app\common\model\Type;
use app\common\model\LotteryData;

class Game extends Base
{

    public function types(){
        $id = input('id/i')??0;
        $types = Type::allTypes($id);
        return $this->apiReturn([],$types);     
    }

    public function class_type(){
        $types = Type::getClassType();
        return $this->apiReturn([],$types);     
    }

    public function kqwfpls(){
        $playedId = input('playedId/i')??0;
        $pls = model('played')->kqwfPls($playedId);
        return $this->apiReturn([],$pls);
    }

    public function phase(){
        $type = input('id/i')??0;
        //$types = Type::allTypes();
        $types = Type::getAll();
        if(!isset($types[$type])){
            return $this->apiReturn(CodeBase::$error);
        }
        $lottery = $types[$type];

        //$lastNo = Type::getLastGamePhase($type);
        //$thisNo = Type::getGamePhase($type);
        $lastNo = $lottery->getLastGamePhase();
        $thisNo = $lottery->getGamePhase();

        $time = time();
        $ftime = $lottery->data_ftime;
        $fptime = strtotime($thisNo['actionTime']) - $time - $ftime ;
        $kptime = strtotime($thisNo['actionTime']) - $time ;
        //$thisNo['ftime'] = $ftime;
        $thisNo['fptime'] = $fptime;
        $thisNo['kptime'] = $kptime;

        $data = ['lastNo'=>$lastNo,'thisNo'=>$thisNo,];
        return $this->apiReturn([],$data);
    }

    public function bet_phase(){

        $name = input('name')??'';
        $types = Type::nameMaps();        
        if(!isset($types[$name])){
            return $this->apiReturn(CodeBase::$error);
        }
        $lottery = $types[$name];

        $phase = $lottery->getBetPhase();
        $fptime = strtotime($phase['actionTime']) - time() - $lottery->data_ftime;
        $future_phases = $lottery->future_phases($phase['actionNo']);

        $data = [            
            'fptime'=>$fptime,
            'phase'=>$phase['actionNo'],            
            'future_phases'=> $future_phases,
        ];

        return $this->apiReturn([],$data);
    }

    public function lottery_phase(){
        
        $name = input('name')??'';
        $types = Type::nameMaps();        
        if(!isset($types[$name])){
            return $this->apiReturn(CodeBase::$error);
        }
        $lottery = $types[$name];

        $phase = $lottery->getGamePhase();
        $last_phase = $lottery->getLastGamePhase();
        $ld = $lottery->getLastGameData();
        $parse = '';
        if($ld){
            $parse = $ld->parse();
        }
        $kjtime = strtotime($phase['actionTime']) - time();
        $data = [            
            'phase'=>$last_phase['actionNo'],
            'data'=>$ld->data??'',
            'kjtime'=>$kjtime,
            'parse'=> $parse,
        ];
        return $this->apiReturn([],$data);      
    }

    public function history(){
        $type = input('id/i')??0;
        $types = Type::allTypes();
        if(!isset($types[$type])){
            return $this->apiReturn(CodeBase::$error);
        }
      
        $data = LotteryData::getHistory($types[$type]['name']);
        return $this->apiReturn([],$data);
    }
    
    /*前端自行计算
    private function getPl($played = null)
    {        
        $sql = "select bonusProp, bonusPropBase from {$this->prename}played where id=" . $played;

        $data = db('played')->where('id',$played)
            ->field('is_mix,mix_ids,bonusProp, bonusPropBase')->find();
        if($data['is_mix']){
            $data = db('played')->where('id','in',$data['mix_ids'])
            ->field('bonusProp, bonusPropBase')->select();
            $data = $data->toArray();
        }else{
            $data = [$data];
        }
        return $data;    
    }
    */

    public function postAll(){
        $ret = $this->user->bets();
        return $this->bool_return($ret); 
    }

    //ajax撤单 public final function deleteCode()



   

}
