<?php
// +----------------------------------------------------------------------
// | FileName: user.php
// +----------------------------------------------------------------------
// | CreateDate: 2017年10月5日
// +----------------------------------------------------------------------
// | Author: xiaoluo
// +----------------------------------------------------------------------
namespace app\index\controller;
use app\common\model\Bank;
use app\common\model\Bet;
use app\common\model\Money;
use app\common\model\Order;
use app\common\model\PaySet;
use app\common\model\Played;
use app\common\model\Type;
use app\common\model\Withdraw;
use app\common\model\BackWater;
use app\index\model\MemberBank;
use app\mobile\model\BankList;
use bong\service\auth\traits\ThrottlesLogins;
use think\Db;
use app\index\Login;
use app\classes\iplocation;
use think\Request;
use think\Session;
use app\common\model\Member as UserModel;
use app\common\model\Apply as ApplyModel;

class user extends Login{
    use ThrottlesLogins;

    public function logout(){
        session(null);
        cookie(null,config('cookie.prefix'));
        $url = config('auth.redirect.auth_fail.'.MODULE);
        $this->redirect('/');
    }

    public function index()
    {
        $this->view->pusher_app_key = env('broadcast.pusher_app_key');
        $this->view->pusher_cluster = env('broadcast.pusher_cluster');
        return $this->fetch('index');
    }
    
    public function main()
    {
        $where               = array() ;
        $where['uid']        = $this->user['uid'] ;
        //$where['isDelete']   = 0 ;
        $where['lotteryNo']  = array('neq','') ;
        $where['actionTime'] = array('between',array(strtotime('03:00'),strtotime('03:00') + 24*3600)) ;
        $myxf = db('bets')->where($where)->field('sum(mode*beiShu*actionNum) as xiaofei')->find() ;
        $myxf['xiaofei'] = (isset($myxf['xiaofei'])  && !empty($myxf['xiaofei'])) ? $myxf['xiaofei'] : 0 ;

        $this->assign('myxf',$myxf) ;

        $notice = db('content') -> where (array('enable' => 1)) -> order('id desc') ->select();
        $this->assign('notice',$notice);
        /*
        $login = db('member_session') -> where(array('uid' => $this->user['uid'])) -> order('id desc')->limit(5)->select()->toArray();
        */
        $login = [];
        $login[0] = ['loginIP'=>2130706433,'loginTime'=>1508920728];

        $ip = new iplocation();

        foreach ($login as $key => $val) {
            $addr = $ip->getlocation($val['loginIP']);
            $login[$key]['addr'] = isset($addr['country']) ? $addr['country'] : '' ;
        }

        $this->assign('login',$login)  ;
        return $this->fetch('main') ;
    }

    public function info(){
        if($this->request->isPost()){
            $request = request();
            $params = $request->param();
            $uid =  $this->user->id;
            $member = UserModel::get(intval($uid));
            $info = $member->validate('Member.webedit')->save($params);
            if($info){
                return  $this->success("操作成功");
            }else{
                return  $this->error($member->getError());
            }
        }else{
            $userData  = $this->user;
            $this->assign('userData',$userData);
            return $this->fetch();
        }
    }

    public function bank(){

        $params = $this->request->param();
        if(IS_POST){
            $validate = validate('Member');
            $ret = $validate->scene('bank')->check($params);
            if(!$ret){
                 return  $this->error($validate->getError());
            }
            $this->user->bank->bank_name        =   $params['bank_name'];
            $this->user->bank->bank_username    =   $params['bank_username'];
            $this->user->bank->bank_account     =   $params['bank_account'];
            $this->user->bank->bank_address     =   $params['bank_address'];
            $info = $this->user->save();
            if($info){
                return  $this->success("操作成功");
            }else{
                return  $this->error(UserModel::getError());
            }
        }else{
            $this->assign('banklist',Bank::BANK_ARRAY);
            return $this->fetch();
        }
       
    }
    public function save_password() {        
        if(IS_GET){
            return $this->fetch();    
        }else{
            //1.验证是否old密码规则
            $params = request()->param();
            $validate = validate('Member');
            $ret = $validate->scene('save_password')->check($params);
            if(!$ret){
                return  $this->error($validate->getError());
            }

            if (!bcrypt_verify($params['oldPassword'],$this->user->password)){
                return  $this->error('原密码错误,请重新输入');
            }
            $this->user->password = $params['newPassword'];
            if (!$this->user->save()){
                return  $this->error('修改失败');
            }
            return  $this->success('修改成功');
        }
    } 
   
    public final function getOrdered($type=null)
    {
        if(!$this->type) $this->type = input('type','','intval');
        $this->fetch('index/inc_game_order_history'); die;
    }

    public function inbox(){    
        $request = request();
        $list = $this->user->getMessQList($request);
        if(isset($request->param()['status'])){
            $this->assign('status',$request->param()['status']);
        }
        $this->assign('list',$list);
        return $this->fetch();
    } 

    public function inbox_del(){ 
        $request = request();
        $params = $request->param(); 
        $list = $this->user->getMessDel($params['ids']);
        if($list){
            return $this->success('操作成功');
        }else{
            return $this->error('操作失败');
        }
        
    }

    public function inbox_edit(){
        $request = request();
        $params = $request->param(); 
        $list = $this->user->getMessEdit($params['ids']);
        if($list){
            return $this->success('操作成功');
        }else{
            return $this->error('操作失败');
        }
    }

    public function agent()
    {        
        //代理申请
        if(IS_GET){
            return $this->fetch();    
        }else{
            $ret = $this->user->apply('agent');
        }        
    }

    public function get_withdraw_info()
    {
        if(IS_GET&&IS_AJAX){
            $data = $this->user->get_withdraw_info();
        }else{
            $data = [];
        }
        $this->success('','',$data);
    }

    public function withdraw()
    {
        if(IS_GET){
            return $this->fetch();
        }else{
            $apply = $this->user->apply('withdraw');
            if ($apply){
                return $this->success('提现申请已提交，等待审核','');
            }else{
                return $this->error('提现申请失败，请联系管理员');
            }
        }
    }

    /**
     * ajax 获取最新余额数据
     * @return mixed
     */
    public function ajaxGetMoney(){
        $user = $this->user;
        return $user->coin;
    }
    //资金记录
    public function money_record(){
        $request = request();
        $list = Money::getQlist($request);
        $this->assign('list',$list);
        return $this->fetch();
    }
    //充值记录
    public function recharge_record(){

        $payType = PaySet::getAll();
        $this->assign('payType',$payType);
        $request    =   request();
        $list       =   Order::getQlist($request);
        $this->assign('list',$list);
        return $this->fetch();
    }    
    //投注记录
    public function bet_record(){        
        $type = Type::getAll();
        $this->assign('type',$type);
        $request    = request();
        $list       = Bet::getQList($request);
        $this->assign('list',$list);
        return $this->fetch();
    }
    //提现记录
    public function withdraw_record(){
        $request    =   request();
        $list       =   Withdraw::getQlist($request);
        $this->assign('list',$list);
        return $this->fetch();
    }
    //返水记录
    public function backwater_record(){
        $request    =   request();
        $list       =   BackWater::getQlist($request);
        $this->assign('list',$list);
        return $this->fetch();
    }
}