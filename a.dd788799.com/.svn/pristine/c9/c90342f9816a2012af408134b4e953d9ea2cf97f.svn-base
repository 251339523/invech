<?php

namespace bong\service\queue;

use Kcloze\Jobs\Config;
use Kcloze\Jobs\Logs;
use Kcloze\Jobs\Utils;

class SwooleJobAction
{
    public function init()
    {
        $this->logger  = Logs::getLogger(Config::getConfig()['logPath'] ?? '', Config::getConfig()['logSaveFileApp'] ?? '');
    }

    private function max_tries(){
        return config('queue.run.max_tries')??5;
    }

    public function start($job)
    {        
        $this->init();
        try {
            $this->markJobAsFailedThrowException($job);            
            $job->fire();
        } catch (\Exception $e) {
            $this->handleJobException($job, $e);
        } catch (\Throwable $e) {
            $this->handleJobException($job, $e);
        }
    }

    protected function markJobAsFailedThrowException($job)
    {
        $maxTries = config('queue.run.max_tries')??5;
        $maxTries = ! is_null($job->maxTries()) ? $job->maxTries() : $maxTries;

        $timeoutAt = $job->timeoutAt();

        if ($timeoutAt && time() <= $timeoutAt) {
            return;
        }

        if (! $timeoutAt && ($maxTries === 0 || $job->attempts() <= $maxTries)) {
            return;
        }

        $this->failJob($job, $e = new \Exception(
            $job->displayName().' has been attempted too many times or run too long.'
        ));

        throw $e;
    }

    protected function handleJobException($job, $e)
    {
       
        if (! $job->hasFailed()) {
            $this->markJobAsFailedWhenMaxAttempts($job,$e);
            //$this->failJob($job,$e);
        }

        $retry_delay = config('queue.run.retry_delay')??10;
        if (! $job->isDeleted() && ! $job->isReleased() && ! $job->hasFailed()) {
            $job->release($retry_delay);
        }
        
        Utils::catchError($this->logger, $e);        
    }

    protected function markJobAsFailedWhenMaxAttempts($job, $e)
    {
        $maxTries = config('queue.run.max_tries')??5;
        $maxTries = ! is_null($job->maxTries()) ? $job->maxTries() : $maxTries;

        if ($job->timeoutAt() && $job->timeoutAt() <= time()) {
            $this->failJob($job, $e);
        }

        if ($maxTries > 0 && $job->attempts() >= $maxTries) {
            $this->failJob($job, $e);
        }
    }

    public function failJob($job, $e = null)
    {
        $job->markAsFailed();

        if ($job->isDeleted()) {
            return;
        }

        $job->delete();


        $job->failed($e);

        //event(JobFailed);
    }
}
