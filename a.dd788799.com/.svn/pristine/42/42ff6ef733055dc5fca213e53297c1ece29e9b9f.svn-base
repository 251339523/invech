<?php
use app\admin;
use think\view\driver\Think;

// +----------------------------------------------------------------------
// | ThinkPHP [ WE CAN DO IT JUST THINK ]
// +----------------------------------------------------------------------
// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: 流年 <liu21st@gmail.com>
// +----------------------------------------------------------------------

// 应用公共文件

//默认时间
if(strtotime(date('Y-m-d H:i:s',time()))>strtotime(date('Y-m-d',time()).' 03:00')){
    $GLOBALS['fromTime']=strtotime(date('Y-m-d').' 03:00');
    $GLOBALS['toTime']=strtotime(date('Y-m-d',strtotime("+1 day")).' 03:00');
}else{
    $GLOBALS['fromTime']=strtotime(date('Y-m-d',strtotime("-1 day")).' 03:00');
    $GLOBALS['toTime']=strtotime(date('Y-m-d',time()).' 03:00');
}

define('UC_AUTH_KEY', 'zaDcd)y:Y8@xfn,0KM3_W-t[C/^xfSw"Q4=sp%8H'); 

function double_format($double_num){
    return $double_num>0 ? sprintf("%.2f",$double_num) : $double_num<0 ? sprintf("%.2f",$double_num) : 0;
}

function NOnull($str){
    return $str>0?sprintf("%.2f",$str):0;
}

function NOkong($str2){
    return $str2<>""?$str2:0;
}

/**
 * js 页面提示信息，后重定向页面
 */
function message($value,$url=""){ //默认返回上一页
	header("Content-type: text/html; charset=utf-8");
	$js  ='<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>message</title>
</head>
			
<body>';
	$js  .= "<script type=\"text/javascript\" language=\"javascript\">\r\n";
	$js .= "alert(\"".$value."\");\r\n";
	if($url) $js .= "window.location.href=\"$url\";\r\n";
	else $js .= "window.history.go(-1);\r\n";
	$js .= "</script>\r\n";
	$js.="</body></html>";
	echo $js;
	exit;
}

/**
 * 根据新浪 IP地址获取所在城市
 */
function GetIpLookup($ip = ''){
	if(empty($ip)){
		$ip = GetIp();
	}
	$res = @file_get_contents('http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&ip=' . $ip);
	if(empty($res)){ return false; }
	$jsonMatches = array();
	preg_match('#\{.+?\}#', $res, $jsonMatches);
	if(!isset($jsonMatches[0])){ return false; }
	$json = json_decode($jsonMatches[0], true);
	if(isset($json['ret']) && $json['ret'] == 1){
		$json['ip'] = $ip;
		unset($json['ret']);
	}else{
		return false;
	}
	return $json;
} 

function object2array(&$object) {
	$object =  json_decode( json_encode( $object),true);
	return  $object;
}

function CsubStr($str,$start,$len,$suffix='...'){
    preg_match_all("/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf]/", $str, $info);
    $len*=2;
    $i=0;
    $tmpstr = '';
    while($i < $len && array_key_exists($start,$info[0])) {
        if (strlen($info[0][$start]) > 1) {
            $i+=2;
            if ($i <= $len)  $tmpstr .= $info[0][$start];
        }else {
            if (++$i <= $len)  $tmpstr .= $info[0][$start];
        }
        $start++;
    }
    return array_key_exists($start,$info[0]) ? $tmpstr.=$suffix : $tmpstr;
}

/**
 * 处理插件钩子
 * @param string $hook   钩子名称
 * @param mixed $params 传入参数
 * @return void
 */
function hook($hook,$params=array()){
    \Think\Hook::listen($hook,$params);
}


/**
 * 系统非常规MD5加密方法
 * @param  string $str 要加密的字符串
 * @return string
 */
function think_ucenter_md5($str, $key = 'ThinkUCenter'){
    return '' === $str ? '' : md5(sha1($str) . $key);
}

/**
 * 系统加密方法
 * @param string $data 要加密的字符串
 * @param string $key  加密密钥
 * @param int $expire  过期时间 单位 秒
 * @return string
 * @author 麦当苗儿 <zuojiazi@vip.qq.com>
 */
function think_encrypt($data, $key = '', $expire = 0) {
    $key  = md5(empty($key) ? cache('DATA_AUTH_KEY') : $key);
    $data = base64_encode($data);
    $x    = 0;
    $len  = strlen($data);
    $l    = strlen($key);
    $char = '';
    
    for ($i = 0; $i < $len; $i++) {
        if ($x == $l) $x = 0;
        $char .= substr($key, $x, 1);
        $x++;
    }
    
    $str = sprintf('%010d', $expire ? $expire + time():0);
    for ($i = 0; $i < $len; $i++) {
        $str .= chr(ord(substr($data, $i, 1)) + (ord(substr($char, $i, 1)))%256);
    }
    return str_replace('=', '',base64_encode($str));
}

/**
 * 系统解密方法
 * @param  string $data 要解密的字符串 （必须是think_encrypt方法加密的字符串）
 * @param  string $key  加密密钥
 * @return string
 * @author 麦当苗儿 <zuojiazi@vip.qq.com>
 */
function think_decrypt($data, $key = ''){
    $key    = md5(empty($key) ? cache('DATA_AUTH_KEY') : $key);
    $x      = 0;
    $data   = base64_decode($data);
    $expire = substr($data,0,10);
    $data   = substr($data,10);
    
    if($expire > 0 && $expire < time()) {
        return '';
    }
    
    $len  = strlen($data);
    $l    = strlen($key);
    $char = $str = '';
    
    for ($i = 0; $i < $len; $i++) {
        if ($x == $l) $x = 0;
        $char .= substr($key, $x, 1);
        $x++;
    }
    
    for ($i = 0; $i < $len; $i++) {
        if (ord(substr($data, $i, 1))<ord(substr($char, $i, 1))) {
            $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
        }else{
            $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
        }
    }
    return base64_decode($str);
}

/**
 * 数据签名认证
 * @param  array  $data 被认证的数据
 * @return string       签名
 * @author 麦当苗儿 <zuojiazi@vip.qq.com>
 */
function data_auth_sign($data) {
    //数据类型检测
    $key = "Kyeol@!$";
    return sha1($data.$key);
    // if(!is_array($data)){
    // $data = (array)$data;
    // }
    // ksort($data); //排序
    // $code = http_build_query($data); //url编码并生成query字符串
    // $sign = sha1($code); //生成签名
    // return $sign;
}

/**
 * 调用系统的API接口方法（静态方法）
 * api('user/getName','id=5'); 调用公共模块的User接口的getName方法
 * api('Admin/user/getName','id=5');  调用Admin模块的User接口
 * @param  string  $name 格式 [模块名]/接口名/方法名
 * @param  array|string  $vars 参数
 */
function api($name,$vars=array()){
    $array     = explode('/',$name);
    $method    = array_pop($array);
    $classname = array_pop($array);
    $callback  = 'app\\Api\\'.$classname.'Api::'.$method;
    if(is_string($vars)) {
        parse_str($vars,$vars);
    }
    return call_user_func_array($callback,$vars);
}

/**
 * 时间戳格式化
 * @param int $time
 * @return string 完整的时间显示
 * @author huajie <banhuajie@163.com>
 */
function time_format($time = NULL,$format='Y-m-d H:i'){
    $time = $time === NULL ? NOW_TIME : intval($time);
    return date($format, $time);
}

/**
 * 根据用户ID获取用户名
 * @param  integer $uid 用户ID
 * @return string       用户名
 */
function get_username($uid = 0){
    static $list;
    if(!($uid && is_numeric($uid))){ //获取当前登录用户名
        return session('user_auth.username');
    }
    
    /* 获取缓存数据 */
    if(empty($list)){
        $list = config('sys_active_user_list');
    }
    
    /* 查找用户信息 */
    $key = "u{$uid}";
    if(isset($list[$key])){ //已缓存，直接使用
        $name = $list[$key];
    } else { //调用接口获取用户信息
        $User = new User\Api\UserApi();
        $info = $User->info($uid);
        if($info && isset($info[1])){
            $name = $list[$key] = $info[1];
            /* 缓存用户 */
            $count = count($list);
            $max   = config('USER_MAX_CACHE');
            while ($count-- > $max) {
                array_shift($list);
            }
            cache('sys_active_user_list', $list);
        } else {
            $name = '';
        }
    }
    return $name;
}

/**
 * 根据用户ID获取用户昵称
 * @param  integer $uid 用户ID
 * @return string       用户昵称
 */
function get_nickname($uid = 0){
    static $list;
    if(!($uid && is_numeric($uid))){ //获取当前登录用户名
        return session('user_auth.username');
    }
    
    /* 获取缓存数据 */
    if(empty($list)){
        $list = cache('sys_user_nickname_list');
    }
    
    /* 查找用户信息 */
    $key = "u{$uid}";
    if(isset($list[$key])){ //已缓存，直接使用
        $name = $list[$key];
    } else { //调用接口获取用户信息
        $info = db('Member')->field('nickname')->find($uid);
        if($info !== false && $info['nickname'] ){
            $nickname = $info['nickname'];
            $name = $list[$key] = $nickname;
            /* 缓存用户 */
            $count = count($list);
            $max   = config('USER_MAX_CACHE');
            while ($count-- > $max) {
                array_shift($list);
            }
            cache('sys_user_nickname_list', $list);
        } else {
            $name = '';
        }
    }
    return $name;
}

/**
 * 获取分类信息并缓存分类
 * @param  integer $id    分类ID
 * @param  string  $field 要获取的字段名
 * @return string         分类信息
 */
function get_category($id, $field = null){
    static $list;
    
    /* 非法分类ID */
    if(empty($id) || !is_numeric($id)){
        return '';
    }
    
    /* 读取缓存数据 */
    if(empty($list)){
        $list = cache('sys_category_list');
    }
    
    /* 获取分类名称 */
    if(!isset($list[$id])){
        $cate = db('Category')->find($id);
        if(!$cate || 1 != $cate['status']){ //不存在分类，或分类被禁用
            return '';
        }
        $list[$id] = $cate;
        cache('sys_category_list', $list); //更新缓存
    }
    return is_null($field) ? $list[$id] : $list[$id][$field];
}

/* 根据ID获取分类标识 */
function get_category_name($id){
    return get_category($id, 'name');
}
/* 根据ID获取分类名称 */
function get_category_title($id){
    return get_category($id, 'title');
}

/**
 * 自定义异常处理
 * @param string $msg 异常消息
 * @param string $type 异常类型 默认为Think\Exception
 * @param integer $code 异常代码 默认为0
 * @return void
 */
function throw_exception($msg, $type='Think\\Exception', $code=0) {
    if (class_exists($type, false))
        throw new $type($msg, $code);
        else
            halt($msg);        // 异常类型不存在则输出错误信息字串
}

/**
 * 动态扩展左侧菜单,base.html里用到
 * @author 朱亚杰 <zhuyajie@topthink.net>
 */
function extra_menu($extra_menu,&$base_menu){
    foreach ($extra_menu as $key=>$group){
        if( isset($base_menu['child'][$key]) ){
            $base_menu['child'][$key] = array_merge( $base_menu['child'][$key], $group);
        }else{
            $base_menu['child'][$key] = $group;
        }
    }
}


/**
 * 记录行为日志，并执行该行为的规则
 * @param string $action 行为标识
 * @param string $model 触发行为的模型名
 * @param int $record_id 触发行为的记录id
 * @param int $user_id 执行行为的用户id
 * @return boolean
 * @author huajie <banhuajie@163.com>
 */
function action_log($action = null, $model = null, $record_id = null, $user_id = null){

    //参数检查
    if(empty($action) || empty($model) || empty($record_id)){
        return '参数不能为空';
    }
    if(empty($user_id)){
        $user_id = is_login();
    }

    //查询行为,判断是否执行
    $action_info = M('Action')->getByName($action);
    if($action_info['status'] != 1){
        return '该行为被禁用或删除';
    }

    //插入行为日志
    $data['action_id'] = $action_info['id'];
    $data['user_id'] = $user_id;
    $data['action_ip'] = ip2long(get_client_ip());
    $data['model'] = $model;
    $data['record_id'] = $record_id;
    $data['create_time'] = NOW_TIME;
    //系统日志记录操作url参数
    $data['remark'] = '操作url：'.$_SERVER['REQUEST_URI'];
    db('ActionLog')->add($data);

    if(!empty($action_info['rule'])){
        //解析行为
        $rules = parse_action($action, $user_id);

        //执行行为
        $res = execute_action($rules, $action_info['id'], $user_id);
    }
}


/**
 * 检测用户是否登录
 * @return integer 0-未登录，大于0-当前登录用户ID
 * @author 麦当苗儿 <zuojiazi@vip.qq.com>
 */
function is_login($ip){
    $user = session('user_auth');
    if (empty($user)) {
        return 0;
    } else {
        return session('user_auth_sign2') == data_auth_sign($ip) ? $user['uid'] : 0;
    }
}


/**
 * 获取客户端IP地址
 * @param integer $type 返回类型 0 返回IP地址 1 返回IPV4地址数字
 * @return mixed
 */
function get_client_ip($type = 0) {
    $type       =  $type ? 1 : 0;
    static $ip  =   NULL;
    if ($ip !== NULL) return $ip[$type];
    if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
        $arr    =   explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
        $pos    =   array_search('unknown',$arr);
        if(false !== $pos) unset($arr[$pos]);
        $ip     =   trim($arr[0]);
    }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) {
        $ip     =   $_SERVER['HTTP_CLIENT_IP'];
    }elseif (isset($_SERVER['REMOTE_ADDR'])) {
        $ip     =   $_SERVER['REMOTE_ADDR'];
    }
    // IP地址合法验证
    $long = sprintf("%u",ip2long($ip));
    $ip   = $long ? array($ip, $long) : array('0.0.0.0', 0);
    return $ip[$type];
}

if (! function_exists('url_base64_encode')) { 
    function url_base64_encode($data)
    {
        $b64 = base64_encode($data);
        $b64 = str_replace(array('+', '/', "\r", "\n", '='),
                array('-', '_'),
                $b64);

        return $b64;
    }
}

if (! function_exists('url_base64_decode')) {  
    function url_base64_decode($b64)
    {
        $b64 = str_replace(array('-', '_'),
                array('+', '/'),
                $b64);

        return base64_decode($b64);
    }
}

//tp5.0(tp5.1支持)不支持容器,PayManager无法存为单例,
//PayManager维护的驱动缓存也没意义
//将PayManager保存在全局变量$_SERVER中;
if (! function_exists('pay')) {
    function pay($dirver = null)
    {
        if($_SERVER['PayManager']??''){
            $manager = $_SERVER['PayManager'];
        }else{
            $manager = new app\Pay\PayManager();
            $_SERVER['PayManager'] = $manager;
        }
        if (is_null($dirver)) {
            return $manager;
        } else {
            return $manager->driver($dirver);
        }
    }
}

//服务容器实现单例,obj为null,name要求是类名
if (! function_exists('container')) {
    function container($name,$obj=null)
    {
        if(!isset($_SERVER['container'])){
            $_SERVER['container'] = [];            
        }
        $container = &$_SERVER['container'];

        if(!isset($container['alias'])){
            $file = APP_PATH.'required/container_alias.php';
            $container['alias'] = is_file($file)?require($file):[];    
        }
        $alias = &$container['alias'];

        if(!isset($container['instances'])){
            $container['instances'] = [];
        }
        $instances = &$container['instances'];

        if(isset($alias[$name])){
            $name = $alias[$name];
        }

        if(!is_null($obj)){
            return $instances[$name] = $obj;
        }

        if($instances[$name]??null){
            $obj = $instances[$name];
        }else{
            $obj = new $name();
            $instances[$name] = $obj;
        }
        return $obj;
    }
}

if (! function_exists('hashid')) {
    function hashid($id,$hasher='default')
    {
        $class = app\service\HashidsManager::class;
        return container($class)->hasher($hasher)->encode($id);
    }
}

if (! function_exists('dehashid')) {
    function dehashid($id,$hasher='default')
    {
        $class = app\service\HashidsManager::class;
        $data = container($class)->hasher($hasher)->decode($id);
        return is_array($data) && count($data) == 1 ? $data[0] : $data;        
    }
}


if (! function_exists('env')) {
    function env($name, $default = null)
    {
        //$result = getenv(ENV_PREFIX . strtoupper(str_replace('.', '_', $name)));
        return \think\Env::get($name, $default);
    }
}

if (! function_exists('event')) {
    function event(...$args)
    {
        return container('events')->dispatch(...$args);
    }    
}

if (! function_exists('parse_callback')) {
    function parse_callback($callback, $default = null)
    {
        if(false === strpos($callback,'@')){
            return [$callback, $default];
        }else{
            return explode('@', $callback, 2);
        }
    }
}

function file_list($path = '')
{
    
    $file = scandir($path);
    
    foreach ($file as $k => $v) {
        
        if (is_dir($path . DS . $v)) {
            
            unset($file[$k]);
        }
    }
    
    return array_values($file);
}

function bcrypt($value)
{
    return container('hasher')->make($value);
}

function bcrypt_verify($value, $hashedValue){
    return container('hasher')->check($value, $hashedValue);
}


function numToWord($num)
{
    $chiNum = array('零', '一', '二', '三', '四', '五', '六', '七', '八', '九');
    $chiUni = array('','十', '百', '千', '万', '亿', '十', '百', '千');
    
    $chiStr = '';
    
    $num_str = (string)$num;
    
    $count = strlen($num_str);
    $last_flag = true; //上一个 是否为0
    $zero_flag = true; //是否第一个
    $temp_num = null; //临时数字
    
    $chiStr = '';//拼接结果
    if ($count == 2) {//两位数
        $temp_num = $num_str[0];
        $chiStr = $temp_num == 1 ? $chiUni[1] : $chiNum[$temp_num].$chiUni[1];
        $temp_num = $num_str[1];
        $chiStr .= $temp_num == 0 ? '' : $chiNum[$temp_num];
    }else if($count > 2){
        $index = 0;
        for ($i=$count-1; $i >= 0 ; $i--) {
            $temp_num = $num_str[$i];
            if ($temp_num == 0) {
                if (!$zero_flag && !$last_flag ) {
                    $chiStr = $chiNum[$temp_num]. $chiStr;
                    $last_flag = true;
                }
            }else{
                $chiStr = $chiNum[$temp_num].$chiUni[$index%9] .$chiStr;
                
                $zero_flag = false;
                $last_flag = false;
            }
            $index ++;
        }
    }else{
        $chiStr = $chiNum[$num_str[0]];
    }
    return $chiStr;
}

require_once(ROOT_PATH.'swoole/algo_common.php');
?>