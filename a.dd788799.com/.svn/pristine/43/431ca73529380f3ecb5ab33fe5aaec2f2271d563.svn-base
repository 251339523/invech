<?php

namespace app\classes;


class betC{

    //检查函数与规则函数同名
    //全部返回bool,


    static private $ssc_nums = [0,1,2,3,4,5,6,7,8,9];
    
    static private $six_sz = [  0,1,2,3,4,5,6,7,8,9,
                                        10,11,12,13,14,15,16,17,18,19,
                                        20,21,22,23,24,25,26,27,28,29,
                                        30,31,32,33,34,35,36,37,38,39,
                                        40,41,42,43,44,45,46,47,48,49,
                                ];
    static private $six_sm =    ['大','小','单','双','合大','合小','合单','合双','尾大',
                                '尾小','尾单','尾双','红波','绿波','蓝波'];
    static private $six_sx =    ['鼠','牛','虎','兔','龙','蛇',
                                '马','羊','猴','鸡','狗','猪'];
    static private $six_ws =    ['0尾','1尾','2尾','3尾','4尾',
                                '5尾','6尾','7尾','8尾','9尾'];
    static private $six_ws_num = ['0','1','2','3','4','5','6','7','8','9'];                                
    static private $pk10_sz = ['01','02','03','04','05','06','07','08','09','10','1','2','3','4','5','6','7','8','9'];
    static private $pk10_sm = ['大','小','单','双'];
    static private $pk10_lh = ['龙','虎'];
    static private $pk10_gyh = ['和大','和小','和单','和双','3,4,18,19','5,6,16,17','9,10,12,13','11','7,8,14,15'];

    static private $klsf_sz = ['01','02','03','04','05','06','07','08','09','10',
                                '11','12','13','14','15','16','17','18','19','20',
                                '1','2','3','4','5','6','7','8','9'];
    static private $klsf_sm = ['大','小','单','双','尾大','尾小','合单','合双'];
    static private $klsf_zhlh = ['总大','总小','总单','总双','总尾大','总尾小','总龙','总虎'];
    static private $klsf_lh = ['龙','虎'];

    static private $xy28_sz = ['0','1','2','3','4','5','6','7','8','9','10',
                                '11','12','13','14','15','16','17','18','19','20',
                                '21','22','23','24','25','26','27'];
    static private $xy28_sm = ['大','小','单','双','大单','小单','大双','小双',
                                '极大','极小','红波','绿波','蓝波','豹子'];

    static private $fc3d_sz = ['0','1','2','3','4','5','6','7','8','9'];
    static private $fc3d_hs2 = ['0~4','5','6','7','8','9','10','11','12','13','14~18','大','小'];
    static private $fc3d_hs3 = ['0~6','7','8','9','10','11','12','13','14','15','16','17','18','19','20',];
    static private $fc3d_sm = ['大','小','单','双','质','合'];

    static private $k3_sz = ['1','2','3','4','5','6'];
    static private $k3_hz = ['3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','大','小','单','双'];

    //------------------时时彩官方----------------------------
    //时时彩官方玩法内容检查,没有检查函数的,对于不合法数据,规则函数判定为不中奖;
    public static function assert_count($bet,$num){
        return count(_arr($bet)) == $num;
    }    
    public static function assert_tpf($bet,$num){
        $count = 0;
        foreach (_arr($bet) as $pos) {
            if($pos == '-'){
                $count ++;
            }
        }
        return $count == $num;
    }
    public static function assert_wym($wym,$num){//$num=2表示2个无效位        
        $count = 0;
        $ws = [16,8,4,2,1];
        foreach ($ws as $w) {
            if ( ($w&$wym)==0 ) {     
                $count ++;
            }
        }
        return $count == $num;
    }
    //任四
    public static function dxwfR4d($betData,$w=0){
        $bets = _arr($betData,'|');
        foreach($bets as $bet){
            $res = self::assert_count($bet,5)&&self::assert_tpf($bet,1);
            if(!$res){
                return false;
            }
        }
        return true;
    }
    public static function dxwfR4f($betData,$w=0){
        $bet = $betData;
        return self::assert_count($bet,5)&&self::assert_tpf($bet,1);
    }

    public static function ssczx24($betData,$w){
        return self::assert_wym($w,1);
    }
    public static function ssczx12($betData,$w=0){
        return self::assert_wym($w,1);
    }
    public static function ssczx6($betData,$w=0){
        return self::assert_wym($w,1);
    }
    public static function ssczx4($betData,$w=0){
        return self::assert_wym($w,1);
    }                    
        
    //任三
    public static function sxwfR3d($betData,$w=0){
        $bets = _arr($betData,'|');
        foreach($bets as $bet){
            $res = self::assert_count($bet,5)&&self::assert_tpf($bet,2);
            if(!$res){
                return false;
            }
        }
        return true;        
    }    
    public static function sxwfR3f($betData,$w=0){
        $bet = $betData;
        return self::assert_count($bet,5)&&self::assert_tpf($bet,2);
    }
    public static function sxzxR3z6($betData,$w=0){
        return self::assert_wym($w,2);
    }
    public static function sxzxR3z3($betData,$w=0){
        return self::assert_wym($w,2);
    }
    public static function sxzxR3h($betData,$w=0){        
        return self::sxwfR3d($betData,$w);
    }
    public static function sxzxR3_hz($betData,$w=0){
        return self::assert_wym($w,2);
    }      
    public static function sxwfR3_hz($betData,$w=0){
        return self::assert_wym($w,2);
    }          
    //任三一码
    public static function bddR3($betData,$w=0){
        return self::assert_wym($w,2);
    }
        
    //任二
    public static function rxwfR2d($betData,$w=0){
        $bets = _arr($betData,'|');
        foreach($bets as $bet){
            $res = self::assert_count($bet,5)&&self::assert_tpf($bet,3);
            if(!$res){
                return false;
            }
        }
        return true;     
    }
    public static function rxwfR2f($betData,$w=0){
        $bet = $betData;
        return self::assert_count($bet,5)&&self::assert_tpf($bet,3);        
    }    
    public static function rxzxR2f($betData,$w=0){
        return self::assert_wym($w,3);
    }
    public static function rxzxR2d($betData,$w=0){
        return self::assert_wym($w,3);
    }
    public static function rxwfR2_hz($betData,$w=0){
        return self::assert_wym($w,3);
    }      
    public static function rxzxR2_hz($betData,$w=0){
        return self::assert_wym($w,3);
    }   

    //大小单双
    public static function dxdsR2f($betData,$w=0){
        $bet = $betData;
        return self::assert_count($bet,5)&&self::assert_tpf($bet,3); 
    }   
    public static function dxdsR3f($betData,$w=0){
        $bet = $betData;
        return self::assert_count($bet,5)&&self::assert_tpf($bet,2); 
    }       

    //11选5的编码并没有'#'
     
     






    //------------------时时彩快钱----------------------------
    //'总和、龙虎和-总单',_arr将'总单'分隔成2个投注值了,
    //有效分割函数三个:_arr,_arr_no_split,_arr_fs_split
    private static function check($kvs,$pairs){
         foreach ($kvs as $kv) {
            $ret0 = false;
            foreach ($pairs as $pair) {
                if(in_array($kv[0],$pair[0])){
                    $fn = $pair[2]??'_arr';
                    if(array_include(_arr($pair[1]),$fn($kv[1]))){
                        $ret0 = true;break;
                    }else{
                        return false;
                    }
                }
            }
            if(!$ret0) return false;
        }

        return true;         
    }

    //'万位-小'
    public static function ssc_sm($betData,$w=0){

        $pairs[] = [['万位','千位','百位','十位','个位'],['大','小','单','双','质','合']];
        $pairs[] = [['总和、龙虎和'],['龙','虎','和','总大','总小','总单','总双'],'_arr_no_split'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);
    }

    //'万位-9'
    public static function ssc_sz($betData,$w=0){

        $k1 = ['万位','千位','百位','十位','个位'];        
        $v1 = self::$ssc_nums;
        $pairs[] = [$k1,$v1];

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);
    }

    //"千定位-5" 
    public static function ssc_dw1($betData,$w=0){

        $k1 = ['万定位','千定位','百定位','十定位','个定位'];        
        $v1 = array_merge(self::$ssc_nums,['大','小','单','双','质','合']);
        $k2 = ['总和、龙虎和'];
        $v2 = ['龙','虎','和','总大','总小','总单','总单'];
        $pairs[] = [$k1,$v1];
        $pairs[] = [$k2,$v2];

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);
    }

    //"二字定位-万位:4 千位:5"   "三字定位-万位:4 千位:5 百位:6" 
    public static function ssc_dw($betData,$w=0){
        $betData = explode('-',$betData);
        $wf = $betData[0];
        $bet = $betData[1];
        if('二字定位' == $wf && count(_arr($bet))!=2){
            return 0;
        }
        if('三字定位' == $wf && count(_arr($bet))!=3){
            return 0;
        }
        $kvs = [];
        foreach(_arr($bet) as $b){
            $kvs[] = explode(':',$b);
        }

        $k1 = ['万位','千位','百位','十位','个位'];        
        $v1 = self::$ssc_nums;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }

    //二字定位-12,-,-,-,56    复式注单
    public static function ssc_dw_fs($betData,$w=0){
        $betData = explode('-',$betData,2);
        $wf = $betData[0];
        $bet = $betData[1];
        if('二字定位' == $wf){
            return self::rxwfR2f($bet,$w);
        }
        if('三字定位' == $wf){
            return self::dxdsR3f($bet,$w);
        }
        return false;
    }

    //'前三一字组合-4' '后三二字组合-4,5' 单注形式
    public static function ssc_zx($betData,$w=0){
        $pair = explode('-',$betData);
        $wf1 = ['全五一字组合','前三一字组合','中三一字组合','后三一字组合'];
        $wf2 = ['前三二字组合','中三二字组合','后三二字组合'];

        if(in_array($pair[0],$wf1) && count(_arr($pair[1]))!=1){
            return 0;
        }
        if(in_array($pair[0],$wf2) && count(_arr($pair[1]))!=2){
            return 0;
        }

        $kvs[] = $pair;

        $k1 = array_merge($wf1,$wf2);
        $v1 = self::$ssc_nums;
        $pairs[] = [$k1,$v1];
        
        return self::check($kvs,$pairs);
    }    
    
    //万千和数-单
    public static function ssc_hs($betData,$w=0){

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['万千和数','万百和数','万十和数','万个和数','千百和数',
               '千十和数','千个和数','百十和数','百个和数','十个和数'];
        $v1 = ['单','双'];
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }

    //'前三组选三-0,1,2,3,4'  5-10个数字 不重复数字, 
    public static function ssc_z3($betData,$w=0){

        $pair = explode('-',$betData);

        $num = count(_arr($pair[1]));

        if(($num<5||$num>10||is_repeat($pair[1]))){
            return 0;
        }

        $kvs[] = $pair;

        $k1 = ['前三组选三','中三组选三','后三组选三'];        
        $v1 = self::$ssc_nums;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }

    //'前三组选六-0,1,2,3,4'
    public static function ssc_z6($betData,$w=0){

        $pair = explode('-',$betData);

        $num = count(_arr($pair[1]));

        if(($num<4||$num>8||is_repeat($pair[1]))){
            return 0;
        }

        $kvs[] = $pair;

        $k1 = ['前三组选六','中三组选六','后三组选六'];
        $v1 = self::$ssc_nums;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }

    //'前三跨度-2'
    public static function ssc_kd($betData,$w=0){

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['前三跨度','中三跨度','后三跨度'];        
        $v1 = self::$ssc_nums;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }

    // '龙1vs虎2-龙'
    public static function ssc_lh($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['龙1vs虎2','龙1vs虎3','龙1vs虎4','龙1vs虎5','龙2vs虎3','龙2vs虎4','龙2vs虎5','龙3vs虎4','龙3vs虎5','龙4vs虎5'];        
        $v1 = ['龙','虎','和'];
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }                      
    

    //正一-1
    public static function six_dw($betData,$w=0){
        
        $k1 = ['正一','正二','正三','正四','正五','正六','特码'];        
        $v1 = array_merge(self::$six_sz,self::$six_sm);
        $pairs[] = [$k1,$v1,'_arr_no_split'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;
        
        return self::check($kvs,$pairs);
    }      

    //正码-1
    public static function six_zm($betData,$w=0){
        $k1 = ['正码'];        
        $v1 = self::$six_sz;
        $pairs[] = [$k1,$v1,'_arr_no_split'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;
        
        return self::check($kvs,$pairs);
    }      
    //没有验重复,如果'四全中-1,1,1,1'不中奖
    public static function six_lm($betData,$w=0){
        $k1 = ['四全中','四中一','三全中','三中二','二全中','二中特','特串'];        
        $v1 = self::$six_sz;
        $pairs[] = [$k1,$v1];

        $pair = explode('-',$betData);
        $kvs[] = $pair;
        
        return self::check($kvs,$pairs);
    }      
    //一肖-鼠 一尾-0尾
    public static function six_xw($betData,$w=0){
        $k1 = ['一肖'];        
        $v1 = self::$six_sx;
        $k2 = ['一尾'];        
        $v2 = self::$six_ws;
        $pairs[] = [$k1,$v1,'_arr_no_split'];
        $pairs[] = [$k2,$v2,'_arr_no_split'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;
        
        return self::check($kvs,$pairs);        
    }      
    //二肖-蛇,牛,
    public static function six_hx($betData,$w=0){

        $k1 = ['二肖','三肖','四肖','五肖','六肖',
            '七肖','八肖','九肖','十肖','十一肖'];        
        $v1 = self::$six_sx;  
        $pairs[] = [$k1,$v1];

        $pair = explode('-',$betData);
        $wf = $pair[0];
        $bet = $pair[1];
        $key = array_search($wf,$k1);
        if($key !== false && count(_arr($bet))<$key+2){
            return 0;
        }

        $kvs[] = $pair;
        
        return self::check($kvs,$pairs); 
    }      
    //'二肖连中-鸡,猴,牛'
    public static function six_sxl($betData,$w=0){
        $k1 = ['二肖连中','三肖连中','四肖连中','五肖连中',
                '二肖连不中','三肖连不中','四肖连不中'];   
        $v1 = self::$six_sx;  
        $pairs[] = [$k1,$v1];

        $wf1 = ['二肖连中','三肖连中','四肖连中','五肖连中',];
        $wf2 = ['二肖连不中','三肖连不中','四肖连不中']; 

        $pair = explode('-',$betData);
        $wf = $pair[0];
        $bet = $pair[1];

        if( ($key = array_search($wf,$wf1)) !== false && count(_arr($bet))<$key+2){
            return 0;
        }
        if( ($key = array_search($wf,$wf2)) !== false && count(_arr($bet))<$key+2){
            return 0;
        }

        $kvs[] = $pair;
        
        return self::check($kvs,$pairs); 
    }      
    //'二尾连中-1,3,6'
    public static function six_wsl($betData,$w=0){
        $k1 = ['二尾连中','三尾连中','四尾连中',
                '二尾连不中','三尾连不中','四尾连不中'];   
        $v1 = self::$six_ws_num;  
        $pairs[] = [$k1,$v1];

        $wf1 = ['二尾连中','三尾连中','四尾连中'];
        $wf2 = ['二尾连不中','三尾连不中','四尾连不中']; 
        $pair = explode('-',$betData);
        $wf = $pair[0];
        $bet = $pair[1];

        if( ($key = array_search($wf,$wf1)) !== false && count(_arr($bet))<$key+2){
            return 0;
        }
        if( ($key = array_search($wf,$wf2)) !== false && count(_arr($bet))<$key+2){
            return 0;
        }

        $kvs[] = $pair;
        
        return self::check($kvs,$pairs); 
    }      
    //'五不中-11,12,13,14,15,16,7'
    public static function six_qbz($betData,$w=0){

        $k1 = ['五不中','六不中','七不中','八不中',
        '九不中','十不中','十一不中','十二不中'];   
        $v1 = self::$six_sz;  
        $pairs[] = [$k1,$v1];  

        $pair = explode('-',$betData);
        $wf = $pair[0];
        $bet = $pair[1];
        if( ($key = array_search($wf,$k1)) !== false && count(_arr($bet))<$key+5){
            return 0;
        }

        $kvs[] = $pair;
        
        return self::check($kvs,$pairs);             
    }                                      

    public static function pk10_sz($betData,$w=0){
        $k1 = ['冠军','亚军','季军','第四名','第五名',];     
        $v1 = array_merge(self::$pk10_sz,self::$pk10_sm,self::$pk10_lh);
        $k2 = ['第六名','第七名','第八名','第九名','第十名',];     
        $v2 = array_merge(self::$pk10_sz,self::$pk10_sm);
        $pairs[] = [$k1,$v1,'_arr_no_split'];
        $pairs[] = [$k2,$v2,'_arr_no_split'];    

        $pair = explode('-',$betData);
        $kvs[] = $pair;
      
        return self::check($kvs,$pairs);    
    }
    public static function pk10_sm($betData,$w=0){
        return self::pk10_sz($betData,$w);
    }
    public static function pk10_gyh($betData,$w=0){
        $k1 = ['冠亚军和',];     
        $v1 = self::$pk10_gyh;
        $pairs[] = [$k1,$v1,'_arr_no_delim'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);   
    }          

    
    public static function klsf_sz($betData,$w=0){
        $k1 = ['第一球','第二球','第三球','第四球','第五球','第六球','第七球','第八球'];
        $v1 = array_merge(self::$klsf_sz,self::$klsf_sm);

        $k2 = ['总和、龙虎',];     
        $v2 = self::$klsf_zhlh;

        $k3 = ['龙1vs虎2','龙1vs虎3','龙1vs虎4','龙1vs虎5',
            '龙1vs虎6','龙1vs虎7','龙1vs虎8','龙2vs虎3',
            '龙2vs虎4','龙2vs虎5','龙2vs虎6','龙2vs虎7',
            '龙2vs虎8','龙3vs虎4','龙3vs虎5','龙3vs虎6',
            '龙3vs虎7','龙3vs虎8','龙4vs虎5','龙4vs虎6',
            '龙4vs虎7','龙4vs虎8','龙5vs虎6','龙5vs虎7',
            '龙5vs虎8','龙6vs虎7','龙6vs虎8','龙7vs虎8',];     
        $v3 = self::$klsf_lh;

        $pairs[] = [$k1,$v1,'_arr_no_split'];
        $pairs[] = [$k2,$v2,'_arr_no_split'];    
        $pairs[] = [$k3,$v3,'_arr_no_split'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);     
    }
    public static function klsf_sm($betData,$w=0){
        return self::klsf_sz($betData,$w);
    }
    public static function klsf_lh($betData,$w=0){
        return self::klsf_sz($betData,$w);
    }

    //幸运28
    public static function xy28_dw($betData,$w=0){
        $k1 = ['特码','三压一'];
        $v1 = self::$xy28_sz;

        $k2 = ['双面',];     
        $v2 = self::$xy28_sm;

        $pairs[] = [$k1,$v1,'_arr_no_split'];
        $pairs[] = [$k2,$v2,'_arr_no_split'];    

        $betDatawf = explode('-',$betData);
        $wf = $betDatawf[0];
        $bet = $betDatawf[1];
        if( '三压一' == $wf && count(_arr($bet))!=3){
            return 0;
        }

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);          
    }    


    //福彩3D
    public static function fc3d_dw($betData,$w=0){
        $k1 = ['百定位','十定位','个定位'];
        $v1 = array_merge(self::$fc3d_sz,self::$fc3d_sm);

        $k2 = ['百十定位','百个定位','十个定位','百十个定位'];     
        $v2 = self::$fc3d_sz;

        $pairs[] = [$k1,$v1];
        $pairs[] = [$k2,$v2,'_arr_fs_split'];  

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);        
    }
    public static function fc3d_zx($betData,$w=0){
        $k1 = ['一字组合','二字组合','三字组合'];
        $v1 = self::$fc3d_sz;
        $pairs[] = [$k1,$v1];
        $pair = explode('-',$betData);
        $kvs[] = $pair;
        return self::check($kvs,$pairs);        
    }
    public static function fc3d_hs($betData,$w=0){
        $k1 = ['百十和数尾数','百个和数尾数','十个和数尾数','百十个和数尾数'];
        $v1 = array_merge(self::$fc3d_sz,self::$fc3d_sm);

        $k2 = ['百十和数','百个和数','十个和数',];     
        $v2 = self::$fc3d_hs2;

        $k3 = ['百十个和数',];
        $v3 = self::$fc3d_hs3;

        $pairs[] = [$k1,$v1];
        $pairs[] = [$k2,$v2,'_arr_no_split'];
        $pairs[] = [$k3,$v3,'_arr_no_split'];

        $pair = explode('-',$betData);
        $kvs[] = $pair;

        return self::check($kvs,$pairs);
    }
    public static function fc3d_z3($betData,$w=0){
        $pair = explode('-',$betData);

        $num = count(_arr($pair[1]));

        if(($num<5||$num>10||is_repeat($pair[1]))){
            return 0;
        }

        $kvs[] = $pair;

        $k1 = ['组选三'];        
        $v1 = self::$fc3d_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);        
    }
    public static function fc3d_z6($betData,$w=0){
        $pair = explode('-',$betData);

        $num = count(_arr($pair[1]));

        if(($num<4||$num>8||is_repeat($pair[1]))){
            return 0;
        }

        $kvs[] = $pair;

        $k1 = ['组选六'];        
        $v1 = self::$fc3d_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);          
    }
    public static function fc3d_kd($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['跨度',];        
        $v1 = self::$fc3d_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }    

    //----------------快3--------------------

    public static function k3_hz($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['和值',];        
        $v1 = self::$k3_hz;
        $pairs[] = [$k1,$v1,'_arr_no_split'];

        return self::check($kvs,$pairs);
    }        

    public static function k3_tx($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['通选',];        
        $v1 = ['豹子','顺子','对子','三不同'];
        $pairs[] = [$k1,$v1,'_arr_no_split'];

        return self::check($kvs,$pairs);
    }  

    public static function k3_3dx($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['三同号单选',];        
        $v1 = ['111','222','333','444','555','666'];
        $pairs[] = [$k1,$v1,'_arr_no_split'];

        return self::check($kvs,$pairs);
    }  

    //三不同-1,2,3,4
    public static function k3_3bt($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['三不同',];        
        $v1 = self::$k3_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }  

    public static function k3_2fx($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['二同号复选',];        
        $v1 = ['11*','22*','33*','44*','55*','66*'];
        $pairs[] = [$k1,$v1,'_arr_no_split'];

        return self::check($kvs,$pairs);
    }  

    //二同号单选-11 22,3 4
    public static function k3_2dx($betData,$w=0){
        $pair = explode('-',$betData);
        /*
        $kvs[] = $pair;        
        $k1 = ['二同号单选',];        
        $v1 = self::$fc3d_sz;
        $pairs[] = [$k1,$v1];
        */

        $k1 = '同号';
        $v1 = ['11','22','33','44','55','66'];
        $pairs[] = [[$k1],$v1];

        $k2 = '单号';
        $v2 = self::$k3_sz;
        $pairs[] = [[$k2],$v2];

        $pair = _arr($pair[1]);

        $kvs[] = [$k1,$pair[0]];
        $kvs[] = [$k2,$pair[1]];

        return self::check($kvs,$pairs);
    }  

    public static function k3_2bt($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['二不同号',];        
        $v1 = self::$k3_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }  

    public static function k3_bc($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['猜必出',];        
        $v1 = self::$k3_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }  

    public static function k3_bbc($betData,$w=0){
        $pair = explode('-',$betData);
        $kvs[] = $pair;

        $k1 = ['猜必不出',];        
        $v1 = self::$k3_sz;
        $pairs[] = [$k1,$v1];

        return self::check($kvs,$pairs);
    }                      
}

