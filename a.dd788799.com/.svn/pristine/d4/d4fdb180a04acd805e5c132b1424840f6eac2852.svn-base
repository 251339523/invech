<?php
namespace app\common\model;
use think\Model;

use app\common\traits\model\UserFlow;
//use app\common\model\attach\MoneyRecordTrait;

class Money extends Base{

    protected $table = 'gygy_money';
    protected $createTime = 'created_at';
    protected $updateTime = 'updated_at';
    protected $autoWriteTimestamp = 'datetime';

    //$validate是数组或者验证器名
    //validate函数设置$validate成员变量
    //$validate = ['rule'=>[],'msg'=>[],];
    //$validate = 'User.edit';    //User验证器的edit场景;
            
    //自动完成 $auto = $insert + $update; setAttr->修改器;
    //protected $auto = ['remark',];
    //先判断默认值,remark没有对应的value时,value为null;
    //remark存在对应的set方法(修改器),还需要调用修改器;参数是remark对应的值;
    //protected $insert = []; 
    //protected $update = []; 
    /*
    protected function setRemarkAttr($value)
    {
        return $value = '备注';
    }
    */

    use UserFlow;

    CONST DIRECT_IN = 0;
    CONST DIRECT_OUT = 1;
    
    CONST TYPE_RECHARGE = 'recharge';    
    CONST TYPE_WITHDRAW = 'withdraw';
    CONST TYPE_WITHDRAW_REFUSE = 'withdraw_refuse';
    //CONST TYPE_WITHDRAW_DEBIT = 'withdraw_debit';
    
    CONST TYPE_BET = 'bet';
    CONST TYPE_LOTTERY = 'lottery';
    CONST TYPE_LOTTERY_DEBIT = 'lottery_debit'; //重新结算注单时以前的派奖金额扣回来;
    CONST TYPE_BONUS = 'bonus';
    CONST TYPE_BACKWATER = 'backwater';
    CONST TYPE_COMMISSION = 'commission';
    CONST TYPE_MANUAL_WITHDRAW = 'manual_withdraw';//后台手动扣款
    CONST TYPE_MANUAL_DEPOSIT = 'manual_deposit';//后台手动存款
    CONST TYPE_COMPANY_INCOME = 'company_income';//前台公司入款    
    
    CONST TYPE_ARRAY = [
        self::TYPE_RECHARGE,
        self::TYPE_WITHDRAW,
        self::TYPE_WITHDRAW_REFUSE,
        //self::TYPE_WITHDRAW_DEBIT,
        self::TYPE_BET,
        self::TYPE_LOTTERY,
        self::TYPE_LOTTERY_DEBIT,
        self::TYPE_BONUS,
        self::TYPE_BACKWATER,
        self::TYPE_COMMISSION,
        self::TYPE_MANUAL_WITHDRAW,
        self::TYPE_MANUAL_DEPOSIT,
        self::TYPE_COMPANY_INCOME,        
    ];

    CONST NAME_ARRAY = [
        self::TYPE_RECHARGE => '充值',
        self::TYPE_WITHDRAW => '取款申请',
        self::TYPE_WITHDRAW_REFUSE => '取款拒绝',
        //self::TYPE_WITHDRAW_DEBIT => '取款扣款',
        self::TYPE_BET      => '投注',
        self::TYPE_LOTTERY  => '派奖',
        self::TYPE_LOTTERY_DEBIT => '派奖扣回',
        self::TYPE_BONUS    => '红利',
        self::TYPE_BACKWATER=> '返水',
        self::TYPE_COMMISSION=>'佣金',
        self::TYPE_MANUAL_WITHDRAW=>'手动扣款',
        self::TYPE_MANUAL_DEPOSIT=>'手动存款',
        self::TYPE_COMPANY_INCOME=>'公司入款',
              
    ];

    CONST URL_ARRAY = [
        self::TYPE_RECHARGE => 'order/index',
        self::TYPE_WITHDRAW => 'apply/index',
        self::TYPE_WITHDRAW_REFUSE => 'apply/index',
        self::TYPE_BET      => 'bet/index',
        self::TYPE_LOTTERY  => 'bet_lottery/index',
        self::TYPE_LOTTERY_DEBIT => 'bet_lottery/index',
        self::TYPE_BONUS    => 'bonus/flow',
        self::TYPE_BACKWATER=> 'backwater/index',
        self::TYPE_COMMISSION=>'commission/index',
        self::TYPE_MANUAL_WITHDRAW=>'manual/index',
        self::TYPE_MANUAL_DEPOSIT=>'manual/index',
        self::TYPE_COMPANY_INCOME=>'company/income',
    ];

    //前台
    public static function getQlist($request){
        $params =   $request->param();
        $query  =   self::order('id desc');
        $where  =   [];
        $direct = $params['direct']??'';
        if(is_numeric($direct)){
            $query->where('direct',$params['direct']);
        }
        if($params['type']??''){
            $query->where('type',$params['type']);
        }
        if($params['startTime']??''){  
            $query->where('created_at', '>=', $params['startTime']);          
        }
        if($params['endTime']??''){
            $query->where('created_at', '<=', $params['endTime']);
        }
        $query->where('uid',$request->user()->id);
        $data           =   $query->paginate();
        return $data;
    }

    //后台
    public static function attachToSelfRequest(&$query,$params=[]){

        //$params = request()->param();

        $direct = $params['direct']??'';
        if(is_numeric($direct)){
           $query->where('x.direct', $params['direct']);
        }
        if($params['type']??0){
           $query->where('x.type', $params['type']);
        }  
        if($params['remark']??0){
           $query->where('x.remark', $params['remark']);
        }                   
    }   

    public function item()
    {
        return $this->morphTo(['type','item_id'],[
            self::TYPE_RECHARGE         =>  'app\common\model\Order',
            self::TYPE_WITHDRAW         =>  'app\common\model\Apply',
            self::TYPE_WITHDRAW_REFUSE  =>  'app\common\model\Apply',
            self::TYPE_BET              =>  'app\common\model\Bet',
            self::TYPE_LOTTERY          =>  'app\common\model\BetLottery',
            self::TYPE_LOTTERY_DEBIT    =>  'app\common\model\BetLottery',
            self::TYPE_BONUS            =>  'app\common\model\BonusFlow',
            self::TYPE_BACKWATER        =>  'app\common\model\BackWater',
            self::TYPE_COMMISSION       =>  'app\common\model\Commission',
            self::TYPE_MANUAL_WITHDRAW  =>  'app\common\model\ManualMoney',
            self::TYPE_MANUAL_DEPOSIT   =>  'app\common\model\ManualMoney',
            self::TYPE_COMPANY_INCOME   =>  'app\common\model\CompanyMoney',
        ]);
    }

}
