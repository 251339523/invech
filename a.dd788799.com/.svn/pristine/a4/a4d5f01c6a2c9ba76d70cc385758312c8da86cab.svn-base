<?php
namespace app\admin\controller;
use app\admin\Login;
use app\common\model\Type as TypeModel;
use app\common\model\Played as PlayedModel;
use app\common\model\PlayedGroup as PlayedGroupModel;
use app\common\model\PlayedPlGroup as PlayedPlGroupModel;
use app\common\model\PlayedPl as PlayedPlModel;
use app\common\model\LhcTime as LhcTimeModel;
use app\common\model\DataTime as DataTimeModel;
use app\common\model\Data as DataModel;
use app\common\model\ActionLog as LogModel;
class Lottery extends Login{
    
    public function index(){
        $this->view->page_header = '彩种列表';
        $request = request();
        $list =TypeModel::getList($request);
        $this->assign('list',$list);
        $this->assign('types',TypeModel::TYPE_ARRAY);
        return $this->fetch();
    }
    public function save(){
        $request = request();
        $params = $request->param();
        $id =  !empty($params['id'])? $params['id']:'';
        $type =  !empty($params['type'])? $params['type']:'';
        $enable =  !empty($params['enable'])? $params['enable']:'';
        $sort =  !empty($params['sort'])? $params['sort']:'';
        $name =  !empty($params['name'])? $params['name']:'';
        $codeList =  !empty($params['codeList'])? $params['codeList']:'';
        $title =  !empty($params['title'])? $params['title']:'';
        $shortName =  !empty($params['shortName'])? $params['shortName']:'';
        $info =  !empty($params['info'])? $params['info']:'';
        $onGetNoed =  !empty($params['onGetNoed'])? $params['onGetNoed']:'';
        $data_ftime =  !empty($params['data_ftime'])? $params['data_ftime']:'';
        $data = [
            'type'      => $type,
            'enable'    => $enable,
            'sort'      => $sort,
            'name'      => $name,
            'codeList'  => $codeList,
            'title'     => $title,
            'shortName' => $shortName,
            'info'      => $info,
            'onGetNoed' => $onGetNoed,
            'data_ftime'=> $data_ftime,
        ];

         $res = [];
        if($id){
            $type = TypeModel::get(intval($id));
            $list =  $type->validate('Lottery.index')->save($data);
           if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$type,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
               $res['msg'] = "操作成功";
            }else{
                $res['msg']= $type->getError();
            }
             echo json_encode($res);
        }else{
            $type = new TypeModel($data);
           $list = $type->validate('Lottery.index')->save($data);
            if($list){
               LogModel::log(LogModel::BUSINESS_TYPE_ADD,$type,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                $res['msg'] = "操作成功";
            }else{
                $res['msg']= $type->getError();
             }
             echo json_encode($res);
        }
    }
   /* public function del(){
        $request = request();
        $params = $request->param();
        $type =  TypeModel::get(intval($params['id']));

        $list = $type->delete();
        $res = [];
        if($list){
           LogModel::log(LogModel::BUSINESS_TYPE_DELE,$type,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_DELE]);
           $res['msg'] = "操作成功";
        }else{
            $res['msg']= $type->getError();
        }
        echo json_encode($res);
    }*/
    function form(){  
         $request = request();
         $params = $request->param(); 
         if(!empty($params['id'])){
             $info =  TypeModel::get(['id'=>$params['id']]);
              $this->assign('info',$info);  
         }
         $this->assign('types',TypeModel::TYPE_ARRAY);
        return view();
    }

    public function playedGroup(){
        $this->view->page_header = '玩法分组';

        $request = request();
        $list = PlayedGroupModel::getList($request);
        $this->assign('list',$list);
        $this->assign('types',TypeModel::TYPE_ARRAY);
        return $this->fetch();
    }

      public function playedGroup_save(){
        $request = request();
        $params = $request->param();
        $id =  !empty($params['id'])? $params['id']:'';
        $type =  !empty($params['type'])? $params['type']:'';
        $enable =  !empty($params['enable'])? $params['enable']:'';
        $sort =  !empty($params['sort'])? $params['sort']:'';
        $groupName =  !empty($params['groupName'])? $params['groupName']:'';
        $is_kqwf =  !empty($params['is_kqwf'])? $params['is_kqwf']:'';
      
        $data = [
            'type'      => $type,
            'enable'    => $enable,
            'sort'      => $sort,
            'groupName' => $groupName,
            'is_kqwf'   => $is_kqwf,
        ];

         $res = [];
        if($id){
            $playedgroup = PlayedGroupModel::get(intval($id));
            $list =  $playedgroup->validate('Lottery.playedgroup')->save($data);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$playedgroup,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
               $res['msg'] = "操作成功";
            }else{
                $res['msg']= $playedgroup->getError();
            }
             echo json_encode($res);
        }else{
            $playedgroup = new PlayedGroupModel($data);
           $list = $playedgroup->validate('Lottery.playedgroup')->save($data);
            if($list){
               LogModel::log(LogModel::BUSINESS_TYPE_ADD,$playedgroup,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                $res['msg'] = "操作成功";
            }else{
                $res['msg']= $playedgroup->getError();
             }
             echo json_encode($res);
        }
    }
  

   public  function playedGroup_form(){  
         $request = request();
         $params = $request->param(); 
         if(!empty($params['id'])){
             $info =  PlayedGroupModel::get(['id'=>$params['id']]);
              $this->assign('info',$info);  
         }
         $this->assign('types',TypeModel::TYPE_ARRAY);
        return view();
    }

    public function played(){
        $this->view->page_header = '玩法列表';

        $request = request();
        $list =PlayedModel::getList($request);
        $this->assign('list',$list);
        $this->assign('types',TypeModel::TYPE_ARRAY);
        return $this->fetch();        
    }
    
    public function played_save(){
        $request        =   request();
        $params         =   $request->param();
        $id             =  !empty($params['id'])? $params['id']:'';
        $name           =  !empty($params['name'])? $params['name']:'';
        $type           =  !empty($params['type'])? $params['type']:'';
        $groupId        =  !empty($params['groupId'])? $params['groupId']:'';
        $tag            =  !empty($params['tag'])? $params['tag']:'';
        $enable         =  !empty($params['enable'])? $params['enable']:'';
        $bonusProp      =  !empty($params['bonusProp'])? $params['bonusProp']:'';
        $bonusPropBase  =  !empty($params['bonusPropBase'])? $params['bonusPropBase']:'';
        $selectNum      =  !empty($params['selectNum'])? $params['selectNum']:'';
        $simpleInfo     =  !empty($params['simpleInfo'])? $params['simpleInfo']:'';
        $info           =  !empty($params['info'])? $params['info']:'';
        $example        =  !empty($params['example'])? $params['example']:'';
        $ruleFun        =  !empty($params['ruleFun'])? $params['ruleFun']:'';
        $betCountFun    =  !empty($params['betCountFun'])? $params['betCountFun']:'';
        $betCheckFun    =  !empty($params['betCheckFun'])? $params['betCheckFun']:'';
        $randomSscFun   =  !empty($params['randomSscFun'])? $params['randomSscFun']:'';
        $playedTpl      =  !empty($params['playedTpl'])? $params['playedTpl']:'';
        $sort           =  !empty($params['sort'])? $params['sort']:'';
        $is_kqwf        =  !empty($params['is_kqwf'])? $params['is_kqwf']:'';
        $is_mix         =  !empty($params['is_mix'])? $params['is_mix']:'';
        $mix_ids        =  !empty($params['mix_ids'])? $params['mix_ids']:'';
        $rx_mode        =  !empty($params['rx_mode'])? $params['rx_mode']:'';
        $weishu         =  !empty($params['weishu'])? $params['weishu']:'';
        $data = [
            'name'          => $name,
            'type'          => $type,
            'groupId'       => $groupId,
            'tag'           => $tag,
            'enable'        => $enable,
            'bonusProp'     => $bonusProp,
            'bonusPropBase' => $bonusPropBase,
            'selectNum'     => $selectNum,
            'simpleInfo'    => $simpleInfo,
            'info'          => $info,
            'example'       => $example,
            'ruleFun'       => $ruleFun,
            'betCountFun'   => $betCountFun,
            'betCheckFun'   => $betCheckFun,
            'randomSscFun'  => $randomSscFun,
            'playedTpl'     => $playedTpl,
            'sort'          => $sort,
            'is_kqwf'       => $is_kqwf,
            'is_mix'        => $is_mix,
            'mix_ids'       => $mix_ids,
            'rx_mode'       => $rx_mode,
            'weishu'        => $weishu,
        ];

        $res = [];
        if($id){
            $played = PlayedModel::get(intval($id));
            if($is_kqwf){
                $list =  $played->validate('Lottery.playedgf')->save($data);    
            }else{
                $list =  $played->validate('Lottery.playedkq')->save($data);
            }
           
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$played,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
               $res['msg'] = "操作成功";
            }else{
                $res['msg']= $played->getError();
            }
             echo json_encode($res);
        }else{
            $played = new PlayedModel($data);
            if($is_kqwf){
                $list =  $played->validate('Lottery.playedgf')->save($data);    
            }else{
                $list =  $played->validate('Lottery.playedkq')->save($data);
            }
           if($list){
               LogModel::log(LogModel::BUSINESS_TYPE_ADD,$played,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                $res['msg'] = "操作成功";
            }else{
                $res['msg']= $played->getError();
             }
             echo json_encode($res);
        }
    }
    

       public  function played_form(){  
             $request = request();
             $params = $request->param(); 
             if(!empty($params['id'])){
                 $info =  PlayedModel::get(['id'=>$params['id']]);
                  $this->assign('info',$info);  
             }
            $this->assign('types',TypeModel::TYPE_ARRAY);
            return view();
        }


    public function plgroup(){
        $this->view->page_header = '赔率分组';

        $request = request();
        $list =PlayedPlGroupModel::getList($request);
        $this->assign('list',$list);
        return $this->fetch();        
    }
     public function plgroup_save(){
        $request = request();
        $params = $request->param();
        $id =  !empty($params['id'])? $params['id']:'';
        $playedId =  !empty($params['playedId'])? $params['playedId']:'';
        $name =  !empty($params['name'])? $params['name']:'';
        $sort =  !empty($params['sort'])? $params['sort']:'';
         
        $mode = is_numeric($params['mode'])? $params['mode']:'';
        $data = [
            'playedId'  => $playedId,
            'name'      => $name,
            'sort'      => $sort,
            'mode'      => $mode,
            
        ];
       $res = [];
        if($id){
            $plgroup = PlayedPlGroupModel::get(intval($id));
            $list =  $plgroup->validate('Lottery.plgroup')->save($data);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$plgroup,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
               $res['msg'] = "操作成功";
            }else{
                $res['msg']= $plgroup->getError();
            }
             echo json_encode($res);
        }else{
            $plgroup = new PlayedPlGroupModel($data);
           $list = $plgroup->validate('Lottery.plgroup')->save($data);
            if($list){
               LogModel::log(LogModel::BUSINESS_TYPE_ADD,$plgroup,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                $res['msg'] = "操作成功";
            }else{
                $res['msg']= $plgroup->getError();
             }
             echo json_encode($res);
        }
    }
    public  function plgroup_form(){  
         $request = request();
         $params = $request->param(); 
         if(!empty($params['id'])){
             $info =  PlayedPlGroupModel::get(['id'=>$params['id']]);
             $playid = $info->played->id;
             $type    = $info->played->type;
             $groupid = $info->played->playedgroup->id;
            $this->assign('playid',$playid); 
             $this->assign('typeinfo',$type);   
            $this->assign('groupid',$groupid);  
             $this->assign('info',$info);
         }
         $this->assign('types',TypeModel::TYPE_ARRAY);
        return view();
    }
    public function pl(){
        $this->view->page_header = '赔率列表';

        $request = request();
        $list = PlayedPlModel::getList($request);
       $this->assign('list',$list);
        return $this->fetch();        
    }
      public function pl_save(){
            $request    = request();
            $params     = $request->param();
            $id         =  !empty($params['id'])? $params['id']:'';
            $playedId   =  !empty($params['playedId'])? $params['playedId']:'';
            $pl_group_id=  !empty($params['pl_group_id'])? $params['pl_group_id']:'';
            $value      =  !empty($params['value'])? $params['value']:'';
            $pl         = !empty($params['pl'])? $params['pl']:'';
            $data = [
                'playedId'      => $playedId,
                'pl_group_id'   => $pl_group_id,
                'value'         => $value,
                'pl'            => $pl,
            ];
           $res = [];
            if($id){
                $pl = PlayedPlModel::get(intval($id));
                $list =  $pl->validate('Lottery.pl')->save($data);
                
                if(!empty($list)){
                    LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$pl,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
                   $res['msg'] = "操作成功";
                }else{
                    $res['msg']= "操作失败";
                }
                 echo json_encode($res);
            }else{
                $pl = new PlayedPlModel($data);
               $list = $pl->validate('Lottery.pl')->save($data);
                if($list){
                   LogModel::log(LogModel::BUSINESS_TYPE_ADD,$pl,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                    $res['msg'] = "操作成功";
                }else{
                    $res['msg']= $pl->getError();
                 }
                 echo json_encode($res);
            }
        }

    public  function pl_form(){  
         $request = request();
         $params = $request->param(); 
         if(!empty($params['id'])){
            $info =  PlayedPlModel::get(['id'=>$params['id']]);
            $playid = $info->played->id;
            $type = $info->played->type;
            $groupid = $info->played->playedgroup->id;
            $plgroupid = $info->plgroup->id;
            $this->assign('playid',$playid); 
            $this->assign('typeinfo',$type);   
            $this->assign('groupid',$groupid); 
            $this->assign('plgroupid',$plgroupid); 
            $this->assign('info',$info);
         }
         $this->assign('types',TypeModel::TYPE_ARRAY);
        return view();
    }

    public function time(){
        $this->view->page_header = '开奖时间表';

        $types = model('type')->allTypes();

        $type = input('type/d');
        if(!$type){
            $this->error('请选择彩种!');
        }
        $lottery = $types[$type]??null;
        if(!$lottery){
            $this->error('彩种不存在!');
        }

        $this->assign('timetype',$type);
        $this->assign('types',$types);

        if($type==43){
            $model = model('lhc_time');
        }else{
            $model = model('data_time');
        }

        $request = request();
        $list = $model->getList($request);
        $this->assign('list',$list);

        return $this->fetch();
    }
    public function time_save(){
        $request = request();
        $params = $request->param();
        $id =  !empty($params['id'])? $params['id']:'';
        $type =  !empty($params['type'])? $params['type']:'';
        $actionNo =  !empty($params['actionNo'])? $params['actionNo']:'';
        $actionTime =  !empty($params['actionTime'])? $params['actionTime']:'';
        $data = [
            'type'        => $type,
            'actionNo'    => $actionNo,
            'actionTime'  => $actionTime,
            'stopTime'    => $actionTime,
        ];

         $res = [];
       
         if($id){
            if($type=='43'){
                 $time = LhcTimeModel::get(intval($id));
            }else{
                 $time = DataTimeModel::get(intval($id));
            }
           $list =  $time->validate('Lottery.time')->save($data);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$time,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
               $res['msg'] = "操作成功";
            }else{
                $res['msg']= $time->getError();
            }
             echo json_encode($res);
        }else{
            if($type=='43'){
                 $time = new LhcTimeModel($data);
            }else{
                 $time = new DataTimeModel($data);
            }
           $list = $time->validate('Lottery.time')->save($data);
            if($list){
               LogModel::log(LogModel::BUSINESS_TYPE_ADD,$time,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                $res['msg'] = "操作成功";
            }else{
                $res['msg']= $time->getError();
             }
             echo json_encode($res);
        }
    }
  

   public  function time_form(){  
         $request = request();
         $params = $request->param(); 
         if($params['type']??''){
            $timetype = $params['type'];

         }else{
            $timetype = 1;
         }
         if($params['id']??''){

            if($timetype=='43'){
                $model = model('lhc_time');
            }else{
                $model = model('data_time');
            }
           
             $info =  $model->get(['id'=>$params['id'],'type'=>$params['type']]);
              $this->assign('info',$info);  
         }
        $this->assign('timetype',$timetype);  
        $this->assign('types',model('type')->allTypes());
        return view();
    }

    public function data(){
        
        $types = TypeModel::allTypes();
        $this->assign('types',$types);
        $request = request();
        $list = DataModel::getList($request);
        $this->assign('list',$list);
        $this->view->page_header = '开奖结果';
        return $this->fetch();        
    }  
    public function data_save(){
        $request = request();
        $params = $request->param();
        $id =  !empty($params['id'])? $params['id']:'';
        $type =  !empty($params['type'])? $params['type']:'';
        $time =  !empty($params['time'])? $params['time']:'';
        $number =  !empty($params['number'])? $params['number']:'';
        $datas =  !empty($params['data'])? $params['data']:'';
        $datalist = [
            'type'      => $type,
            'time'      => strtotime($time),
            'number'    => $number,
            'data'      => $datas,
         ];

         $res = [];
        if($id){
            $data = DataModel::get(intval($id));
            $list =  $data->validate('Lottery.data')->save($datalist);
            if($list){
                LogModel::log(LogModel::BUSINESS_TYPE_EDIT,$data,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_EDIT]);
               $res['msg'] = "操作成功";
            }else{
                $res['msg']= $data->getError();
            }
             echo json_encode($res);
        }else{
            $data = new DataModel($datalist);
           $list = $data->validate('Lottery.data')->save($datalist);
            if($list){
               LogModel::log(LogModel::BUSINESS_TYPE_ADD,$data,LogModel::BUSINESS_TYPES[LogModel::BUSINESS_TYPE_ADD]);
                $res['msg'] = "操作成功";
            }else{
                $res['msg']= $data->getError();
             }
             echo json_encode($res);
        }
    }
  

   public  function data_form(){  
         $request = request();
         $params = $request->param(); 
         if(!empty($params['id'])){
             $info =  DataModel::get(['id'=>$params['id']]);
              $this->assign('info',$info);  
         }
         $this->assign('types',TypeModel::allTypes());
        return view();
    }   

      public function getGroupByid(){
            $request        =   request();
            $params         =   $request->param();
            $type           =  !empty($params['type'])? $params['type']:'';
            $grouplist = TypeModel::allTypesId($type);
            if( $grouplist){
                echo json_encode($grouplist);
            }
            
      }
     public function getPlayedByid(){
            $request        =   request();
            $params         =   $request->param();
            $type           =  !empty($params['type'])? $params['type']:'';
            $groupId        =  !empty($params['groupId'])? $params['groupId']:'';
            $playedlist = TypeModel::allTypesId($type, $groupId);
            if( $playedlist){
                echo json_encode($playedlist);
            }
            
    } 
    public function getPlgroupByid(){
        $request        =   request();
        $params         =   $request->param();
        $type           =  !empty($params['type'])? $params['type']:'';
        $groupId        =  !empty($params['groupId'])? $params['groupId']:'';
        $playId        =  !empty($params['playId'])? $params['playId']:'';
        $playedlist = TypeModel::allTypesId($type, $groupId,$playId);
        if( $playedlist){
            echo json_encode($playedlist);
        }
            
    }  
}