<?php
namespace app\common\model\report;

use app\common\model\Bet;
use app\common\model\Order;
use app\common\model\Withdraw;
use app\common\model\ManualMoney;
use app\common\model\BonusFlow;

trait DailyAndMonthForFlowTrait
{
    //普通流水模型使用:从流水表 统计日报表 和 月报表;  不需要daily_xxx的实体表支持

    private static function attachToGroup($query,$mode='day'){
        if(!in_array($mode,['day','month',])){
            throw new \Exception('分组模式有误!');
        }
        if($mode=='day'){
            $field = "DATE_FORMAT(created_at,'%Y-%m-%d') AS day"; 
        }else{
            $field = "DATE_FORMAT(created_at,'%Y-%m') AS month"; 
        }               
        $query->field($field)->group($mode);
        //$query->field($fields);
    }

    public static function getReportBuild($fields=[],$where=[],$paginate=true,$mode='day'){

        $model = (new static);

        //$query = $model->db(true,false);
        $query = $model->db(true,true);

        self::attachToGroup($query,$mode);
        self::attachToFieldAndWhere($query,$fields,$where);

        $class_name = get_class();
        if(method_exists($class_name,'attachToRequest')){
           $class_name::attachToRequest($query);
        }
        
        if($paginate){
            return self::makeWrapperForPaginate($query,$mode);
        }else{
            return $query;
        }

    }

    public static function getMonthReportBuild($fields=[],$where=[],$paginate=true){
        return self::getReportBuild($fields,$where,$paginate,'month');
    }

    public static function getDailyReportBuild($fields=[],$where=[],$paginate=true){
        return self::getReportBuild($fields,$where,$paginate,'day');
    }

    public static function getAllReportBuild($mode='day'){

        $bet_fields = [
            'ifnull(sum(mode*beiShu*actionNum),0.00) as bet_amount',
            'ifnull(sum(actionNum),0.00) as bet_count',
            'ifnull(sum(bonus),0.00) as zj_amount',  
            'ifnull(sum(zjCount),0.00) as zj_count',
            'ifnull(sum(mode*beiShu*actionNum)-sum(bonus),0.00) as win_amount',
            'ifnull(sum(fanDianAmount),0.00) as backwater_amount',            
            ];
        $bet_where = [];
        $query_bet = Bet::getReportBuild($bet_fields,
            $bet_where,false,$mode);

        $deposit_fields = 
            [
                'ifnull(sum(amount),0.00) as deposit_amount',
            ];
        $deposit_where = [];
        $query_deposit = Order::getReportBuild($deposit_fields,
            $deposit_where,false,$mode);

        $deposit_real_fields = [
                'ifnull(sum(amount),0.00) as deposit_real_amount',
            ];
        $deposit_real_where = ['status'=>1,];
        $query_deposit_real = Order::getReportBuild($deposit_real_fields,
            $deposit_real_where,false,$mode);

        $withdraw_fields = [
            'ifnull(sum(amount),0.00) as withdraw_amount',
            'ifnull(sum(real_amount),0.00) as withdraw_real_amount',
            'ifnull(sum(debit_amount),0.00) as withdraw_debit_amount',
        ];
        $withdraw_where = [];
        $query_withdraw = Withdraw::getReportBuild($withdraw_fields,
            $withdraw_where,false,$mode);

        $bonus_fields = [
            'ifnull(sum(amount),0.00) as bonus_amount',
        ];
        $bonus_where = [];
        $query_bonus = BonusFlow::getReportBuild($bonus_fields,
            $bonus_where,false,$mode);

        $manual_withdraw_fields = [
            'sum(amount) as manual_withdraw_amount',
        ];
        $manual_withdraw_where = ['bonus_id'=>-1];
        $query_manual_withdraw = ManualMoney::getReportBuild($manual_withdraw_fields,
            $manual_withdraw_where,false,$mode);

        $manual_deposit_fields = [
            'sum(amount) as manual_deposit_amount',
        ];
        $manual_deposit_where = ['bonus_id'=>0];        
        $query_manual_deposit = ManualMoney::getReportBuild($manual_deposit_fields,
            $manual_deposit_where,false,$mode);


        $sub_query_bet = $query_bet->select(false);
        $sub_query_deposit = $query_deposit->select(false);
        $sub_query_deposit_real = $query_deposit_real->select(false);
        $sub_query_withdraw = $query_withdraw->select(false);
        $sub_query_bonus = $query_bonus->select(false);
        $sub_query_manual_withdraw = $query_manual_withdraw->select(false);
        $sub_query_manual_deposit = $query_manual_deposit->select(false);

        $query = db()->table('('.$sub_query_bet.') b');
        $query->join('('.$sub_query_deposit.') d','b.'.$mode.'=d.'.$mode,'LEFT');
        $query->join('('.$sub_query_deposit_real.') dr','b.'.$mode.'=dr.'.$mode,'LEFT');
        $query->join('('.$sub_query_withdraw.') w','b.'.$mode.'=w.'.$mode,'LEFT');
        $query->join('('.$sub_query_bonus.') bo','b.'.$mode.'=bo.'.$mode,'LEFT');
        $query->join('('.$sub_query_manual_withdraw.') mw','b.'.$mode.'=mw.'.$mode,'LEFT');
        $query->join('('.$sub_query_manual_deposit.') md','b.'.$mode.'=md.'.$mode,'LEFT');

        $fields = [
            //'b.'.$mode.' as '.$mode,
            'b.'.$mode.' as date',

            'ifnull(bet_amount,0.00) as bet_amount',
            'ifnull(bet_count,0.00) as bet_count',
            'ifnull(zj_amount,0.00) as zj_amount',
            'ifnull(zj_count,0) as zj_count',
            'ifnull(win_amount,0) as win_amount',
            'ifnull(backwater_amount,0.00) as backwater_amount',

            'ifnull(deposit_amount,0.00) as deposit_amount',
            'ifnull(deposit_real_amount,0.00) as deposit_real_amount',

            'ifnull(withdraw_amount,0.00) as withdraw_amount',
            'ifnull(withdraw_real_amount,0.00) as withdraw_real_amount',
            'ifnull(withdraw_debit_amount,0.00) as withdraw_debit_amount',

            'ifnull(bonus_amount,0.00) as bonus_amount',

            'ifnull(manual_deposit_amount,0.00) as manual_deposit_amount',
            'ifnull(manual_withdraw_amount,0.00) as manual_withdraw_amount',           
        ];        

        $query->field($fields)->order('b.'.$mode);

        return $query->paginate();   
    }
}
