<?php 
namespace app\api\controller;

use app\api\Base;
use app\api\error\CodeBase;

class User extends Base {
    
    //------------用户中心------------
    public function info(){
        if(IS_POST){
            $ret = $this->user->edit();
            return $this->bool_return($ret);                  
        }else{
            $stat = $this->user->getMemberStat();
            $this->user->message_unread_num = $stat['message_unread_num'];
            $this->user->withdraw_amount = $stat['withdraw_amount'];
            $this->user->deposit_amount = $stat['deposit_amount'];
            return $this->apiReturn([],$this->user); 
        }
    }

    public function save_password(){
        $ret = $this->user->password();
        return $this->bool_return($ret);     
    }

    public function save_coinpassword() {//修改支付密码   
        $ret = $this->user->coinPassword();
        return $this->bool_return($ret);       
    }

    public function bank(){
        $ret = $this->user->bank();
        return $this->bool_return($ret);       
    }

    //--------------站内信--------------
    public function inbox(){
        $list = $this->user->getMessQList();
        return $this->apiReturn([],$list);
    }

    public function inbox_del(){
        $params = request()->param(); 
        $ret = $this->user->getMessDel($params['ids']);
        return $this->bool_return($ret);      
    }

    public function inbox_edit(){
        $params = request()->param(); 
        $ret = $this->user->getMessEdit($params['ids']);
        return $this->bool_return($ret); 
    }    
    public function inbox_send(){
        $ret = $this->user->MessSend();
        return $this->bool_return($ret);   
    }
    //--------------提案--------------
    public function agent(){
        $ret = $this->user->apply('agent');
        return $this->bool_return($ret);    
    }

    public function get_withdraw_info(){
        $data = $this->user->get_withdraw_info();
        return $this->apiReturn([],$data);
    }

    public function withdraw(){
        $params = request()->param();
        if (!bcrypt_verify($params['coinPassword'],$this->user->coinPassword)){
            return $this->apiReturn(CodeBase::$error,'取款密码错误,请重新输入');
        }

        $params['bank_name'] = $this->user->bank_name;
        $params['bank_username'] = $this->user->bank_username;
        $params['bank_account'] = $this->user->bank_account;
        $params['bank_address'] = $this->user->bank_address;
        $ret = $this->user->apply('withdraw',$params);
        return $this->bool_return($ret);
    }

    //----------------用户流水记录-------------
    public function money_record(){
        $list = $this->user->money_record();
        return $this->apiReturn([],$list);
    }

    public function recharge_record(){
        $list = $this->user->recharge_record();
        return $this->apiReturn([],$list);        
    }

    public function bet_record(){
        $list = $this->user->bet_record();
        return $this->apiReturn([],$list);        
    }

    public function withdraw_record(){
        $list = $this->user->withdraw_record();
        return $this->apiReturn([],$list);  
    }

    public function backwater_record(){
        $list = $this->user->backwater_record();
        return $this->apiReturn([],$list);        
    }
      //投注未接记录
    public function bet_record_miss(){ 
        $list = $this->user->bet_record_miss();
        foreach($list as $k=>$v){
            $data[$k]['type']   = $v->type;
            $data[$k]['typeName']   = $v->types->title;
            $data[$k]['counts'] = $v->counts;
        }
       
        return $this->apiReturn([],$data);
    }
    //投注未接记录
    public function bet_record_miss_detail(){        
        $list   = $this->user->bet_record_miss_detail();
        return $this->apiReturn([],$list);
    }
}

