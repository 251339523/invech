<?php
namespace app\common\model\member;

use app\common\model\Bet;

trait AgentTrait
{
    //代理登录,auth服务
    public function scopeAgent($query){
        return $query->where('is_agent',1);
    }

    public function agent(){
        return $this->belongsTo('Member','agent_id','uid');
    }

    //下线,parentId,parents,admin三个字段丢弃,改用agent_id
    public function subMembers(){
        return $this->hasMany('Member','agent_id','uid');
    }

    public function isAgent(){
        return $this->is_agent;
    }

    //代理策略
    public function isAgentOf($member){
        return $this->isAgent() && $this->uid == $member->agent_id;
    }

    //获取所有上层代理-递归
    public function getAgents(){
        if(!$this->agent){
            return collection([]);
        }

        $collection = collection([$this->agent]);

        $agents = $collection->merge($this->agent->getAgents());
        
        return $agents;
    }

    //获取所有下层会员-递归
    public function getSubMembers($include_root = false){
        if($include_root){            
            $collection = collection([$this]);
        }else{
            $collection = collection([]);
        }                
        $subs = $this->sub_members->reduce(function ($carry, $sub_member){
            if(!$sub_member->isAgent()){
                return $carry->merge(collection([$sub_member]));
            }else{
                return $carry->merge($sub_member->getSubMembers());    
            }            
        }, $collection);  
        return $subs;
    }

    //---------------------代理后台---------------------

    public function scopeMembers($query){
        return $query->where('agent_id',$this->uid);
    }

    //暂定为投注过的为有效会员
    public function scopeAvailMembers($query){
        //return $query->where('agent_id',$this->uid)->join();
        return $query->where('agent_id',$this->uid)->where('uid','in',function($query){ 
            //$query->table((new Bet)->getTable())->column('uid');
            //query执行查询后option和table等信息置空;
            //tp只需要设置查询选项,再通过buildSql构造完整的where子句;
            $query->table((new Bet)->getTable())->distinct(true)->field('uid');
        });
    }


    public function getMembers($request){
        
        $query = $this->members()->getBuild($request);
       
        $data = $query->paginate(10);
     
        return $data;
    }     

    public function getAvailMembers($request){
        
        $query = $this->availMembers()->getAvailMemberBuild($request);
       
        $data = $query->paginate(10);
     
        return $data;
    }    

    public function getAvailMemberBuild($request){
        
        $query = $this->db(true,false);

        $query->order('uid');

        $params = $request->param();
        if($params['keywords']??''){
             $query->where('username|nickname', 'like','%'.trim($params['keywords']).'%');
         }

        return $query; 
    }
}
