<?php
// +----------------------------------------------------------------------
// | OneThink [ WE CAN DO IT JUST THINK IT ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013 http://www.onethink.cn All rights reserved.
// +----------------------------------------------------------------------
// | Author: 麦当苗儿 <zuojiazi@vip.qq.com> <http://www.zjzit.cn>
// +----------------------------------------------------------------------

namespace app\mobile\Controller;
use app\mobile\Base;
use think\Db;
use think\Session;


/**
 * 提现处理
 * Class Cash
 * @package app\mobile\Controller
 */
class Cash extends Base
{

    public function _initialize()
    {
        $this->user = model('members')->where('uid',Session::get('user.uid'))->find()->toArray() ;
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     *  新增提现申请处理
     */
    public  function applyCash ()
    {
        $backReturn['status'] = 'error'    ;
        $backReturn['msg']    = '申请失败,请联系客服处理' ;
        $backReturn['url']    = Url('user/cash') ;

        $this->getSystemSettings() ;
        $user = model('members')->find($this->user['uid']) ;

        //资金相关数据判断
        if ( $user['coinPassword'] != think_ucenter_md5(request()->param('coinpwd'), UC_AUTH_KEY) ) {
            $backReturn['msg'] = ('资金密码不正确') ;
            return json_encode($backReturn) ;
        }
        if ( $user['coin']<intval(request()->param('amount')) ) {
            $backReturn['msg'] = ('你帐户资金不足') ;
            return json_encode($backReturn) ;
        }

        //查询最大提现次数与已经提现次数
        $time  = strtotime(date('Y-m-d', $this->time)) ;
        $cash  =  model('member_cash')->where(array('actionTime'=>array('egt',$time), 'uid'=>$this->user['uid']))->field('count(*) as count')->find()->toArray() ;
        $grade = model('member_level')->where(array('level'=>$this->user['grade']))->field('maxToCashCount')->find()->toArray() ;

//        if ( $times >= $cash['count'] ) {
//            //$cashTimes=$grade['maxToCashCount'];
//            $cashTimes = $this->settings['cashTimes'];
//            if ( $times >= $cashTimes ) $this->error('对不起，今天你提现次数已达到最大限额，请明天再来') ;
//        }

        //增加黑客修改提现金额为负数不合法的判断
        if ( request()->param('amount') < 1 ) {
            $backReturn['msg'] = ('提现金额不得低于1元') ;
            return json_encode($backReturn) ;
        }
        $amount = intval(request()->param('amount')) ;
        if( $amount<$this->settings['cashMin'] || $amount>$this->settings['cashMax'] ) {
            $backReturn['msg'] = ('提现金额必须介于'.$this->settings['cashMin'].'和'.$this->settings['cashMax'].'之间') ;
            return json_encode($backReturn) ;
        }

        //提示时间检查
        $baseTime = strtotime(date('Y-m-d ',$this->time).'06:00') ;
        $fromTime = strtotime(date('Y-m-d ',$this->time).$this->settings['cashFromTime'].':00') ;
        $toTime   = strtotime(date('Y-m-d ',$this->time).$this->settings['cashToTime'].':00') ;

        if ( ($fromTime>$toTime && $this->time < $fromTime && $this->time > $toTime)
            || ($fromTime<$toTime && ($this->time < $fromTime || $this->time > $toTime))) $backReturn['msg'] = ("提现时间：从".$this->settings['cashFromTime']."到".$this->settings['cashToTime']) ;

        //近2天来的消费判断
        $cashAmout      = 0 ;
        $rechargeAmount = 0 ;
        $rechargeTime   = strtotime('00:00') ;
        if ( $this->settings['cashMinAmount'] ) {
            $cashMinAmount = $this->settings['cashMinAmount']/100;
            $gRs = model('member_recharge')->where(array('uid'=>$this->user['uid'], 'state'=>array('in','1,2,9'), 'isDelete'=>0 , 'rechargeTime'=>array('egt',$rechargeTime)))->field('sum(case when rechargeAmount>0 then rechargeAmount else amount end) as rechargeAmount')->find() ;

            if ($gRs) { $rechargeAmount = $gRs["rechargeAmount"]*$cashMinAmount ; }
            if($rechargeAmount){
                //近2天来消费总额
                $bet = model('bets')->where(array('actionTime'=>array('egt',$rechargeTime), 'uid'=>$this->user['uid'], 'isDelete'=>0, 'lotteryNo'=>array('neq','')))->field('sum(mode*beiShu*actionNum) as betAmout')->find() ;
                $betAmout = $bet['betAmout'];
                if(floatval($betAmout)<floatval($rechargeAmount)) $backReturn['msg'] = ("消费满".$this->settings['cashMinAmount']."%才能提现");
            }
        }

        //近2天来的消费判断结束
        $bank = model('member_bank')->where(array('uid'=>$this->user['uid'], 'id'=>request()->param('id')))->select() ;
        if (!$bank) { $backReturn['msg'] =  ('提现银行卡不存在') ; }
        $para['username']   = $bank[0]['username'] ;
        $para['account']    = $bank[0]['account']  ;
        $para['amount']     = request()->param('amount') ;
        $para['bankId']     = $bank[0]['bankId'] ;
        $para['actionTime'] = isset($this->time) && !empty($this->time) ? $this->time : time() ;
        $para['uid']        = $this->user['uid'] ;

        Db::startTrans() ;
        // 插入提现请求表
        if ($lastid = model('member_cash')->save($para)) {
            // 流动资金
            $return = $this->addCoin( array(
                'coin'      => 0-$para['amount'],
                'fcoin'     => $para['amount'],
                'uid'       => $para['uid'],
                'liqType'   => 106,
                'info'      => "提现[$lastid]资金冻结",
                'extfield0' => $lastid
            )) ;

            if ($return) {
                Db::commit() ; //成功则提交
                $backReturn['status'] = 'success' ;
                $backReturn['msg']    = '申请提现成功，提现将在10分钟内到帐，如未到账请联系在线客服。' ;
                return  json_encode($backReturn) ;
            }
        } else {
            Db::rollback() ; //不成功，则回滚
            $backReturn['msg'] = '提交提现请求出错';
            return  json_encode($backReturn) ;
        }
    }

    /**
     * 提现结果
     */
    public final function  backResult()
    {
        $cash = model('member_cash')->where(array('state'=>1))->field('count(id) as count')->find() ;
        $this->assign('txcount',$cash['count']) ;
        $this->assign('settings',$this->getSystemSettings()) ;
        return $this->fetch() ;
    }

    //提现详单
    public final function info()
    {
        $cashInfo = model('member_cash')->where(array('id'=>request()->param('id')))->find() ;
        $bankInfo = model('member_bank')->where(array('uid'=>$cashInfo['uid']))->find() ;
        $list     = model('bank_list')->order('id')->select() ;

        $bankList = array() ;
        if ($list) {
            foreach($list as $var){
                $bankList[$var['id']]=$var;
            }
        }

        $this->assign('cashInfo',$cashInfo) ;
        $this->assign('bankInfo',$bankInfo) ;
        $this->assign('bankList',$bankList) ;
        return $this->fetch('cash/cash-info') ;
    }

}
